{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:crowd/server/crowd.js","meteor://ðŸ’»app/packages/rocketchat:crowd/server/settings.js"],"names":["logger","Logger","fallbackDefaultAccountSystem","bind","username","password","indexOf","email","info","loginRequest","user","digest","SHA256","algorithm","Accounts","_runLoginHandlers","CROWD","constructor","AtlassianCrowd","require","url","RocketChat","settings","get","urlLastChar","slice","options","crowd","base","application","name","rejectUnauthorized","crowdClient","authenticateSync","Meteor","wrapAsync","authenticate","findSync","find","pingSync","ping","checkConnection","error","auth","userResponse","displayname","active","syncDataToUser","crowdUser","id","emails","address","verified","_setRealName","users","update","$set","sync","self","models","Users","findCrowdUsers","forEach","_id","addNewUser","userQuery","findOne","stampedToken","_generateStampedLoginToken","$push","_hashStampedToken","userId","token","createUser","updateUser","registerLoginHandler","undefined","crowdPassword","interval","timeout","key","value","clearInterval","clearTimeout","setInterval","setTimeout","methods","crowd_test_connection","Error","method","authz","hasRole","message","params","startup","addGroup","enableQuery","add","type","public","i18nLabel","actionText"],"mappings":"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","file":"/packages/rocketchat_crowd.js","sourcesContent":["/* globals:CROWD:true */\n/* eslint new-cap: [2, {\"capIsNewExceptions\": [\"SHA256\"]}] */\nconst logger = new Logger('CROWD', {});\n\nfunction fallbackDefaultAccountSystem(bind, username, password) {\n\tif (typeof username === 'string') {\n\t\tif (username.indexOf('@') === -1) {\n\t\t\tusername = {username};\n\t\t} else {\n\t\t\tusername = {email: username};\n\t\t}\n\t}\n\n\tlogger.info('Fallback to default account system', username);\n\n\tconst loginRequest = {\n\t\tuser: username,\n\t\tpassword: {\n\t\t\tdigest: SHA256(password),\n\t\t\talgorithm: 'sha-256'\n\t\t}\n\t};\n\n\treturn Accounts._runLoginHandlers(bind, loginRequest);\n}\n\nconst CROWD = class CROWD {\n\tconstructor() {\n\t\tconst AtlassianCrowd = require('atlassian-crowd');\n\t\tlet url = RocketChat.settings.get('CROWD_URL');\n\t\tconst urlLastChar = url.slice(-1);\n\n\t\tif (urlLastChar !== '/') {\n\t\t\turl += '/';\n\t\t}\n\n\t\tthis.options = {\n\t\t\tcrowd: {\n\t\t\t\tbase: url\n\t\t\t},\n\t\t\tapplication: {\n\t\t\t\tname: RocketChat.settings.get('CROWD_APP_USERNAME'),\n\t\t\t\tpassword: RocketChat.settings.get('CROWD_APP_PASSWORD')\n\t\t\t},\n\t\t\trejectUnauthorized: RocketChat.settings.get('CROWD_Reject_Unauthorized')\n\t\t};\n\n\t\tthis.crowdClient = new AtlassianCrowd(this.options);\n\n\t\tthis.crowdClient.user.authenticateSync = Meteor.wrapAsync(this.crowdClient.user.authenticate, this);\n\t\tthis.crowdClient.user.findSync = Meteor.wrapAsync(this.crowdClient.user.find, this);\n\t\tthis.crowdClient.pingSync = Meteor.wrapAsync(this.crowdClient.ping, this);\n\t}\n\n\tcheckConnection() {\n\t\tthis.crowdClient.pingSync();\n\t}\n\n\tauthenticate(username, password) {\n\t\tif (!username || !password) {\n\t\t\tlogger.error('No username or password');\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.info('Going to crowd:', username);\n\t\tconst auth = this.crowdClient.user.authenticateSync(username, password);\n\n\t\tif (!auth) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userResponse = this.crowdClient.user.findSync(username);\n\n\t\tconst user = {\n\t\t\tdisplayname: userResponse['display-name'],\n\t\t\tusername: userResponse.name,\n\t\t\temail: userResponse.email,\n\t\t\tpassword,\n\t\t\tactive: userResponse.active\n\t\t};\n\n\t\treturn user;\n\t}\n\n\tsyncDataToUser(crowdUser, id) {\n\t\tconst user = {\n\t\t\tusername: crowdUser.username,\n\t\t\temails: [{\n\t\t\t\taddress : crowdUser.email,\n\t\t\t\tverified: true\n\t\t\t}],\n\t\t\tpassword: crowdUser.password,\n\t\t\tactive: crowdUser.active\n\t\t};\n\n\t\tif (crowdUser.displayname) {\n\t\t\tRocketChat._setRealName(id, crowdUser.displayname);\n\t\t}\n\n\t\tMeteor.users.update(id, {\n\t\t\t$set: user\n\t\t});\n\t}\n\n\tsync() {\n\t\tif (RocketChat.settings.get('CROWD_Enable') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst self = this;\n\t\tlogger.info('Sync started');\n\n\t\tconst users = RocketChat.models.Users.findCrowdUsers();\n\t\tif (users) {\n\t\t\tusers.forEach(function(user) {\n\t\t\t\tlogger.info('Syncing user', user.username);\n\t\t\t\tconst userResponse = self.crowdClient.user.findSync(user.username);\n\t\t\t\tif (userResponse) {\n\t\t\t\t\tconst crowdUser = {\n\t\t\t\t\t\tdisplayname: userResponse['display-name'],\n\t\t\t\t\t\tusername: userResponse.name,\n\t\t\t\t\t\temail: userResponse.email,\n\t\t\t\t\t\tpassword: userResponse.password,\n\t\t\t\t\t\tactive: userResponse.active\n\t\t\t\t\t};\n\n\t\t\t\t\tself.syncDataToUser(crowdUser, user._id);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\taddNewUser(crowdUser) {\n\t\tconst userQuery = {\n\t\t\tcrowd: true,\n\t\t\tusername: crowdUser.username\n\t\t};\n\n\t\t// find our existinmg user if they exist\n\t\tconst user = Meteor.users.findOne(userQuery);\n\n\t\tif (user) {\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\n\t\t\tMeteor.users.update(user._id, {\n\t\t\t\t$push: {\n\t\t\t\t\t'services.resume.loginTokens': Accounts._hashStampedToken(stampedToken)\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.syncDataToUser(crowdUser, user._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: user._id,\n\t\t\t\ttoken: stampedToken.token\n\t\t\t};\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tcrowdUser._id = Accounts.createUser(crowdUser);\n\t\t\t} catch (error) {\n\t\t\t\tlogger.info('Error creating new user for crowd user', error);\n\t\t\t}\n\n\t\t\tconst updateUser = {\n\t\t\t\tname: crowdUser.displayname,\n\t\t\t\tcrowd: true,\n\t\t\t\tactive: crowdUser.active\n\t\t\t};\n\n\t\t\tMeteor.users.update(crowdUser._id, {\n\t\t\t\t$set: updateUser\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tuserId: crowdUser._id\n\t\t};\n\t}\n};\n\nAccounts.registerLoginHandler('crowd', function(loginRequest) {\n\tif (!loginRequest.crowd) {\n\t\treturn undefined;\n\t}\n\n\tlogger.info('Init CROWD login', loginRequest.username);\n\n\tif (RocketChat.settings.get('CROWD_Enable') !== true) {\n\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t}\n\n\tconst crowd = new CROWD();\n\tlet user;\n\ttry {\n\t\tuser = crowd.authenticate(loginRequest.username, loginRequest.crowdPassword);\n\t} catch (error) {\n\t\tlogger.error('Crowd user not authenticated due to an error, falling back');\n\t}\n\n\tif (!user) {\n\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t}\n\n\treturn crowd.addNewUser(user);\n});\n\nlet interval;\nlet timeout;\n\nRocketChat.settings.get('CROWD_Sync_User_Data', function(key, value) {\n\tMeteor.clearInterval(interval);\n\tMeteor.clearTimeout(timeout);\n\n\tif (value === true) {\n\t\tconst crowd = new CROWD();\n\t\tlogger.info('Enabling CROWD user sync');\n\t\tMeteor.setInterval(crowd.sync, 1000 * 60 * 60);\n\t\tMeteor.setTimeout(function() {\n\t\t\tcrowd.sync();\n\t\t}, 1000 * 30);\n\t} else {\n\t\tlogger.info('Disabling CROWD user sync');\n\t}\n});\n\nMeteor.methods({\n\tcrowd_test_connection() {\n\t\tconst user = Meteor.user();\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'crowd_test_connection' });\n\t\t}\n\n\t\tif (!RocketChat.authz.hasRole(user._id, 'admin')) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', { method: 'crowd_test_connection' });\n\t\t}\n\n\t\tif (RocketChat.settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\tconst crowd = new CROWD();\n\n\t\ttry {\n\t\t\tcrowd.checkConnection();\n\t\t} catch (error) {\n\t\t\tlogger.error('Invalid crowd connection details, check the url and application username/password and make sure this server is allowed to speak to crowd');\n\t\t\tthrow new Meteor.Error('Invalid connection details', '', { method: 'crowd_test_connection' });\n\t\t}\n\n\t\treturn {\n\t\t\tmessage: 'Connection success',\n\t\t\tparams: []\n\t\t};\n\t}\n});\n","Meteor.startup(function() {\n\tRocketChat.settings.addGroup('AtlassianCrowd', function() {\n\t\tconst enableQuery = {_id: 'CROWD_Enable', value: true};\n\t\tthis.add('CROWD_Enable', false, { type: 'boolean', public: true, i18nLabel: 'Enabled' });\n\t\tthis.add('CROWD_URL', '', { type: 'string', enableQuery, i18nLabel: 'URL' });\n\t\tthis.add('CROWD_Reject_Unauthorized', true, { type: 'boolean', enableQuery });\n\t\tthis.add('CROWD_APP_USERNAME', '', { type: 'string', enableQuery, i18nLabel: 'Username' });\n\t\tthis.add('CROWD_APP_PASSWORD', '', { type: 'password', enableQuery, i18nLabel: 'Password' });\n\t\tthis.add('CROWD_Sync_User_Data', false, { type: 'boolean', enableQuery, i18nLabel: 'Sync_Users' });\n\t\tthis.add('CROWD_Test_Connection', 'crowd_test_connection', { type: 'action', actionText: 'Test_Connection', i18nLabel: 'Test_Connection' });\n\t});\n});\n"]}