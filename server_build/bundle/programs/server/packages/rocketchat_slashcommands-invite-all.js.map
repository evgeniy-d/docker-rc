{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:slashcommands-invite-all/server/server.js"],"names":["inviteAll","type","command","params","item","test","Match","String","regexp","channel","exec","trim","userId","Meteor","currentUser","users","findOne","baseChannel","RocketChat","models","Rooms","findOneById","rid","findOneByName","targetChannel","Notifications","notifyUser","_id","Random","id","ts","Date","msg","TAPi18n","__","postProcess","sprintf","language","cursor","Subscriptions","findByRoomIdWhenUsernameExists","fields","count","settings","get","Error","method","fetch","map","s","u","username","indexOf","t","call","e","error","slashCommands","add","description","module","exports"],"mappings":"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","file":"/packages/rocketchat_slashcommands-invite-all.js","sourcesContent":["/*\n * Invite is a named function that will replace /invite commands\n * @param {Object} message - The message object\n */\n\nfunction inviteAll(type) {\n\treturn function inviteAll(command, params, item) {\n\n\t\tif (!/invite\\-all-(to|from)/.test(command) || !Match.test(params, String)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst regexp = /#?([\\d-_\\w]+)/g;\n\t\tconst [, channel] = regexp.exec(params.trim());\n\n\t\tif (!channel) {\n\t\t\treturn;\n\t\t}\n\t\tconst userId = Meteor.userId();\n\t\tconst currentUser = Meteor.users.findOne(userId);\n\t\tconst baseChannel = type === 'to' ? RocketChat.models.Rooms.findOneById(item.rid) : RocketChat.models.Rooms.findOneByName(channel);\n\t\tconst targetChannel = type === 'from' ? RocketChat.models.Rooms.findOneById(item.rid) : RocketChat.models.Rooms.findOneByName(channel);\n\n\t\tif (!baseChannel) {\n\t\t\treturn RocketChat.Notifications.notifyUser(userId, 'message', {\n\t\t\t\t_id: Random.id(),\n\t\t\t\trid: item.rid,\n\t\t\t\tts: new Date(),\n\t\t\t\tmsg: TAPi18n.__('Channel_doesnt_exist', {\n\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\tsprintf: [channel]\n\t\t\t\t}, currentUser.language)\n\t\t\t});\n\t\t}\n\t\tconst cursor = RocketChat.models.Subscriptions.findByRoomIdWhenUsernameExists(baseChannel._id, { fields: { 'u.username': 1 } });\n\n\t\ttry {\n\t\t\tif (cursor.count() > RocketChat.settings.get('API_User_Limit')) {\n\t\t\t\tthrow new Meteor.Error('error-user-limit-exceeded', 'User Limit Exceeded', {\n\t\t\t\t\tmethod: 'addAllToRoom'\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst users = cursor.fetch().map(s => s.u.username);\n\n\t\t\tif (!targetChannel && ['c', 'p'].indexOf(baseChannel.t) > -1) {\n\t\t\t\tMeteor.call(baseChannel.t === 'c' ? 'createChannel' : 'createPrivateGroup', channel, users);\n\t\t\t\tRocketChat.Notifications.notifyUser(userId, 'message', {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('Channel_created', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel]\n\t\t\t\t\t}, currentUser.language)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tMeteor.call('addUsersToRoom', {\n\t\t\t\t\trid: targetChannel._id,\n\t\t\t\t\tusers\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn RocketChat.Notifications.notifyUser(userId, 'message', {\n\t\t\t\t_id: Random.id(),\n\t\t\t\trid: item.rid,\n\t\t\t\tts: new Date(),\n\t\t\t\tmsg: TAPi18n.__('Users_added', null, currentUser.language)\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconst msg = e.error === 'cant-invite-for-direct-room' ? 'Cannot_invite_users_to_direct_rooms' : e.error;\n\t\t\tRocketChat.Notifications.notifyUser(userId, 'message', {\n\t\t\t\t_id: Random.id(),\n\t\t\t\trid: item.rid,\n\t\t\t\tts: new Date(),\n\t\t\t\tmsg: TAPi18n.__(msg, null, currentUser.language)\n\t\t\t});\n\t\t}\n\t};\n}\n\nRocketChat.slashCommands.add('invite-all-to', inviteAll('to'), {\n\tdescription: 'Invite_user_to_join_channel_all_to',\n\tparams: '#room'\n});\nRocketChat.slashCommands.add('invite-all-from', inviteAll('from'), {\n\tdescription: 'Invite_user_to_join_channel_all_from',\n\tparams: '#room'\n});\nmodule.exports = inviteAll;\n"]}