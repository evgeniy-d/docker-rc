{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/logger.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/settings.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/slackbridge.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/slackbridge_import.server.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/RocketAdapter.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/SlackAdapter.js"],"names":["logger","Logger","sections","connection","events","class","slack","rocket","Meteor","startup","RocketChat","settings","addGroup","add","type","i18nLabel","public","enableQuery","_id","value","i18nDescription","SlackAdapter","module","watch","require","default","v","RocketAdapter","SlackBridge","constructor","reactionsMap","Map","connected","setSlack","setRocket","processSettings","connect","apiToken","get","info","disconnect","key","debug","aliasFormat","excludeBotnames","SlackBridgeImport","command","params","item","Match","test","String","room","models","Rooms","findOneById","rid","channel","name","user","users","findOne","userId","msgStream","emit","Random","id","u","username","ts","Date","msg","TAPi18n","__","postProcess","sprintf","language","importMessages","error","message","slashCommands","export","_","slackBridge","util","Npm","userTags","registerForEvents","unregisterForEvents","callbacks","onMessage","bind","priority","LOW","onMessageDelete","onSetReaction","onUnSetReaction","remove","rocketMessageDeleted","getSlackChannel","postDeleteMessage","err","rocketMsgID","reaction","delete","rocketMsg","Messages","slackChannel","slackTS","getTimeStamp","postReactionAdded","replace","postReactionRemove","rocketMessage","editedAt","processMessageChanged","indexOf","processSendMessage","postMessage","outSlackChannels","pluck","updatedBySlack","postMessageUpdate","getChannel","slackMessage","findChannel","addChannel","getUser","slackUser","findUser","addUser","createRocketID","slackChannelId","findOneByImportId","slackChannelID","hasRetried","slackResults","isGroup","charAt","HTTP","token","data","ok","rocketChannelData","group","existingRocketRoom","findOneByName","is_general","rocketId","addImportIds","rocketUsers","member","members","creator","rocketUser","push","rocketUserCreator","rocketChannel","createRoom","e","_sleepForMs","console","log","roomUpdate","created","lastSetTopic","isEmpty","topic","last_set","purpose","addSlackChannel","slackUserID","Users","rocketUserData","isBot","is_bot","email","profile","existingRocketUser","findOneByEmailAddress","findOneByUsername","newUser","password","joinDefaultChannels","Accounts","createUser","userUpdate","utcOffset","tz_offset","roles","real_name","deleted","update","$set","url","image_original","image_512","setUserAvatar","importIds","bot_id","addAliasToMsg","rocketUserName","rocketMsgObj","alias","format","createAndSaveMessage","rocketMsgDataDefaults","isImporting","subtype","processSubtypedMessage","convertSlackMsgTxtToRocketTxtFormat","text","extend","edited","parseInt","split","fields","pinned_to","pinned","pinnedAt","now","pinnedBy","pick","setTimeout","findOneBySlackBotIdAndSlackTs","sendMessage","slackMsgTxt","match","http","https","slackClient","rtm","slackChannelRocketBotMembershipMap","RTMClient","start","populateMembershipChannelMap","on","bindEnvironment","reactionMsg","onReactionAdded","onReactionRemoved","channelLeftMsg","onChannelLeft","slackReactionMsg","findOneBySlackTs","rocketID","rocketReaction","reactions","theReaction","usernames","set","runAsUser","call","includes","removeSlackChannel","processMessageDeleted","processChannelJoin","processNewMessage","postGetChannelInfo","slackChID","response","postFindChannel","rocketChannelName","isArray","channels","length","is_member","groups","index","substr","slackTs","rocketChID","ch","family","keys","next","populateMembershipChannelMapByChannels","rocketchat_room","populateMembershipChannelMapByGroups","slackGroup","timestamp","postResult","post","statusCode","as_user","iconUrl","getAvatarUrlFromUsername","absoluteUrl","icon_url","link_names","setSlackBotIdAndSlackTs","rocketCh","previous_message","deleteMessage","currentMsg","updateMessage","msgDataDefaults","code","processBotMessage","excludeBotNames","undefined","bot","attachments","icons","emoji","processMeMessage","processChannelJoinMessage","createUserJoinWithRoomIdAndUser","imported","addUserToRoom","processGroupJoinMessage","inviter","createUserAddedWithRoomIdAndUser","processLeaveMessage","createUserLeaveWithRoomIdAndUser","removeUserFromRoom","processTopicMessage","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","saveRoomTopic","processPurposeMessage","processNameMessage","createRoomRenamedWithRoomIdRoomNameAndUser","saveRoomName","processShareMessage","file","url_private_download","details","message_id","size","mimetype","uploadFileFromSlack","processPinnedItemMessage","t","author_subname","setPinnedByIdAndUserId","channel_id","archiveRoom","unarchiveRoom","slackFileURL","timeStamp","requestModule","parsedUrl","parse","headers","stream","fileStore","FileUpload","getStore","insert","Error","attachment","title","title_link","image_url","image_type","image_size","image_dimensions","identify","audio_url","audio_type","audio_size","video_url","video_type","video_size","groupable","importFromHistory","options","messages","latest","reverse","has_more","copyChannelInfo","channelMap","topic_last_set","topic_creator","copyPins","items","pin","msgObj","callback","results","oldest","slack_room"],"mappings":"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","file":"/packages/rocketchat_slackbridge.js","sourcesContent":["/* globals logger:true */\n/* exported logger */\n\nlogger = new Logger('SlackBridge', {\n\tsections: {\n\t\tconnection: 'Connection',\n\t\tevents: 'Events',\n\t\tclass: 'Class',\n\t\tslack: 'Slack',\n\t\trocket: 'Rocket'\n\t}\n});\n","Meteor.startup(function() {\n\tRocketChat.settings.addGroup('SlackBridge', function() {\n\t\tthis.add('SlackBridge_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nLabel: 'Enabled',\n\t\t\tpublic: true\n\t\t});\n\n\t\tthis.add('SlackBridge_APIToken', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'API_Token'\n\t\t});\n\n\t\tthis.add('SlackBridge_AliasFormat', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'Alias_Format',\n\t\t\ti18nDescription: 'Alias_Format_Description'\n\t\t});\n\n\t\tthis.add('SlackBridge_ExcludeBotnames', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'Exclude_Botnames',\n\t\t\ti18nDescription: 'Exclude_Botnames_Description'\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_All', false, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: [{\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}]\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_Channels', '', {\n\t\t\ttype: 'roomPick',\n\t\t\tenableQuery: [{\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_All',\n\t\t\t\tvalue: false\n\t\t\t}]\n\t\t});\n\t});\n});\n","/* globals logger */\n\nimport SlackAdapter from './SlackAdapter.js';\nimport RocketAdapter from './RocketAdapter.js';\n\n/**\n * SlackBridge interfaces between this Rocket installation and a remote Slack installation.\n */\nclass SlackBridge {\n\n\tconstructor() {\n\t\tthis.slack = new SlackAdapter(this);\n\t\tthis.rocket = new RocketAdapter(this);\n\t\tthis.reactionsMap = new Map();\t//Sync object between rocket and slack\n\n\t\tthis.connected = false;\n\t\tthis.rocket.setSlack(this.slack);\n\t\tthis.slack.setRocket(this.rocket);\n\n\t\tthis.processSettings();\n\t}\n\n\tconnect() {\n\t\tif (this.connected === false) {\n\n\t\t\tthis.slack.connect(this.apiToken);\n\t\t\tif (RocketChat.settings.get('SlackBridge_Out_Enabled')) {\n\t\t\t\tthis.rocket.connect();\n\t\t\t}\n\n\t\t\tthis.connected = true;\n\t\t\tlogger.connection.info('Enabled');\n\t\t}\n\t}\n\n\tdisconnect() {\n\t\tif (this.connected === true) {\n\t\t\tthis.rocket.disconnect();\n\t\t\tthis.slack.disconnect();\n\t\t\tthis.connected = false;\n\t\t\tlogger.connection.info('Disabled');\n\t\t}\n\t}\n\n\tprocessSettings() {\n\t\t//Slack installation API token\n\t\tRocketChat.settings.get('SlackBridge_APIToken', (key, value) => {\n\t\t\tif (value !== this.apiToken) {\n\t\t\t\tthis.apiToken = value;\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.disconnect();\n\t\t\t\t\tthis.connect();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlogger.class.debug(`Setting: ${ key }`, value);\n\t\t});\n\n\t\t//Import messages from Slack with an alias; %s is replaced by the username of the user. If empty, no alias will be used.\n\t\tRocketChat.settings.get('SlackBridge_AliasFormat', (key, value) => {\n\t\t\tthis.aliasFormat = value;\n\t\t\tlogger.class.debug(`Setting: ${ key }`, value);\n\t\t});\n\n\t\t//Do not propagate messages from bots whose name matches the regular expression above. If left empty, all messages from bots will be propagated.\n\t\tRocketChat.settings.get('SlackBridge_ExcludeBotnames', (key, value) => {\n\t\t\tthis.excludeBotnames = value;\n\t\t\tlogger.class.debug(`Setting: ${ key }`, value);\n\t\t});\n\n\t\t//Is this entire SlackBridge enabled\n\t\tRocketChat.settings.get('SlackBridge_Enabled', (key, value) => {\n\t\t\tif (value && this.apiToken) {\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.disconnect();\n\t\t\t}\n\t\t\tlogger.class.debug(`Setting: ${ key }`, value);\n\t\t});\n\t}\n}\n\nRocketChat.SlackBridge = new SlackBridge;\n","/* globals msgStream */\nfunction SlackBridgeImport(command, params, item) {\n\tif (command !== 'slackbridge-import' || !Match.test(params, String)) {\n\t\treturn;\n\t}\n\n\tconst room = RocketChat.models.Rooms.findOneById(item.rid);\n\tconst channel = room.name;\n\tconst user = Meteor.users.findOne(Meteor.userId());\n\n\tmsgStream.emit(item.rid, {\n\t\t_id: Random.id(),\n\t\trid: item.rid,\n\t\tu: { username: 'rocket.cat' },\n\t\tts: new Date(),\n\t\tmsg: TAPi18n.__('SlackBridge_start', {\n\t\t\tpostProcess: 'sprintf',\n\t\t\tsprintf: [user.username, channel]\n\t\t}, user.language)\n\t});\n\n\ttry {\n\t\tRocketChat.SlackBridge.importMessages(item.rid, error => {\n\t\t\tif (error) {\n\t\t\t\tmsgStream.emit(item.rid, {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tu: { username: 'rocket.cat' },\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('SlackBridge_error', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel, error.message]\n\t\t\t\t\t}, user.language)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmsgStream.emit(item.rid, {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tu: { username: 'rocket.cat' },\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('SlackBridge_finish', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel]\n\t\t\t\t\t}, user.language)\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t\tmsgStream.emit(item.rid, {\n\t\t\t_id: Random.id(),\n\t\t\trid: item.rid,\n\t\t\tu: { username: 'rocket.cat' },\n\t\t\tts: new Date(),\n\t\t\tmsg: TAPi18n.__('SlackBridge_error', {\n\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\tsprintf: [channel, error.message]\n\t\t\t}, user.language)\n\t\t});\n\t\tthrow error;\n\t}\n\treturn SlackBridgeImport;\n}\n\nRocketChat.slashCommands.add('slackbridge-import', SlackBridgeImport);\n","/* globals logger*/\n\nimport _ from 'underscore';\n\nexport default class RocketAdapter {\n\tconstructor(slackBridge) {\n\t\tlogger.rocket.debug('constructor');\n\t\tthis.slackBridge = slackBridge;\n\t\tthis.util = Npm.require('util');\n\n\t\tthis.userTags = {};\n\t\tthis.slack = {};\n\t}\n\n\tconnect() {\n\t\tthis.registerForEvents();\n\t}\n\n\tdisconnect() {\n\t\tthis.unregisterForEvents();\n\t}\n\n\tsetSlack(slack) {\n\t\tthis.slack = slack;\n\t}\n\n\tregisterForEvents() {\n\t\tlogger.rocket.debug('Register for events');\n\t\tRocketChat.callbacks.add('afterSaveMessage', this.onMessage.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_Out');\n\t\tRocketChat.callbacks.add('afterDeleteMessage', this.onMessageDelete.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_Delete');\n\t\tRocketChat.callbacks.add('setReaction', this.onSetReaction.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_SetReaction');\n\t\tRocketChat.callbacks.add('unsetReaction', this.onUnSetReaction.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_UnSetReaction');\n\t}\n\n\tunregisterForEvents() {\n\t\tlogger.rocket.debug('Unregister for events');\n\t\tRocketChat.callbacks.remove('afterSaveMessage', 'SlackBridge_Out');\n\t\tRocketChat.callbacks.remove('afterDeleteMessage', 'SlackBridge_Delete');\n\t\tRocketChat.callbacks.remove('setReaction', 'SlackBridge_SetReaction');\n\t\tRocketChat.callbacks.remove('unsetReaction', 'SlackBridge_UnSetReaction');\n\t}\n\n\tonMessageDelete(rocketMessageDeleted) {\n\t\ttry {\n\t\t\tif (! this.slack.getSlackChannel(rocketMessageDeleted.rid)) {\n\t\t\t\t//This is on a channel that the rocket bot is not subscribed\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlogger.rocket.debug('onRocketMessageDelete', rocketMessageDeleted);\n\n\t\t\tthis.slack.postDeleteMessage(rocketMessageDeleted);\n\t\t} catch (err) {\n\t\t\tlogger.rocket.error('Unhandled error onMessageDelete', err);\n\t\t}\n\t}\n\n\tonSetReaction(rocketMsgID, reaction) {\n\t\ttry {\n\t\t\tlogger.rocket.debug('onRocketSetReaction');\n\n\t\t\tif (rocketMsgID && reaction) {\n\t\t\t\tif (this.slackBridge.reactionsMap.delete(`set${ rocketMsgID }${ reaction }`)) {\n\t\t\t\t\t//This was a Slack reaction, we don't need to tell Slack about it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst rocketMsg = RocketChat.models.Messages.findOneById(rocketMsgID);\n\t\t\t\tif (rocketMsg) {\n\t\t\t\t\tconst slackChannel = this.slack.getSlackChannel(rocketMsg.rid);\n\t\t\t\t\tif (null != slackChannel) {\n\t\t\t\t\t\tconst slackTS = this.slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\tthis.slack.postReactionAdded(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlogger.rocket.error('Unhandled error onSetReaction', err);\n\t\t}\n\t}\n\n\tonUnSetReaction(rocketMsgID, reaction) {\n\t\ttry {\n\t\t\tlogger.rocket.debug('onRocketUnSetReaction');\n\n\t\t\tif (rocketMsgID && reaction) {\n\t\t\t\tif (this.slackBridge.reactionsMap.delete(`unset${ rocketMsgID }${ reaction }`)) {\n\t\t\t\t\t//This was a Slack unset reaction, we don't need to tell Slack about it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst rocketMsg = RocketChat.models.Messages.findOneById(rocketMsgID);\n\t\t\t\tif (rocketMsg) {\n\t\t\t\t\tconst slackChannel = this.slack.getSlackChannel(rocketMsg.rid);\n\t\t\t\t\tif (null != slackChannel) {\n\t\t\t\t\t\tconst slackTS = this.slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\tthis.slack.postReactionRemove(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlogger.rocket.error('Unhandled error onUnSetReaction', err);\n\t\t}\n\t}\n\n\tonMessage(rocketMessage) {\n\t\ttry {\n\t\t\tif (! this.slack.getSlackChannel(rocketMessage.rid)) {\n\t\t\t\t//This is on a channel that the rocket bot is not subscribed\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlogger.rocket.debug('onRocketMessage', rocketMessage);\n\n\t\t\tif (rocketMessage.editedAt) {\n\t\t\t\t//This is an Edit Event\n\t\t\t\tthis.processMessageChanged(rocketMessage);\n\t\t\t\treturn rocketMessage;\n\t\t\t}\n\t\t\t// Ignore messages originating from Slack\n\t\t\tif (rocketMessage._id.indexOf('slack-') === 0) {\n\t\t\t\treturn rocketMessage;\n\t\t\t}\n\n\t\t\t//A new message from Rocket.Chat\n\t\t\tthis.processSendMessage(rocketMessage);\n\t\t} catch (err) {\n\t\t\tlogger.rocket.error('Unhandled error onMessage', err);\n\t\t}\n\n\t\treturn rocketMessage;\n\t}\n\n\tprocessSendMessage(rocketMessage) {\n\t\t//Since we got this message, SlackBridge_Out_Enabled is true\n\n\t\tif (RocketChat.settings.get('SlackBridge_Out_All') === true) {\n\t\t\tthis.slack.postMessage(this.slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t} else {\n\t\t\t//They want to limit to certain groups\n\t\t\tconst outSlackChannels = _.pluck(RocketChat.settings.get('SlackBridge_Out_Channels'), '_id') || [];\n\t\t\t//logger.rocket.debug('Out SlackChannels: ', outSlackChannels);\n\t\t\tif (outSlackChannels.indexOf(rocketMessage.rid) !== -1) {\n\t\t\t\tthis.slack.postMessage(this.slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessMessageChanged(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tif (rocketMessage.updatedBySlack) {\n\t\t\t\t//We have already processed this\n\t\t\t\tdelete rocketMessage.updatedBySlack;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//This was a change from Rocket.Chat\n\t\t\tconst slackChannel = this.slack.getSlackChannel(rocketMessage.rid);\n\t\t\tthis.slack.postMessageUpdate(slackChannel, rocketMessage);\n\t\t}\n\t}\n\n\n\tgetChannel(slackMessage) {\n\t\treturn slackMessage.channel ? this.findChannel(slackMessage.channel) || this.addChannel(slackMessage.channel) : null;\n\t}\n\n\tgetUser(slackUser) {\n\t\treturn slackUser ? this.findUser(slackUser) || this.addUser(slackUser) : null;\n\t}\n\n\tcreateRocketID(slackChannel, ts) {\n\t\treturn `slack-${ slackChannel }-${ ts.replace(/\\./g, '-') }`;\n\t}\n\n\tfindChannel(slackChannelId) {\n\t\treturn RocketChat.models.Rooms.findOneByImportId(slackChannelId);\n\t}\n\n\taddChannel(slackChannelID, hasRetried = false) {\n\t\tlogger.rocket.debug('Adding Rocket.Chat channel from Slack', slackChannelID);\n\t\tlet slackResults = null;\n\t\tlet isGroup = false;\n\t\tif (slackChannelID.charAt(0) === 'C') {\n\t\t\tslackResults = HTTP.get('https://slack.com/api/channels.info', { params: { token: this.slackBridge.apiToken, channel: slackChannelID } });\n\t\t} else if (slackChannelID.charAt(0) === 'G') {\n\t\t\tslackResults = HTTP.get('https://slack.com/api/groups.info', { params: { token: this.slackBridge.apiToken, channel: slackChannelID } });\n\t\t\tisGroup = true;\n\t\t}\n\t\tif (slackResults && slackResults.data && slackResults.data.ok === true) {\n\t\t\tconst rocketChannelData = isGroup ? slackResults.data.group : slackResults.data.channel;\n\t\t\tconst existingRocketRoom = RocketChat.models.Rooms.findOneByName(rocketChannelData.name);\n\n\t\t\t// If the room exists, make sure we have its id in importIds\n\t\t\tif (existingRocketRoom || rocketChannelData.is_general) {\n\t\t\t\trocketChannelData.rocketId = rocketChannelData.is_general ? 'GENERAL' : existingRocketRoom._id;\n\t\t\t\tRocketChat.models.Rooms.addImportIds(rocketChannelData.rocketId, rocketChannelData.id);\n\t\t\t} else {\n\t\t\t\tconst rocketUsers = [];\n\t\t\t\tfor (const member of rocketChannelData.members) {\n\t\t\t\t\tif (member !== rocketChannelData.creator) {\n\t\t\t\t\t\tconst rocketUser = this.findUser(member) || this.addUser(member);\n\t\t\t\t\t\tif (rocketUser && rocketUser.username) {\n\t\t\t\t\t\t\trocketUsers.push(rocketUser.username);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst rocketUserCreator = rocketChannelData.creator ? this.findUser(rocketChannelData.creator) || this.addUser(rocketChannelData.creator) : null;\n\t\t\t\tif (!rocketUserCreator) {\n\t\t\t\t\tlogger.rocket.error('Could not fetch room creator information', rocketChannelData.creator);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst rocketChannel = RocketChat.createRoom(isGroup ? 'p' : 'c', rocketChannelData.name, rocketUserCreator.username, rocketUsers);\n\t\t\t\t\trocketChannelData.rocketId = rocketChannel.rid;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!hasRetried) {\n\t\t\t\t\t\tlogger.rocket.debug('Error adding channel from Slack. Will retry in 1s.', e.message);\n\t\t\t\t\t\t// If first time trying to create channel fails, could be because of multiple messages received at the same time. Try again once after 1s.\n\t\t\t\t\t\tMeteor._sleepForMs(1000);\n\t\t\t\t\t\treturn this.findChannel(slackChannelID) || this.addChannel(slackChannelID, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst roomUpdate = {\n\t\t\t\t\tts: new Date(rocketChannelData.created * 1000)\n\t\t\t\t};\n\t\t\t\tlet lastSetTopic = 0;\n\t\t\t\tif (!_.isEmpty(rocketChannelData.topic && rocketChannelData.topic.value)) {\n\t\t\t\t\troomUpdate.topic = rocketChannelData.topic.value;\n\t\t\t\t\tlastSetTopic = rocketChannelData.topic.last_set;\n\t\t\t\t}\n\t\t\t\tif (!_.isEmpty(rocketChannelData.purpose && rocketChannelData.purpose.value) && rocketChannelData.purpose.last_set > lastSetTopic) {\n\t\t\t\t\troomUpdate.topic = rocketChannelData.purpose.value;\n\t\t\t\t}\n\t\t\t\tRocketChat.models.Rooms.addImportIds(rocketChannelData.rocketId, rocketChannelData.id);\n\t\t\t\tthis.slack.addSlackChannel(rocketChannelData.rocketId, slackChannelID);\n\t\t\t}\n\t\t\treturn RocketChat.models.Rooms.findOneById(rocketChannelData.rocketId);\n\t\t}\n\t\tlogger.rocket.debug('Channel not added');\n\t\treturn;\n\t}\n\n\tfindUser(slackUserID) {\n\t\tconst rocketUser = RocketChat.models.Users.findOneByImportId(slackUserID);\n\t\tif (rocketUser && !this.userTags[slackUserID]) {\n\t\t\tthis.userTags[slackUserID] = { slack: `<@${ slackUserID }>`, rocket: `@${ rocketUser.username }` };\n\t\t}\n\t\treturn rocketUser;\n\t}\n\n\taddUser(slackUserID) {\n\t\tlogger.rocket.debug('Adding Rocket.Chat user from Slack', slackUserID);\n\t\tconst slackResults = HTTP.get('https://slack.com/api/users.info', { params: { token: this.slackBridge.apiToken, user: slackUserID } });\n\t\tif (slackResults && slackResults.data && slackResults.data.ok === true && slackResults.data.user) {\n\t\t\tconst rocketUserData = slackResults.data.user;\n\t\t\tconst isBot = rocketUserData.is_bot === true;\n\t\t\tconst email = rocketUserData.profile && rocketUserData.profile.email || '';\n\t\t\tlet existingRocketUser;\n\t\t\tif (!isBot) {\n\t\t\t\texistingRocketUser = RocketChat.models.Users.findOneByEmailAddress(email) || RocketChat.models.Users.findOneByUsername(rocketUserData.name);\n\t\t\t} else {\n\t\t\t\texistingRocketUser = RocketChat.models.Users.findOneByUsername(rocketUserData.name);\n\t\t\t}\n\n\t\t\tif (existingRocketUser) {\n\t\t\t\trocketUserData.rocketId = existingRocketUser._id;\n\t\t\t\trocketUserData.name = existingRocketUser.username;\n\t\t\t} else {\n\t\t\t\tconst newUser = {\n\t\t\t\t\tpassword: Random.id(),\n\t\t\t\t\tusername: rocketUserData.name\n\t\t\t\t};\n\n\t\t\t\tif (!isBot && email) {\n\t\t\t\t\tnewUser.email = email;\n\t\t\t\t}\n\n\t\t\t\tif (isBot) {\n\t\t\t\t\tnewUser.joinDefaultChannels = false;\n\t\t\t\t}\n\n\t\t\t\trocketUserData.rocketId = Accounts.createUser(newUser);\n\t\t\t\tconst userUpdate = {\n\t\t\t\t\tutcOffset: rocketUserData.tz_offset / 3600, // Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600,\n\t\t\t\t\troles: isBot ? [ 'bot' ] : [ 'user' ]\n\t\t\t\t};\n\n\t\t\t\tif (rocketUserData.profile && rocketUserData.profile.real_name) {\n\t\t\t\t\tuserUpdate['name'] = rocketUserData.profile.real_name;\n\t\t\t\t}\n\n\t\t\t\tif (rocketUserData.deleted) {\n\t\t\t\t\tuserUpdate['active'] = false;\n\t\t\t\t\tuserUpdate['services.resume.loginTokens'] = [];\n\t\t\t\t}\n\n\t\t\t\tRocketChat.models.Users.update({ _id: rocketUserData.rocketId }, { $set: userUpdate });\n\n\t\t\t\tconst user = RocketChat.models.Users.findOneById(rocketUserData.rocketId);\n\n\t\t\t\tlet url = null;\n\t\t\t\tif (rocketUserData.profile) {\n\t\t\t\t\tif (rocketUserData.profile.image_original) {\n\t\t\t\t\t\turl = rocketUserData.profile.image_original;\n\t\t\t\t\t} else if (rocketUserData.profile.image_512) {\n\t\t\t\t\t\turl = rocketUserData.profile.image_512;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (url) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tRocketChat.setUserAvatar(user, url, null, 'url');\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlogger.rocket.debug('Error setting user avatar', error.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst importIds = [ rocketUserData.id ];\n\t\t\tif (isBot && rocketUserData.profile && rocketUserData.profile.bot_id) {\n\t\t\t\timportIds.push(rocketUserData.profile.bot_id);\n\t\t\t}\n\t\t\tRocketChat.models.Users.addImportIds(rocketUserData.rocketId, importIds);\n\t\t\tif (!this.userTags[slackUserID]) {\n\t\t\t\tthis.userTags[slackUserID] = { slack: `<@${ slackUserID }>`, rocket: `@${ rocketUserData.name }` };\n\t\t\t}\n\t\t\treturn RocketChat.models.Users.findOneById(rocketUserData.rocketId);\n\t\t}\n\t\tlogger.rocket.debug('User not added');\n\t\treturn;\n\t}\n\n\taddAliasToMsg(rocketUserName, rocketMsgObj) {\n\t\tconst aliasFormat = RocketChat.settings.get('SlackBridge_AliasFormat');\n\t\tif (aliasFormat) {\n\t\t\tconst alias = this.util.format(aliasFormat, rocketUserName);\n\n\t\t\tif (alias !== rocketUserName) {\n\t\t\t\trocketMsgObj.alias = alias;\n\t\t\t}\n\t\t}\n\n\t\treturn rocketMsgObj;\n\t}\n\n\tcreateAndSaveMessage(rocketChannel, rocketUser, slackMessage, rocketMsgDataDefaults, isImporting) {\n\t\tif (slackMessage.type === 'message') {\n\t\t\tlet rocketMsgObj = {};\n\t\t\tif (!_.isEmpty(slackMessage.subtype)) {\n\t\t\t\trocketMsgObj = this.slack.processSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trocketMsgObj = {\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\t\tusername: rocketUser.username\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.addAliasToMsg(rocketUser.username, rocketMsgObj);\n\t\t\t}\n\t\t\t_.extend(rocketMsgObj, rocketMsgDataDefaults);\n\t\t\tif (slackMessage.edited) {\n\t\t\t\trocketMsgObj.editedAt = new Date(parseInt(slackMessage.edited.ts.split('.')[0]) * 1000);\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\trocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t\t}\n\n\t\t\tif (slackMessage.pinned_to && slackMessage.pinned_to.indexOf(slackMessage.channel) !== -1) {\n\t\t\t\trocketMsgObj.pinned = true;\n\t\t\t\trocketMsgObj.pinnedAt = Date.now;\n\t\t\t\trocketMsgObj.pinnedBy = _.pick(rocketUser, '_id', 'username');\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\tMeteor.setTimeout(() => {\n\t\t\t\t\tif (slackMessage.bot_id && slackMessage.ts && !RocketChat.models.Messages.findOneBySlackBotIdAndSlackTs(slackMessage.bot_id, slackMessage.ts)) {\n\t\t\t\t\t\tRocketChat.sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t\t\t}\n\t\t\t\t}, 500);\n\t\t\t} else {\n\t\t\t\tlogger.rocket.debug('Send message to Rocket.Chat');\n\t\t\t\tRocketChat.sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tconvertSlackMsgTxtToRocketTxtFormat(slackMsgTxt) {\n\t\tif (!_.isEmpty(slackMsgTxt)) {\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!everyone>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!channel>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!here>/g, '@here');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&gt;/g, '>');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&lt;/g, '<');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&amp;/g, '&');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:simple_smile:/g, ':smile:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:memo:/g, ':pencil:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:piggy:/g, ':pig:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:uk:/g, ':gb:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<(http[s]?:[^>]*)>/g, '$1');\n\n\t\t\tslackMsgTxt.replace(/(?:<@)([a-zA-Z0-9]+)(?:\\|.+)?(?:>)/g, (match, userId) => {\n\t\t\t\tif (!this.userTags[userId]) {\n\t\t\t\t\tthis.findUser(userId) || this.addUser(userId); // This adds userTags for the userId\n\t\t\t\t}\n\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tif (userTags) {\n\t\t\t\t\tslackMsgTxt = slackMsgTxt.replace(userTags.slack, userTags.rocket);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tslackMsgTxt = '';\n\t\t}\n\t\treturn slackMsgTxt;\n\t}\n\n}\n","/* globals logger*/\nimport _ from 'underscore';\nimport url from 'url';\nimport http from 'http';\nimport https from 'https';\n\n\nexport default class SlackAdapter {\n\n\tconstructor(slackBridge) {\n\t\tlogger.slack.debug('constructor');\n\t\tthis.slackBridge = slackBridge;\n\t\tthis.slackClient = require('@slack/client');\n\t\tthis.rtm = {};\t//slack-client Real Time Messaging API\n\t\tthis.apiToken = {};\t//Slack API Token passed in via Connect\n\t\t//On Slack, a rocket integration bot will be added to slack channels, this is the list of those channels, key is Rocket Ch ID\n\t\tthis.slackChannelRocketBotMembershipMap = new Map(); //Key=RocketChannelID, Value=SlackChannel\n\t\tthis.rocket = {};\n\t}\n\n\t/**\n\t * Connect to the remote Slack server using the passed in token API and register for Slack events\n\t * @param apiToken\n\t */\n\tconnect(apiToken) {\n\t\tthis.apiToken = apiToken;\n\n\t\tconst RTMClient = this.slackClient.RTMClient;\n\t\tif (RTMClient != null) {\n\t\t\tRTMClient.disconnect;\n\t\t}\n\t\tthis.rtm = new RTMClient(this.apiToken);\n\t\tthis.rtm.start();\n\t\tthis.registerForEvents();\n\n\t\tMeteor.startup(() => {\n\t\t\ttry {\n\t\t\t\tthis.populateMembershipChannelMap(); // If run outside of Meteor.startup, HTTP is not defined\n\t\t\t} catch (err) {\n\t\t\t\tlogger.slack.error('Error attempting to connect to Slack', err);\n\t\t\t\tthis.slackBridge.disconnect();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Unregister for slack events and disconnect from Slack\n\t */\n\tdisconnect() {\n\t\tthis.rtm.disconnect && this.rtm.disconnect;\n\t}\n\n\tsetRocket(rocket) {\n\t\tthis.rocket = rocket;\n\t}\n\n\tregisterForEvents() {\n\t\tlogger.slack.debug('Register for events');\n\t\tthis.rtm.on('authenticated', () => {\n\t\t\tlogger.slack.info('Connected to Slack');\n\t\t});\n\n\t\tthis.rtm.on('unable_to_rtm_start', () => {\n\t\t\tthis.slackBridge.disconnect();\n\t\t});\n\n\t\tthis.rtm.on('disconnected', () => {\n\t\t\tlogger.slack.info('Disconnected from Slack');\n\t\t\tthis.slackBridge.disconnect();\n\t\t});\n\n\t\t/**\n\t\t* Event fired when someone messages a channel the bot is in\n\t\t* {\n\t\t*\ttype: 'message',\n\t\t* \tchannel: [channel_id],\n\t\t* \tuser: [user_id],\n\t\t* \ttext: [message],\n\t\t* \tts: [ts.milli],\n\t\t* \tteam: [team_id],\n\t\t* \tsubtype: [message_subtype],\n\t\t* \tinviter: [message_subtype = 'group_join|channel_join' -> user_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on('message', Meteor.bindEnvironment((slackMessage) => {\n\t\t\tlogger.slack.debug('OnSlackEvent-MESSAGE: ', slackMessage);\n\t\t\tif (slackMessage) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.onMessage(slackMessage);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.slack.error('Unhandled error onMessage', err);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.rtm.on('reaction_added', Meteor.bindEnvironment((reactionMsg) => {\n\t\t\tlogger.slack.debug('OnSlackEvent-REACTION_ADDED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.onReactionAdded(reactionMsg);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.slack.error('Unhandled error onReactionAdded', err);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.rtm.on('reaction_removed', Meteor.bindEnvironment((reactionMsg) => {\n\t\t\tlogger.slack.debug('OnSlackEvent-REACTION_REMOVED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.onReactionRemoved(reactionMsg);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.slack.error('Unhandled error onReactionRemoved', err);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t/**\n\t\t * Event fired when someone creates a public channel\n\t\t * {\n\t\t*\ttype: 'channel_created',\n\t\t*\tchannel: {\n\t\t*\t\tid: [channel_id],\n\t\t*\t\tis_channel: true,\n\t\t*\t\tname: [channel_name],\n\t\t*\t\tcreated: [ts],\n\t\t*\t\tcreator: [user_id],\n\t\t*\t\tis_shared: false,\n\t\t*\t\tis_org_shared: false\n\t\t*\t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('channel_created', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the bot joins a public channel\n\t\t * {\n\t\t* \ttype: 'channel_joined',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_channel: true,\n\t\t* \t\tcreated: [ts],\n\t\t* \t\tcreator: [user_id],\n\t\t* \t\tis_archived: false,\n\t\t* \t\tis_general: false,\n\t\t* \t\tis_member: true,\n\t\t* \t\tlast_read: [ts.milli],\n\t\t* \t\tlatest: [message_obj],\n\t\t* \t\tunread_count: 0,\n\t\t* \t\tunread_count_display: 0,\n\t\t* \t\tmembers: [ user_ids ],\n\t\t* \t\ttopic: {\n\t\t* \t\t\tvalue: [channel_topic],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t},\n\t\t* \t\tpurpose: {\n\t\t* \t\t\tvalue: [channel_purpose],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t}\n\t\t* \t}\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('channel_joined', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the bot leaves (or is removed from) a public channel\n\t\t * {\n\t\t* \ttype: 'channel_left',\n\t\t* \tchannel: [channel_id]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('channel_left', Meteor.bindEnvironment((channelLeftMsg) => {\n\t\t\tlogger.slack.debug('OnSlackEvent-CHANNEL_LEFT: ', channelLeftMsg);\n\t\t\tif (channelLeftMsg) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.onChannelLeft(channelLeftMsg);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.slack.error('Unhandled error onChannelLeft', err);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t}));\n\n\t\t/**\n\t\t * Event fired when an archived channel is deleted by an admin\n\t\t * {\n\t\t* \ttype: 'channel_deleted',\n\t\t* \tchannel: [channel_id],\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('channel_deleted', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the channel has its name changed\n\t\t * {\n\t\t* \ttype: 'channel_rename',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_channel: true,\n\t\t* \t\tcreated: [ts]\n\t\t* \t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('channel_rename', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the bot joins a private channel\n\t\t * {\n\t\t* \ttype: 'group_joined',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_group: true,\n\t\t* \t\tcreated: [ts],\n\t\t* \t\tcreator: [user_id],\n\t\t* \t\tis_archived: false,\n\t\t* \t\tis_mpim: false,\n\t\t* \t\tis_open: true,\n\t\t* \t\tlast_read: [ts.milli],\n\t\t* \t\tlatest: [message_obj],\n\t\t* \t\tunread_count: 0,\n\t\t* \t\tunread_count_display: 0,\n\t\t* \t\tmembers: [ user_ids ],\n\t\t* \t\ttopic: {\n\t\t* \t\t\tvalue: [channel_topic],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t},\n\t\t* \t\tpurpose: {\n\t\t* \t\t\tvalue: [channel_purpose],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t}\n\t\t* \t}\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('group_joined', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the bot leaves (or is removed from) a private channel\n\t\t * {\n\t\t* \ttype: 'group_left',\n\t\t* \tchannel: [channel_id]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('group_left', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the private channel has its name changed\n\t\t * {\n\t\t* \ttype: 'group_rename',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_group: true,\n\t\t* \t\tcreated: [ts]\n\t\t* \t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('group_rename', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when a new user joins the team\n\t\t * {\n\t\t* \ttype: 'team_join',\n\t\t* \tuser:\n\t\t* \t{\n\t\t* \t\tid: [user_id],\n\t\t* \t\tteam_id: [team_id],\n\t\t* \t\tname: [user_name],\n\t\t* \t\tdeleted: false,\n\t\t* \t\tstatus: null,\n\t\t* \t\tcolor: [color_code],\n\t\t* \t\treal_name: '',\n\t\t* \t\ttz: [timezone],\n\t\t* \t\ttz_label: [timezone_label],\n\t\t* \t\ttz_offset: [timezone_offset],\n\t\t* \t\tprofile:\n\t\t* \t\t{\n\t\t* \t\t\tavatar_hash: '',\n\t\t* \t\t\treal_name: '',\n\t\t* \t\t\treal_name_normalized: '',\n\t\t* \t\t\temail: '',\n\t\t* \t\t\timage_24: '',\n\t\t* \t\t\timage_32: '',\n\t\t* \t\t\timage_48: '',\n\t\t* \t\t\timage_72: '',\n\t\t* \t\t\timage_192: '',\n\t\t* \t\t\timage_512: '',\n\t\t* \t\t\tfields: null\n\t\t* \t\t},\n\t\t* \t\tis_admin: false,\n\t\t* \t\tis_owner: false,\n\t\t* \t\tis_primary_owner: false,\n\t\t* \t\tis_restricted: false,\n\t\t* \t\tis_ultra_restricted: false,\n\t\t* \t\tis_bot: false,\n\t\t* \t\tpresence: [user_presence]\n\t\t* \t},\n\t\t* \tcache_ts: [ts]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('team_join', Meteor.bindEnvironment(() => {}));\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_removed\n\t */\n\tonReactionRemoved(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tconst rocketUser = this.rocket.getUser(slackReactionMsg.user);\n\t\t\t//Lets find our Rocket originated message\n\t\t\tlet rocketMsg = RocketChat.models.Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t//Must have originated from Slack\n\t\t\t\tconst rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = RocketChat.models.Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${ slackReactionMsg.reaction }:`;\n\n\t\t\t\t//If the Rocket user has already been removed, then this is an echo back from slack\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) === -1) {\n\t\t\t\t\t\t\treturn; //Reaction already removed\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//Reaction already removed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.slackBridge.reactionsMap.set(`unset${ rocketMsg._id }${ rocketReaction }`, rocketUser);\n\t\t\t\tlogger.slack.debug('Removing reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_added\n\t */\n\tonReactionAdded(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tconst rocketUser = this.rocket.getUser(slackReactionMsg.user);\n\n\t\t\tif (rocketUser.roles.includes('bot')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//Lets find our Rocket originated message\n\t\t\tlet rocketMsg = RocketChat.models.Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t//Must have originated from Slack\n\t\t\t\tconst rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = RocketChat.models.Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${ slackReactionMsg.reaction }:`;\n\n\t\t\t\t//If the Rocket user has already reacted, then this is Slack echoing back to us\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) !== -1) {\n\t\t\t\t\t\t\treturn; //Already reacted\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.slackBridge.reactionsMap.set(`set${ rocketMsg._id }${ rocketReaction }`, rocketUser);\n\t\t\t\tlogger.slack.debug('Adding reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tonChannelLeft(channelLeftMsg) {\n\t\tthis.removeSlackChannel(channelLeftMsg.channel);\n\t}\n\t/**\n\t * We have received a message from slack and we need to save/delete/update it into rocket\n\t * https://api.slack.com/events/message\n\t */\n\tonMessage(slackMessage, isImporting) {\n\t\tif (slackMessage.subtype) {\n\t\t\tswitch (slackMessage.subtype) {\n\t\t\t\tcase 'message_deleted':\n\t\t\t\t\tthis.processMessageDeleted(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'message_changed':\n\t\t\t\t\tthis.processMessageChanged(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'channel_join':\n\t\t\t\t\tthis.processChannelJoin(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//Keeping backwards compatability for now, refactor later\n\t\t\t\t\tthis.processNewMessage(slackMessage, isImporting);\n\t\t\t}\n\t\t} else {\n\t\t\t//Simple message\n\t\t\tthis.processNewMessage(slackMessage, isImporting);\n\t\t}\n\t}\n\n\tpostGetChannelInfo(slackChID) {\n\t\tlogger.slack.debug('Getting slack channel info', slackChID);\n\t\tconst response = HTTP.get('https://slack.com/api/channels.info', { params: { token: this.apiToken, channel: slackChID } });\n\t\tif (response && response.data) {\n\t\t\treturn response.data.channel;\n\t\t}\n\t}\n\n\tpostFindChannel(rocketChannelName) {\n\t\tlogger.slack.debug('Searching for Slack channel or group', rocketChannelName);\n\t\tlet response = HTTP.get('https://slack.com/api/channels.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tfor (const channel of response.data.channels) {\n\t\t\t\tif (channel.name === rocketChannelName && channel.is_member === true) {\n\t\t\t\t\treturn channel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponse = HTTP.get('https://slack.com/api/groups.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.groups) && response.data.groups.length > 0) {\n\t\t\tfor (const group of response.data.groups) {\n\t\t\t\tif (group.name === rocketChannelName) {\n\t\t\t\t\treturn group;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the Slack TS from a Rocket msg that originated from Slack\n\t * @param rocketMsg\n\t * @returns Slack TS or undefined if not a message that originated from slack\n\t * @private\n\t */\n\tgetTimeStamp(rocketMsg) {\n\t\t//slack-G3KJGGE15-1483081061-000169\n\t\tlet slackTS;\n\t\tlet index = rocketMsg._id.indexOf('slack-');\n\t\tif (index === 0) {\n\t\t\t//This is a msg that originated from Slack\n\t\t\tslackTS = rocketMsg._id.substr(6, rocketMsg._id.length);\n\t\t\tindex = slackTS.indexOf('-');\n\t\t\tslackTS = slackTS.substr(index+1, slackTS.length);\n\t\t\tslackTS = slackTS.replace('-', '.');\n\t\t} else {\n\t\t\t//This probably originated as a Rocket msg, but has been sent to Slack\n\t\t\tslackTS = rocketMsg.slackTs;\n\t\t}\n\n\t\treturn slackTS;\n\t}\n\n\t/**\n\t * Adds a slack channel to our collection that the rocketbot is a member of on slack\n\t * @param rocketChID\n\t * @param slackChID\n\t */\n\taddSlackChannel(rocketChID, slackChID) {\n\t\tconst ch = this.getSlackChannel(rocketChID);\n\t\tif (null == ch) {\n\t\t\tthis.slackChannelRocketBotMembershipMap.set(rocketChID, { id: slackChID, family: slackChID.charAt(0) === 'C' ? 'channels' : 'groups' });\n\t\t}\n\t}\n\n\tremoveSlackChannel(slackChID) {\n\t\tconst keys = this.slackChannelRocketBotMembershipMap.keys();\n\t\tlet slackChannel;\n\t\tlet key;\n\t\twhile ((key = keys.next().value) != null) {\n\t\t\tslackChannel = this.slackChannelRocketBotMembershipMap.get(key);\n\t\t\tif (slackChannel.id === slackChID) {\n\t\t\t\t//Found it, need to delete it\n\t\t\t\tthis.slackChannelRocketBotMembershipMap.delete(key);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetSlackChannel(rocketChID) {\n\t\treturn this.slackChannelRocketBotMembershipMap.get(rocketChID);\n\t}\n\n\tpopulateMembershipChannelMapByChannels() {\n\t\tconst response = HTTP.get('https://slack.com/api/channels.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tfor (const slackChannel of response.data.channels) {\n\t\t\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneByName(slackChannel.name, { fields: { _id: 1 } });\n\t\t\t\tif (rocketchat_room) {\n\t\t\t\t\tif (slackChannel.is_member) {\n\t\t\t\t\t\tthis.addSlackChannel(rocketchat_room._id, slackChannel.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpopulateMembershipChannelMapByGroups() {\n\t\tconst response = HTTP.get('https://slack.com/api/groups.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.groups) && response.data.groups.length > 0) {\n\t\t\tfor (const slackGroup of response.data.groups) {\n\t\t\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneByName(slackGroup.name, { fields: { _id: 1 } });\n\t\t\t\tif (rocketchat_room) {\n\t\t\t\t\tif (slackGroup.is_member) {\n\t\t\t\t\t\tthis.addSlackChannel(rocketchat_room._id, slackGroup.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpopulateMembershipChannelMap() {\n\t\tlogger.slack.debug('Populating channel map');\n\t\tthis.populateMembershipChannelMapByChannels();\n\t\tthis.populateMembershipChannelMapByGroups();\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.add\n\t */\n\tpostReactionAdded(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS\n\t\t\t};\n\n\t\t\tlogger.slack.debug('Posting Add Reaction to Slack');\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/reactions.add', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.slack.debug('Reaction added to Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.remove\n\t */\n\tpostReactionRemove(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS\n\t\t\t};\n\n\t\t\tlogger.slack.debug('Posting Remove Reaction to Slack');\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/reactions.remove', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.slack.debug('Reaction removed from Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tpostDeleteMessage(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tconst slackChannel = this.getSlackChannel(rocketMessage.rid);\n\n\t\t\tif (slackChannel != null) {\n\t\t\t\tconst data = {\n\t\t\t\t\ttoken: this.apiToken,\n\t\t\t\t\tts: this.getTimeStamp(rocketMessage),\n\t\t\t\t\tchannel: this.getSlackChannel(rocketMessage.rid).id,\n\t\t\t\t\tas_user: true\n\t\t\t\t};\n\n\t\t\t\tlogger.slack.debug('Post Delete Message to Slack', data);\n\t\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.delete', {params: data});\n\t\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\t\tlogger.slack.debug('Message deleted on Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpostMessage(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tlet iconUrl = getAvatarUrlFromUsername(rocketMessage.u && rocketMessage.u.username);\n\t\t\tif (iconUrl) {\n\t\t\t\ticonUrl = Meteor.absoluteUrl().replace(/\\/$/, '') + iconUrl;\n\t\t\t}\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\tusername: rocketMessage.u && rocketMessage.u.username,\n\t\t\t\ticon_url: iconUrl,\n\t\t\t\tlink_names: 1\n\t\t\t};\n\t\t\tlogger.slack.debug('Post Message To Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.postMessage', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.message && postResult.data.message.bot_id && postResult.data.message.ts) {\n\t\t\t\tRocketChat.models.Messages.setSlackBotIdAndSlackTs(rocketMessage._id, postResult.data.message.bot_id, postResult.data.message.ts);\n\t\t\t\tlogger.slack.debug(`RocketMsgID=${ rocketMessage._id } SlackMsgID=${ postResult.data.message.ts } SlackBotID=${ postResult.data.message.bot_id }`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/chat.update\n\t */\n\tpostMessageUpdate(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tts: this.getTimeStamp(rocketMessage),\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tas_user: true\n\t\t\t};\n\t\t\tlogger.slack.debug('Post UpdateMessage To Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.update', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.slack.debug('Message updated on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessChannelJoin(slackMessage) {\n\t\tlogger.slack.debug('Channel join', slackMessage.channel.id);\n\t\tconst rocketCh = this.rocket.addChannel(slackMessage.channel);\n\t\tif (null != rocketCh) {\n\t\t\tthis.addSlackChannel(rocketCh._id, slackMessage.channel);\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_deleted\n\t */\n\tprocessMessageDeleted(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\n\t\t\tif (rocketChannel && rocketUser) {\n\t\t\t\t//Find the Rocket message to delete\n\t\t\t\tlet rocketMsgObj = RocketChat.models.Messages\n\t\t\t\t\t.findOneBySlackBotIdAndSlackTs(slackMessage.previous_message.bot_id, slackMessage.previous_message.ts);\n\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\t//Must have been a Slack originated msg\n\t\t\t\t\tconst _id = this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts);\n\t\t\t\t\trocketMsgObj = RocketChat.models.Messages.findOneById(_id);\n\t\t\t\t}\n\n\t\t\t\tif (rocketMsgObj) {\n\t\t\t\t\tRocketChat.deleteMessage(rocketMsgObj, rocketUser);\n\t\t\t\t\tlogger.slack.debug('Rocket message deleted by Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_changed\n\t */\n\tprocessMessageChanged(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst currentMsg = RocketChat.models.Messages.findOneById(this.rocket.createRocketID(slackMessage.channel, slackMessage.message.ts));\n\n\t\t\t//Only process this change, if its an actual update (not just Slack repeating back our Rocket original change)\n\t\t\tif (currentMsg && (slackMessage.message.text !== currentMsg.msg)) {\n\t\t\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\t\t\tconst rocketUser = slackMessage.previous_message.user ? this.rocket.findUser(slackMessage.previous_message.user) || this.rocket.addUser(slackMessage.previous_message.user) : null;\n\n\t\t\t\tconst rocketMsgObj = {\n\t\t\t\t\t//@TODO _id\n\t\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tmsg: this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.message.text),\n\t\t\t\t\tupdatedBySlack: true\t//We don't want to notify slack about this change since Slack initiated it\n\t\t\t\t};\n\n\t\t\t\tRocketChat.updateMessage(rocketMsgObj, rocketUser);\n\t\t\t\tlogger.slack.debug('Rocket message updated by Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t This method will get refactored and broken down into single responsibilities\n\t */\n\tprocessNewMessage(slackMessage, isImporting) {\n\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\tlet rocketUser = null;\n\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\trocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t} else {\n\t\t\trocketUser = slackMessage.user ? this.rocket.findUser(slackMessage.user) || this.rocket.addUser(slackMessage.user) : null;\n\t\t}\n\t\tif (rocketChannel && rocketUser) {\n\t\t\tconst msgDataDefaults = {\n\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000)\n\t\t\t};\n\t\t\tif (isImporting) {\n\t\t\t\tmsgDataDefaults['imported'] = 'slackbridge';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, isImporting);\n\t\t\t} catch (e) {\n\t\t\t\t// http://www.mongodb.org/about/contributors/error-codes/\n\t\t\t\t// 11000 == duplicate key error\n\t\t\t\tif (e.name === 'MongoError' && e.code === 11000) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessBotMessage(rocketChannel, slackMessage) {\n\t\tconst excludeBotNames = RocketChat.settings.get('SlackBridge_Botnames');\n\t\tif (slackMessage.username !== undefined && excludeBotNames && slackMessage.username.match(excludeBotNames)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rocketMsgObj = {\n\t\t\tmsg: this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\trid: rocketChannel._id,\n\t\t\tbot: true,\n\t\t\tattachments: slackMessage.attachments,\n\t\t\tusername: slackMessage.username || slackMessage.bot_id\n\t\t};\n\t\tthis.rocket.addAliasToMsg(slackMessage.username || slackMessage.bot_id, rocketMsgObj);\n\t\tif (slackMessage.icons) {\n\t\t\trocketMsgObj.emoji = slackMessage.icons.emoji;\n\t\t}\n\t\treturn rocketMsgObj;\n\t}\n\n\tprocessMeMessage(rocketUser, slackMessage) {\n\t\treturn this.rocket.addAliasToMsg(rocketUser.username, {\n\t\t\tmsg: `_${ this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text) }_`\n\t\t});\n\t}\n\n\tprocessChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tRocketChat.models.Messages.createUserJoinWithRoomIdAndUser(rocketChannel._id, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t} else {\n\t\t\tRocketChat.addUserToRoom(rocketChannel._id, rocketUser);\n\t\t}\n\t}\n\n\tprocessGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.inviter) {\n\t\t\tconst inviter = slackMessage.inviter ? this.rocket.findUser(slackMessage.inviter) || this.rocket.addUser(slackMessage.inviter) : null;\n\t\t\tif (isImporting) {\n\t\t\t\tRocketChat.models.Messages.createUserAddedWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: inviter._id,\n\t\t\t\t\t\tusername: inviter.username\n\t\t\t\t\t},\n\t\t\t\t\timported: 'slackbridge'\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tRocketChat.addUserToRoom(rocketChannel._id, rocketUser, inviter);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tRocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\timported: 'slackbridge'\n\t\t\t});\n\t\t} else {\n\t\t\tRocketChat.removeUserFromRoom(rocketChannel._id, rocketUser);\n\t\t}\n\t}\n\n\tprocessTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.topic, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t} else {\n\t\t\tRocketChat.saveRoomTopic(rocketChannel._id, slackMessage.topic, rocketUser, false);\n\t\t}\n\t}\n\n\tprocessPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.purpose, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t} else {\n\t\t\tRocketChat.saveRoomTopic(rocketChannel._id, slackMessage.purpose, rocketUser, false);\n\t\t}\n\t}\n\n\tprocessNameMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tRocketChat.models.Messages.createRoomRenamedWithRoomIdRoomNameAndUser(rocketChannel._id, slackMessage.name, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t} else {\n\t\t\tRocketChat.saveRoomName(rocketChannel._id, slackMessage.name, rocketUser, false);\n\t\t}\n\t}\n\n\tprocessShareMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.file && slackMessage.file.url_private_download !== undefined) {\n\t\t\tconst details = {\n\t\t\t\tmessage_id: `slack-${ slackMessage.ts.replace(/\\./g, '-') }`,\n\t\t\t\tname: slackMessage.file.name,\n\t\t\t\tsize: slackMessage.file.size,\n\t\t\t\ttype: slackMessage.file.mimetype,\n\t\t\t\trid: rocketChannel._id\n\t\t\t};\n\t\t\treturn this.uploadFileFromSlack(details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\t\t}\n\t}\n\n\tprocessPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.attachments && slackMessage.attachments[0] && slackMessage.attachments[0].text) {\n\t\t\tconst rocketMsgObj = {\n\t\t\t\trid: rocketChannel._id,\n\t\t\t\tt: 'message_pinned',\n\t\t\t\tmsg: '',\n\t\t\t\tu: {\n\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\tusername: rocketUser.username\n\t\t\t\t},\n\t\t\t\tattachments: [{\n\t\t\t\t\t'text' : this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.attachments[0].text),\n\t\t\t\t\t'author_name' : slackMessage.attachments[0].author_subname,\n\t\t\t\t\t'author_icon' : getAvatarUrlFromUsername(slackMessage.attachments[0].author_subname),\n\t\t\t\t\t'ts' : new Date(parseInt(slackMessage.attachments[0].ts.split('.')[0]) * 1000)\n\t\t\t\t}]\n\t\t\t};\n\n\t\t\tif (!isImporting) {\n\t\t\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(`slack-${ slackMessage.attachments[0].channel_id }-${ slackMessage.attachments[0].ts.replace(/\\./g, '-') }`, rocketMsgObj.u, true, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000));\n\t\t\t}\n\n\t\t\treturn rocketMsgObj;\n\t\t} else {\n\t\t\tlogger.slack.error('Pinned item with no attachment');\n\t\t}\n\t}\n\n\tprocessSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tswitch (slackMessage.subtype) {\n\t\t\tcase 'bot_message':\n\t\t\t\treturn this.processBotMessage(rocketChannel, slackMessage);\n\t\t\tcase 'me_message':\n\t\t\t\treturn this.processMeMessage(rocketUser, slackMessage);\n\t\t\tcase 'channel_join':\n\t\t\t\treturn this.processChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'group_join':\n\t\t\t\treturn this.processGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\treturn this.processLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\treturn this.processTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\treturn this.processPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\treturn this.processNameMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_archive':\n\t\t\tcase 'group_archive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tRocketChat.archiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_unarchive':\n\t\t\tcase 'group_unarchive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tRocketChat.unarchiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'file_share':\n\t\t\t\treturn this.processShareMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'file_comment':\n\t\t\t\tlogger.slack.error('File comment not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'file_mention':\n\t\t\t\tlogger.slack.error('File mentioned not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'pinned_item':\n\t\t\t\treturn this.processPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'unpinned_item':\n\t\t\t\tlogger.slack.error('Unpinned item not implemented');\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\tUploads the file to the storage.\n\t@param [Object] details an object with details about the upload. name, size, type, and rid\n\t@param [String] fileUrl url of the file to download/import\n\t@param [Object] user the Rocket.Chat user\n\t@param [Object] room the Rocket.Chat room\n\t@param [Date] timeStamp the timestamp the file was uploaded\n\t**/\n\t//details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\tuploadFileFromSlack(details, slackFileURL, rocketUser, rocketChannel, timeStamp, isImporting) {\n\t\tconst requestModule = /https/i.test(slackFileURL) ? https : http;\n\t\tconst parsedUrl = url.parse(slackFileURL, true);\n\t\tparsedUrl.headers = { 'Authorization': `Bearer ${ this.apiToken }` };\n\t\trequestModule.get(parsedUrl, Meteor.bindEnvironment((stream) => {\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\t\tfileStore.insert(details, stream, (err, file) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthrow new Error(err);\n\t\t\t\t} else {\n\t\t\t\t\tconst url = file.url.replace(Meteor.absoluteUrl(), '/');\n\t\t\t\t\tconst attachment = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttitle_link: url\n\t\t\t\t\t};\n\n\t\t\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.image_url = url;\n\t\t\t\t\t\tattachment.image_type = file.type;\n\t\t\t\t\t\tattachment.image_size = file.size;\n\t\t\t\t\t\tattachment.image_dimensions = file.identify && file.identify.size;\n\t\t\t\t\t}\n\t\t\t\t\tif (/^audio\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.audio_url = url;\n\t\t\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\t\t\tattachment.audio_size = file.size;\n\t\t\t\t\t}\n\t\t\t\t\tif (/^video\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.video_url = url;\n\t\t\t\t\t\tattachment.video_type = file.type;\n\t\t\t\t\t\tattachment.video_size = file.size;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst msg = {\n\t\t\t\t\t\trid: details.rid,\n\t\t\t\t\t\tts: timeStamp,\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t_id: file._id\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgroupable: false,\n\t\t\t\t\t\tattachments: [attachment]\n\t\t\t\t\t};\n\n\t\t\t\t\tif (isImporting) {\n\t\t\t\t\t\tmsg.imported = 'slackbridge';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (details.message_id && (typeof details.message_id === 'string')) {\n\t\t\t\t\t\tmsg['_id'] = details.message_id;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn RocketChat.sendMessage(rocketUser, msg, rocketChannel, true);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\timportFromHistory(family, options) {\n\t\tlogger.slack.debug('Importing messages history');\n\t\tconst response = HTTP.get(`https://slack.com/api/${ family }.history`, { params: _.extend({ token: this.apiToken }, options) });\n\t\tif (response && response.data && _.isArray(response.data.messages) && response.data.messages.length > 0) {\n\t\t\tlet latest = 0;\n\t\t\tfor (const message of response.data.messages.reverse()) {\n\t\t\t\tlogger.slack.debug('MESSAGE: ', message);\n\t\t\t\tif (!latest || message.ts > latest) {\n\t\t\t\t\tlatest = message.ts;\n\t\t\t\t}\n\t\t\t\tmessage.channel = options.channel;\n\t\t\t\tthis.onMessage(message, true);\n\t\t\t}\n\t\t\treturn { has_more: response.data.has_more, ts: latest };\n\t\t}\n\t}\n\n\tcopyChannelInfo(rid, channelMap) {\n\t\tlogger.slack.debug('Copying users from Slack channel to Rocket.Chat', channelMap.id, rid);\n\t\tconst response = HTTP.get(`https://slack.com/api/${ channelMap.family }.info`, { params: { token: this.apiToken, channel: channelMap.id } });\n\t\tif (response && response.data) {\n\t\t\tconst data = channelMap.family === 'channels' ? response.data.channel : response.data.group;\n\t\t\tif (data && _.isArray(data.members) && data.members.length > 0) {\n\t\t\t\tfor (const member of data.members) {\n\t\t\t\t\tconst user = this.rocket.findUser(member) || this.rocket.addUser(member);\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tlogger.slack.debug('Adding user to room', user.username, rid);\n\t\t\t\t\t\tRocketChat.addUserToRoom(rid, user, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet topic = '';\n\t\t\tlet topic_last_set = 0;\n\t\t\tlet topic_creator = null;\n\t\t\tif (data && data.topic && data.topic.value) {\n\t\t\t\ttopic = data.topic.value;\n\t\t\t\ttopic_last_set = data.topic.last_set;\n\t\t\t\ttopic_creator = data.topic.creator;\n\t\t\t}\n\n\t\t\tif (data && data.purpose && data.purpose.value) {\n\t\t\t\tif (topic_last_set) {\n\t\t\t\t\tif (topic_last_set < data.purpose.last_set) {\n\t\t\t\t\t\ttopic = data.purpose.topic;\n\t\t\t\t\t\ttopic_creator = data.purpose.creator;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttopic = data.purpose.topic;\n\t\t\t\t\ttopic_creator = data.purpose.creator;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (topic) {\n\t\t\t\tconst creator = this.rocket.findUser(topic_creator) || this.rocket.addUser(topic_creator);\n\t\t\t\tlogger.slack.debug('Setting room topic', rid, topic, creator.username);\n\t\t\t\tRocketChat.saveRoomTopic(rid, topic, creator, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tcopyPins(rid, channelMap) {\n\t\tconst response = HTTP.get('https://slack.com/api/pins.list', { params: { token: this.apiToken, channel: channelMap.id } });\n\t\tif (response && response.data && _.isArray(response.data.items) && response.data.items.length > 0) {\n\t\t\tfor (const pin of response.data.items) {\n\t\t\t\tif (pin.message) {\n\t\t\t\t\tconst user = this.rocket.findUser(pin.message.user);\n\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tt: 'message_pinned',\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\t'text' : this.rocket.convertSlackMsgTxtToRocketTxtFormat(pin.message.text),\n\t\t\t\t\t\t\t'author_name' : user.username,\n\t\t\t\t\t\t\t'author_icon' : getAvatarUrlFromUsername(user.username),\n\t\t\t\t\t\t\t'ts' : new Date(parseInt(pin.message.ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t}]\n\t\t\t\t\t};\n\n\t\t\t\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(`slack-${ pin.channel }-${ pin.message.ts.replace(/\\./g, '-') }`, msgObj.u, true, new Date(parseInt(pin.message.ts.split('.')[0]) * 1000));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\timportMessages(rid, callback) {\n\t\tlogger.slack.info('importMessages: ', rid);\n\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneById(rid);\n\t\tif (rocketchat_room) {\n\t\t\tif (this.getSlackChannel(rid)) {\n\t\t\t\tthis.copyChannelInfo(rid, this.getSlackChannel(rid));\n\n\t\t\t\tlogger.slack.debug('Importing messages from Slack to Rocket.Chat', this.getSlackChannel(rid), rid);\n\t\t\t\tlet results = this.importFromHistory(this.getSlackChannel(rid).family, { channel: this.getSlackChannel(rid).id, oldest: 1 });\n\t\t\t\twhile (results && results.has_more) {\n\t\t\t\t\tresults = this.importFromHistory(this.getSlackChannel(rid).family, { channel: this.getSlackChannel(rid).id, oldest: results.ts });\n\t\t\t\t}\n\n\t\t\t\tlogger.slack.debug('Pinning Slack channel messages to Rocket.Chat', this.getSlackChannel(rid), rid);\n\t\t\t\tthis.copyPins(rid, this.getSlackChannel(rid));\n\n\t\t\t\treturn callback();\n\t\t\t} else {\n\t\t\t\tconst slack_room = this.postFindChannel(rocketchat_room.name);\n\t\t\t\tif (slack_room) {\n\t\t\t\t\tthis.addSlackChannel(rid, slack_room.id);\n\t\t\t\t\treturn this.importMessages(rid, callback);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.slack.error('Could not find Slack room with specified name', rocketchat_room.name);\n\t\t\t\t\treturn callback(new Meteor.Error('error-slack-room-not-found', 'Could not find Slack room with specified name'));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.slack.error('Could not find Rocket.Chat room with specified id', rid);\n\t\t\treturn callback(new Meteor.Error('error-invalid-room', 'Invalid room'));\n\t\t}\n\t}\n\n}\n\n"]}