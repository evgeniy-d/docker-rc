{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:message-mark-as-unread/server/logger.js","meteor://ðŸ’»app/packages/rocketchat:message-mark-as-unread/server/unreadMessages.js"],"names":["logger","Logger","sections","connection","events","module","exportDefault","watch","require","default","v","Meteor","methods","unreadMessages","firstUnreadMessage","room","userId","Error","method","lastMessage","RocketChat","models","Messages","findVisibleByRoomId","limit","sort","ts","fetch","action","Subscriptions","setAsUnreadByRoomIdAndUserId","rid","originalMessage","findOneById","_id","fields","u","file","lastSeen","findOneByRoomIdAndUserId","ls","debug"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,SAAS,IAAIC,MAAJ,CAAW,qBAAX,EAAkC;AAChDC,YAAU;AACTC,gBAAY,YADH;AAETC,YAAQ;AAFC;AADsC,CAAlC,CAAf;AAAAC,OAAOC,aAAP,CAMeN,MANf,E;;;;;;;;;;;ACAA,IAAIA,MAAJ;AAAWK,OAAOE,KAAP,CAAaC,QAAQ,UAAR,CAAb,EAAiC;AAACC,UAAQC,CAAR,EAAU;AAACV,aAAOU,CAAP;AAAS;;AAArB,CAAjC,EAAwD,CAAxD;AACXC,OAAOC,OAAP,CAAe;AACdC,iBAAeC,kBAAf,EAAmCC,IAAnC,EAAyC;AACxC,UAAMC,SAASL,OAAOK,MAAP,EAAf;;AACA,QAAI,CAACA,MAAL,EAAa;AACZ,YAAM,IAAIL,OAAOM,KAAX,CAAiB,oBAAjB,EAAuC,cAAvC,EAAuD;AAC5DC,gBAAQ;AADoD,OAAvD,CAAN;AAGA;;AAED,QAAIH,IAAJ,EAAU;AACT,YAAMI,cAAcC,WAAWC,MAAX,CAAkBC,QAAlB,CAA2BC,mBAA3B,CAA+CR,IAA/C,EAAqD;AAACS,eAAO,CAAR;AAAWC,cAAM;AAACC,cAAI,CAAC;AAAN;AAAjB,OAArD,EAAiFC,KAAjF,GAAyF,CAAzF,CAApB;;AAEA,UAAIR,eAAe,IAAnB,EAAyB;AACxB,cAAM,IAAIR,OAAOM,KAAX,CAAiB,0BAAjB,EAA6C,aAA7C,EAA4D;AACjEC,kBAAQ,gBADyD;AAEjEU,kBAAQ;AAFyD,SAA5D,CAAN;AAIA;;AAED,aAAOR,WAAWC,MAAX,CAAkBQ,aAAlB,CAAgCC,4BAAhC,CAA6DX,YAAYY,GAAzE,EAA8Ef,MAA9E,EAAsFG,YAAYO,EAAlG,CAAP;AACA;;AAED,UAAMM,kBAAkBZ,WAAWC,MAAX,CAAkBC,QAAlB,CAA2BW,WAA3B,CAAuCnB,mBAAmBoB,GAA1D,EAA+D;AACtFC,cAAQ;AACPC,WAAG,CADI;AAEPL,aAAK,CAFE;AAGPM,cAAM,CAHC;AAIPX,YAAI;AAJG;AAD8E,KAA/D,CAAxB;;AAQA,QAAIM,mBAAmB,IAAnB,IAA2BhB,WAAWgB,gBAAgBI,CAAhB,CAAkBF,GAA5D,EAAiE;AAChE,YAAM,IAAIvB,OAAOM,KAAX,CAAiB,0BAAjB,EAA6C,aAA7C,EAA4D;AACjEC,gBAAQ,gBADyD;AAEjEU,gBAAQ;AAFyD,OAA5D,CAAN;AAIA;;AACD,UAAMU,WAAWlB,WAAWC,MAAX,CAAkBQ,aAAlB,CAAgCU,wBAAhC,CAAyDP,gBAAgBD,GAAzE,EAA8Ef,MAA9E,EAAsFwB,EAAvG;;AACA,QAAI1B,mBAAmBY,EAAnB,IAAyBY,QAA7B,EAAuC;AACtC,aAAOtC,OAAOG,UAAP,CAAkBsC,KAAlB,CAAwB,8CAAxB,CAAP;AACA;;AACDzC,WAAOG,UAAP,CAAkBsC,KAAlB,CAAyB,+BAA+BT,gBAAgBN,EAAI,sBAA5E;AACA,WAAON,WAAWC,MAAX,CAAkBQ,aAAlB,CAAgCC,4BAAhC,CAA6DE,gBAAgBD,GAA7E,EAAkFf,MAAlF,EAA0FgB,gBAAgBN,EAA1G,CAAP;AACA;;AA1Ca,CAAf,E","file":"/packages/rocketchat_message-mark-as-unread.js","sourcesContent":["const logger = new Logger('MessageMarkAsUnread', {\n\tsections: {\n\t\tconnection: 'Connection',\n\t\tevents: 'Events'\n\t}\n});\nexport default logger;\n","import logger from './logger';\nMeteor.methods({\n\tunreadMessages(firstUnreadMessage, room) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'unreadMessages'\n\t\t\t});\n\t\t}\n\n\t\tif (room) {\n\t\t\tconst lastMessage = RocketChat.models.Messages.findVisibleByRoomId(room, {limit: 1, sort: {ts: -1}}).fetch()[0];\n\n\t\t\tif (lastMessage == null) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Not allowed', {\n\t\t\t\t\tmethod: 'unreadMessages',\n\t\t\t\t\taction: 'Unread_messages'\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn RocketChat.models.Subscriptions.setAsUnreadByRoomIdAndUserId(lastMessage.rid, userId, lastMessage.ts);\n\t\t}\n\n\t\tconst originalMessage = RocketChat.models.Messages.findOneById(firstUnreadMessage._id, {\n\t\t\tfields: {\n\t\t\t\tu: 1,\n\t\t\t\trid: 1,\n\t\t\t\tfile: 1,\n\t\t\t\tts: 1\n\t\t\t}\n\t\t});\n\t\tif (originalMessage == null || userId === originalMessage.u._id) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Not allowed', {\n\t\t\t\tmethod: 'unreadMessages',\n\t\t\t\taction: 'Unread_messages'\n\t\t\t});\n\t\t}\n\t\tconst lastSeen = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId).ls;\n\t\tif (firstUnreadMessage.ts >= lastSeen) {\n\t\t\treturn logger.connection.debug('Provided message is already marked as unread');\n\t\t}\n\t\tlogger.connection.debug(`Updating unread  message of ${ originalMessage.ts } as the first unread`);\n\t\treturn RocketChat.models.Subscriptions.setAsUnreadByRoomIdAndUserId(originalMessage.rid, userId, originalMessage.ts);\n\t}\n});\n"]}