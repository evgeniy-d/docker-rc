{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik:ufs/ufs.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-config.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-filter.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-methods.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-mime.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-server.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-store-permissions.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-store.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-template-helpers.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-tokens.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-uploader.js"],"names":["module1","module","export","UploadFS","_","watch","require","v","Meteor","Mongo","MIME","Random","Tokens","Config","Filter","Store","StorePermissions","Uploader","stores","store","tokens","addETagAttributeToFiles","where","each","getStores","files","getCollection","find","etag","fields","_id","forEach","file","direct","update","$set","generateEtag","addMimeType","extension","mime","toLowerCase","addPathAttributeToFiles","path","getFileRelativeURL","addStore","TypeError","getName","id","getMimeType","getMimeTypes","getStore","name","getTempFilePath","fileId","config","tmpDir","importFromURL","url","callback","call","readAsArrayBuffer","event","console","error","selectFile","input","document","createElement","type","multiple","onchange","ev","target","div","className","style","appendChild","body","click","selectFiles","i","length","isClient","isServer","global","window","constructor","options","extend","defaultStorePermissions","https","simulateReadDelay","simulateUploadSpeed","simulateWriteDelay","storesPath","tmpDirPermissions","parseInt","self","contentTypes","extensions","minSize","maxSize","onCheck","Array","method","check","Error","size","getMinSize","getMaxSize","getExtensions","contains","getContentTypes","isContentTypeInList","list","wildCardGlob","wildcards","filter","item","indexOf","replace","isValid","result","err","fs","Npm","http","Future","methods","ufsComplete","storeName","token","String","checkToken","fut","tmpFile","removeTempFile","unlink","message","findOne","validate","rs","createReadStream","flags","encoding","autoClose","on","bindEnvironment","remove","throw","write","return","wait","ufsCreate","Object","complete","uploading","substr","lastIndexOf","progress","userId","getFilter","create","createToken","uploadUrl","getURL","ufsDelete","count","ufsImportURL","split","pop","originalUrl","warn","proto","test","unblock","get","res","ufsStop","WebApp","domain","mkdirp","stream","URL","zlib","startup","mode","stat","log","chmod","d","connectHandlers","use","req","next","parsedUrl","parse","pathname","allowCORS","setHeader","regExp","RegExp","match","exec","writeHead","end","query","ws","createWriteStream","parseFloat","isNaN","Math","min","chunk","onRead","undefined","index","_sleepForMs","run","status","headers","modifiedAt","Date","toUTCString","uploadedAt","modifiedSince","range","total","unit","ranges","r","start","getReadStream","PassThrough","onReadError","emit","transformRead","accept","pipe","createGzip","createDeflate","insert","actions","action","modifiers","checkInsert","checkRemove","checkUpdate","collection","onCopyError","onFinishUpload","onValidate","onWriteError","permissions","transformWrite","Collection","value","copy","omit","originalStore","originalId","copyId","generateToken","createdAt","getWriteStream","errorHandler","readStream","data","getFileURL","copyTo","after","before","delete","pattern","c","random","s","toString","round","toUpperCase","getRelativeURL","rootUrl","absoluteUrl","rootPath","trim","encodeURI","secure","request","response","setPermissions","writeStream","Template","isMIME","registerHelper","adaptive","capacity","chunkSize","maxChunkSize","maxTries","onAbort","onComplete","onCreate","onError","onProgress","onStart","onStop","retryDelay","transferDelay","RangeError","Blob","File","capacityMargin","offset","loaded","tries","postUrl","timeA","timeB","elapsedTime","startTime","finish","uploadedFile","abort","getAverageSpeed","seconds","getElapsedTime","getLoaded","isUploading","now","getFile","getProgress","getRemainingTime","averageSpeed","remainingBytes","max","getSpeed","getTotal","isComplete","readChunk","slice","setTimeout","sendChunk","duration","abs","xhr","XMLHttpRequest","onreadystatechange","readyState","open","send","stop"],"mappings":"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","file":"/packages/jalik_ufs.js","sourcesContent":["/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\nimport {_} from \"meteor/underscore\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport {Mongo} from \"meteor/mongo\";\r\nimport {MIME} from \"./ufs-mime\";\r\nimport {Random} from \"meteor/random\";\r\nimport {Tokens} from \"./ufs-tokens\";\r\nimport {Config} from \"./ufs-config\";\r\nimport {Filter} from \"./ufs-filter\";\r\nimport {Store} from \"./ufs-store\";\r\nimport {StorePermissions} from \"./ufs-store-permissions\";\r\nimport {Uploader} from \"./ufs-uploader\";\r\n\r\n\r\nlet stores = {};\r\n\r\nexport const UploadFS = {\r\n\r\n    /**\r\n     * Contains all stores\r\n     */\r\n    store: {},\r\n\r\n    /**\r\n     * Collection of tokens\r\n     */\r\n    tokens: Tokens,\r\n\r\n    /**\r\n     * Adds the \"etag\" attribute to files\r\n     * @param where\r\n     */\r\n    addETagAttributeToFiles(where) {\r\n        _.each(this.getStores(), (store) => {\r\n            const files = store.getCollection();\r\n\r\n            // By default update only files with no path set\r\n            files.find(where || {etag: null}, {fields: {_id: 1}}).forEach((file) => {\r\n                files.direct.update(file._id, {$set: {etag: this.generateEtag()}});\r\n            });\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Adds the MIME type for an extension\r\n     * @param extension\r\n     * @param mime\r\n     */\r\n    addMimeType(extension, mime) {\r\n        MIME[extension.toLowerCase()] = mime;\r\n    },\r\n\r\n    /**\r\n     * Adds the \"path\" attribute to files\r\n     * @param where\r\n     */\r\n    addPathAttributeToFiles(where) {\r\n        _.each(this.getStores(), (store) => {\r\n            const files = store.getCollection();\r\n\r\n            // By default update only files with no path set\r\n            files.find(where || {path: null}, {fields: {_id: 1}}).forEach((file) => {\r\n                files.direct.update(file._id, {$set: {path: store.getFileRelativeURL(file._id)}});\r\n            });\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Registers the store\r\n     * @param store\r\n     */\r\n    addStore(store) {\r\n        if (!(store instanceof Store)) {\r\n            throw new TypeError(`ufs: store is not an instance of UploadFS.Store.`);\r\n        }\r\n        stores[store.getName()] = store;\r\n    },\r\n\r\n    /**\r\n     * Generates a unique ETag\r\n     * @return {string}\r\n     */\r\n    generateEtag() {\r\n        return Random.id();\r\n    },\r\n\r\n    /**\r\n     * Returns the MIME type of the extension\r\n     * @param extension\r\n     * @returns {*}\r\n     */\r\n    getMimeType(extension) {\r\n        extension = extension.toLowerCase();\r\n        return MIME[extension];\r\n    },\r\n\r\n    /**\r\n     * Returns all MIME types\r\n     */\r\n    getMimeTypes() {\r\n        return MIME;\r\n    },\r\n\r\n    /**\r\n     * Returns the store by its name\r\n     * @param name\r\n     * @return {UploadFS.Store}\r\n     */\r\n    getStore(name) {\r\n        return stores[name];\r\n    },\r\n\r\n    /**\r\n     * Returns all stores\r\n     * @return {object}\r\n     */\r\n    getStores() {\r\n        return stores;\r\n    },\r\n\r\n    /**\r\n     * Returns the temporary file path\r\n     * @param fileId\r\n     * @return {string}\r\n     */\r\n    getTempFilePath(fileId) {\r\n        return `${this.config.tmpDir}/${fileId}`;\r\n    },\r\n\r\n    /**\r\n     * Imports a file from a URL\r\n     * @param url\r\n     * @param file\r\n     * @param store\r\n     * @param callback\r\n     */\r\n    importFromURL(url, file, store, callback) {\r\n        if (typeof store === 'string') {\r\n            Meteor.call('ufsImportURL', url, file, store, callback);\r\n        }\r\n        else if (typeof store === 'object') {\r\n            store.importFromURL(url, file, callback);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns file and data as ArrayBuffer for each files in the event\r\n     * @deprecated\r\n     * @param event\r\n     * @param callback\r\n     */\r\n    readAsArrayBuffer (event, callback) {\r\n        console.error('UploadFS.readAsArrayBuffer is deprecated, see https://github.com/jalik/jalik-ufs#uploading-from-a-file');\r\n    },\r\n\r\n    /**\r\n     * Opens a dialog to select a single file\r\n     * @param callback\r\n     */\r\n    selectFile(callback) {\r\n        const input = document.createElement('input');\r\n        input.type = 'file';\r\n        input.multiple = false;\r\n        input.onchange = (ev) => {\r\n            let files = ev.target.files;\r\n            callback.call(UploadFS, files[0]);\r\n        };\r\n        // Fix for iOS/Safari\r\n        const div = document.createElement('div');\r\n        div.className = 'ufs-file-selector';\r\n        div.style = 'display:none; height:0; width:0; overflow: hidden;';\r\n        div.appendChild(input);\r\n        document.body.appendChild(div);\r\n        // Trigger file selection\r\n        input.click();\r\n    },\r\n\r\n    /**\r\n     * Opens a dialog to select multiple files\r\n     * @param callback\r\n     */\r\n    selectFiles(callback) {\r\n        const input = document.createElement('input');\r\n        input.type = 'file';\r\n        input.multiple = true;\r\n        input.onchange = (ev) => {\r\n            const files = ev.target.files;\r\n\r\n            for (let i = 0; i < files.length; i += 1) {\r\n                callback.call(UploadFS, files[i]);\r\n            }\r\n        };\r\n        // Fix for iOS/Safari\r\n        const div = document.createElement('div');\r\n        div.className = 'ufs-file-selector';\r\n        div.style = 'display:none; height:0; width:0; overflow: hidden;';\r\n        div.appendChild(input);\r\n        document.body.appendChild(div);\r\n        // Trigger file selection\r\n        input.click();\r\n    }\r\n};\r\n\r\n\r\nif (Meteor.isClient) {\r\n    require('./ufs-template-helpers');\r\n}\r\nif (Meteor.isServer) {\r\n    require('./ufs-methods');\r\n    require('./ufs-server');\r\n}\r\n\r\n/**\r\n * UploadFS Configuration\r\n * @type {Config}\r\n */\r\nUploadFS.config = new Config();\r\n\r\n// Add classes to global namespace\r\nUploadFS.Config = Config;\r\nUploadFS.Filter = Filter;\r\nUploadFS.Store = Store;\r\nUploadFS.StorePermissions = StorePermissions;\r\nUploadFS.Uploader = Uploader;\r\n\r\nif (Meteor.isServer) {\r\n    // Expose the module globally\r\n    if (typeof global !== 'undefined') {\r\n        global['UploadFS'] = UploadFS;\r\n    }\r\n}\r\nelse if (Meteor.isClient) {\r\n    // Expose the module globally\r\n    if (typeof window !== 'undefined') {\r\n        window.UploadFS = UploadFS;\r\n    }\r\n}\r\n","/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\n\r\nimport {_} from 'meteor/underscore';\r\nimport {Meteor} from 'meteor/meteor';\r\nimport {StorePermissions} from './ufs-store-permissions';\r\n\r\n\r\n/**\r\n * UploadFS configuration\r\n */\r\nexport class Config {\r\n\r\n    constructor(options) {\r\n        // Default options\r\n        options = _.extend({\r\n            defaultStorePermissions: null,\r\n            https: false,\r\n            simulateReadDelay: 0,\r\n            simulateUploadSpeed: 0,\r\n            simulateWriteDelay: 0,\r\n            storesPath: 'ufs',\r\n            tmpDir: '/tmp/ufs',\r\n            tmpDirPermissions: '0700'\r\n        }, options);\r\n\r\n        // Check options\r\n        if (options.defaultStorePermissions && !(options.defaultStorePermissions instanceof StorePermissions)) {\r\n            throw new TypeError('Config: defaultStorePermissions is not an instance of StorePermissions');\r\n        }\r\n        if (typeof options.https !== 'boolean') {\r\n            throw new TypeError('Config: https is not a function');\r\n        }\r\n        if (typeof options.simulateReadDelay !== 'number') {\r\n            throw new TypeError('Config: simulateReadDelay is not a number');\r\n        }\r\n        if (typeof options.simulateUploadSpeed !== 'number') {\r\n            throw new TypeError('Config: simulateUploadSpeed is not a number');\r\n        }\r\n        if (typeof options.simulateWriteDelay !== 'number') {\r\n            throw new TypeError('Config: simulateWriteDelay is not a number');\r\n        }\r\n        if (typeof options.storesPath !== 'string') {\r\n            throw new TypeError('Config: storesPath is not a string');\r\n        }\r\n        if (typeof options.tmpDir !== 'string') {\r\n            throw new TypeError('Config: tmpDir is not a string');\r\n        }\r\n        if (typeof options.tmpDirPermissions !== 'string') {\r\n            throw new TypeError('Config: tmpDirPermissions is not a string');\r\n        }\r\n\r\n        /**\r\n         * Default store permissions\r\n         * @type {UploadFS.StorePermissions}\r\n         */\r\n        this.defaultStorePermissions = options.defaultStorePermissions;\r\n        /**\r\n         * Use or not secured protocol in URLS\r\n         * @type {boolean}\r\n         */\r\n        this.https = options.https;\r\n        /**\r\n         * The simulation read delay\r\n         * @type {Number}\r\n         */\r\n        this.simulateReadDelay = parseInt(options.simulateReadDelay);\r\n        /**\r\n         * The simulation upload speed\r\n         * @type {Number}\r\n         */\r\n        this.simulateUploadSpeed = parseInt(options.simulateUploadSpeed);\r\n        /**\r\n         * The simulation write delay\r\n         * @type {Number}\r\n         */\r\n        this.simulateWriteDelay = parseInt(options.simulateWriteDelay);\r\n        /**\r\n         * The URL root path of stores\r\n         * @type {string}\r\n         */\r\n        this.storesPath = options.storesPath;\r\n        /**\r\n         * The temporary directory of uploading files\r\n         * @type {string}\r\n         */\r\n        this.tmpDir = options.tmpDir;\r\n        /**\r\n         * The permissions of the temporary directory\r\n         * @type {string}\r\n         */\r\n        this.tmpDirPermissions = options.tmpDirPermissions;\r\n    }\r\n}\r\n","/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\nimport {_} from \"meteor/underscore\";\r\nimport {Meteor} from \"meteor/meteor\";\r\n\r\n\r\n/**\r\n * File filter\r\n */\r\nexport class Filter {\r\n\r\n    constructor(options) {\r\n        const self = this;\r\n\r\n        // Default options\r\n        options = _.extend({\r\n            contentTypes: null,\r\n            extensions: null,\r\n            minSize: 1,\r\n            maxSize: 0,\r\n            onCheck: this.onCheck\r\n        }, options);\r\n\r\n        // Check options\r\n        if (options.contentTypes && !(options.contentTypes instanceof Array)) {\r\n            throw new TypeError(\"Filter: contentTypes is not an Array\");\r\n        }\r\n        if (options.extensions && !(options.extensions instanceof Array)) {\r\n            throw new TypeError(\"Filter: extensions is not an Array\");\r\n        }\r\n        if (typeof options.minSize !== \"number\") {\r\n            throw new TypeError(\"Filter: minSize is not a number\");\r\n        }\r\n        if (typeof options.maxSize !== \"number\") {\r\n            throw new TypeError(\"Filter: maxSize is not a number\");\r\n        }\r\n        if (options.onCheck && typeof options.onCheck !== \"function\") {\r\n            throw new TypeError(\"Filter: onCheck is not a function\");\r\n        }\r\n\r\n        // Public attributes\r\n        self.options = options;\r\n        _.each([\r\n            'onCheck'\r\n        ], (method) => {\r\n            if (typeof options[method] === 'function') {\r\n                self[method] = options[method];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks the file\r\n     * @param file\r\n     */\r\n    check(file) {\r\n        if (typeof file !== \"object\" || !file) {\r\n            throw new Meteor.Error('invalid-file', \"File is not valid\");\r\n        }\r\n        // Check size\r\n        if (file.size <= 0 || file.size < this.getMinSize()) {\r\n            throw new Meteor.Error('file-too-small', `File size is too small (min = ${this.getMinSize()})`);\r\n        }\r\n        if (this.getMaxSize() > 0 && file.size > this.getMaxSize()) {\r\n            throw new Meteor.Error('file-too-large', `File size is too large (max = ${this.getMaxSize()})`);\r\n        }\r\n        // Check extension\r\n        if (this.getExtensions() && !_.contains(this.getExtensions(), file.extension)) {\r\n            throw new Meteor.Error('invalid-file-extension', `File extension \"${file.extension}\" is not accepted`);\r\n        }\r\n        // Check content type\r\n        if (this.getContentTypes() && !this.isContentTypeInList(file.type, this.getContentTypes())) {\r\n            throw new Meteor.Error('invalid-file-type', `File type \"${file.type}\" is not accepted`);\r\n        }\r\n        // Apply custom check\r\n        if (typeof this.onCheck === 'function' && !this.onCheck(file)) {\r\n            throw new Meteor.Error('invalid-file', \"File does not match filter\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the allowed content types\r\n     * @return {Array}\r\n     */\r\n    getContentTypes() {\r\n        return this.options.contentTypes;\r\n    }\r\n\r\n    /**\r\n     * Returns the allowed extensions\r\n     * @return {Array}\r\n     */\r\n    getExtensions() {\r\n        return this.options.extensions;\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum file size\r\n     * @return {Number}\r\n     */\r\n    getMaxSize() {\r\n        return this.options.maxSize;\r\n    }\r\n\r\n    /**\r\n     * Returns the minimum file size\r\n     * @return {Number}\r\n     */\r\n    getMinSize() {\r\n        return this.options.minSize;\r\n    }\r\n\r\n    /**\r\n     * Checks if content type is in the given list\r\n     * @param type\r\n     * @param list\r\n     * @return {boolean}\r\n     */\r\n    isContentTypeInList(type, list) {\r\n        if (typeof type === 'string' && list instanceof Array) {\r\n            if (_.contains(list, type)) {\r\n                return true;\r\n            } else {\r\n                let wildCardGlob = '/*';\r\n                let wildcards = _.filter(list, (item) => {\r\n                    return item.indexOf(wildCardGlob) > 0;\r\n                });\r\n\r\n                if (_.contains(wildcards, type.replace(/(\\/.*)$/, wildCardGlob))) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the file matches filter\r\n     * @param file\r\n     * @return {boolean}\r\n     */\r\n    isValid(file) {\r\n        let result = true;\r\n        try {\r\n            this.check(file);\r\n        } catch (err) {\r\n            result = false;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Executes custom checks\r\n     * @param file\r\n     * @return {boolean}\r\n     */\r\n    onCheck(file) {\r\n        return true;\r\n    }\r\n}\r\n","/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\n\r\nimport {_} from 'meteor/underscore';\r\nimport {check} from 'meteor/check';\r\nimport {Meteor} from 'meteor/meteor';\r\nimport {UploadFS} from './ufs';\r\nimport {Filter} from './ufs-filter';\r\nimport {Tokens} from './ufs-tokens';\r\n\r\nconst fs = Npm.require('fs');\r\nconst http = Npm.require('http');\r\nconst https = Npm.require('https');\r\nconst Future = Npm.require('fibers/future');\r\n\r\n\r\nif (Meteor.isServer) {\r\n    Meteor.methods({\r\n\r\n        /**\r\n         * Completes the file transfer\r\n         * @param fileId\r\n         * @param storeName\r\n         * @param token\r\n         */\r\n        ufsComplete(fileId, storeName, token) {\r\n            check(fileId, String);\r\n            check(storeName, String);\r\n            check(token, String);\r\n\r\n            // Get store\r\n            let store = UploadFS.getStore(storeName);\r\n            if (!store) {\r\n                throw new Meteor.Error('invalid-store', \"Store not found\");\r\n            }\r\n            // Check token\r\n            if (!store.checkToken(token, fileId)) {\r\n                throw new Meteor.Error('invalid-token', \"Token is not valid\");\r\n            }\r\n\r\n            let fut = new Future();\r\n            let tmpFile = UploadFS.getTempFilePath(fileId);\r\n\r\n            const removeTempFile = function () {\r\n                fs.unlink(tmpFile, function (err) {\r\n                    err && console.error(`ufs: cannot delete temp file \"${tmpFile}\" (${err.message})`);\r\n                });\r\n            };\r\n\r\n            try {\r\n                // todo check if temp file exists\r\n\r\n                // Get file\r\n                let file = store.getCollection().findOne({_id: fileId});\r\n\r\n                // Validate file before moving to the store\r\n                store.validate(file);\r\n\r\n                // Get the temp file\r\n                let rs = fs.createReadStream(tmpFile, {\r\n                    flags: 'r',\r\n                    encoding: null,\r\n                    autoClose: true\r\n                });\r\n\r\n                // Clean upload if error occurs\r\n                rs.on('error', Meteor.bindEnvironment(function (err) {\r\n                    console.error(err);\r\n                    store.getCollection().remove({_id: fileId});\r\n                    fut.throw(err);\r\n                }));\r\n\r\n                // Save file in the store\r\n                store.write(rs, fileId, Meteor.bindEnvironment(function (err, file) {\r\n                    removeTempFile();\r\n\r\n                    if (err) {\r\n                        fut.throw(err);\r\n                    } else {\r\n                        // File has been fully uploaded\r\n                        // so we don't need to keep the token anymore.\r\n                        // Also this ensure that the file cannot be modified with extra chunks later.\r\n                        Tokens.remove({fileId: fileId});\r\n                        fut.return(file);\r\n                    }\r\n                }));\r\n            }\r\n            catch (err) {\r\n                // If write failed, remove the file\r\n                store.getCollection().remove({_id: fileId});\r\n                // removeTempFile(); // todo remove temp file on error or try again ?\r\n                fut.throw(err);\r\n            }\r\n            return fut.wait();\r\n        },\r\n\r\n        /**\r\n         * Creates the file and returns the file upload token\r\n         * @param file\r\n         * @return {{fileId: string, token: *, url: *}}\r\n         */\r\n        ufsCreate(file) {\r\n            check(file, Object);\r\n\r\n            if (typeof file.name !== 'string' || !file.name.length) {\r\n                throw new Meteor.Error('invalid-file-name', \"file name is not valid\");\r\n            }\r\n            if (typeof file.store !== 'string' || !file.store.length) {\r\n                throw new Meteor.Error('invalid-store', \"store is not valid\");\r\n            }\r\n            // Get store\r\n            let store = UploadFS.getStore(file.store);\r\n            if (!store) {\r\n                throw new Meteor.Error('invalid-store', \"Store not found\");\r\n            }\r\n\r\n            // Set default info\r\n            file.complete = false;\r\n            file.uploading = false;\r\n            file.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase();\r\n            // Assign file MIME type based on the extension\r\n            if (file.extension && !file.type) {\r\n                file.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\r\n            }\r\n            file.progress = 0;\r\n            file.size = parseInt(file.size) || 0;\r\n            file.userId = file.userId || this.userId;\r\n\r\n            // Check if the file matches store filter\r\n            let filter = store.getFilter();\r\n            if (filter instanceof Filter) {\r\n                filter.check(file);\r\n            }\r\n\r\n            // Create the file\r\n            let fileId = store.create(file);\r\n            let token = store.createToken(fileId);\r\n            let uploadUrl = store.getURL(`${fileId}?token=${token}`);\r\n\r\n            return {\r\n                fileId: fileId,\r\n                token: token,\r\n                url: uploadUrl\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Deletes a file\r\n         * @param fileId\r\n         * @param storeName\r\n         * @param token\r\n         * @returns {*}\r\n         */\r\n        ufsDelete(fileId, storeName, token) {\r\n            check(fileId, String);\r\n            check(storeName, String);\r\n            check(token, String);\r\n\r\n            // Check store\r\n            let store = UploadFS.getStore(storeName);\r\n            if (!store) {\r\n                throw new Meteor.Error('invalid-store', \"Store not found\");\r\n            }\r\n            // Ignore files that does not exist\r\n            if (store.getCollection().find({_id: fileId}).count() === 0) {\r\n                return 1;\r\n            }\r\n            // Check token\r\n            if (!store.checkToken(token, fileId)) {\r\n                throw new Meteor.Error('invalid-token', \"Token is not valid\");\r\n            }\r\n            return store.getCollection().remove({_id: fileId});\r\n        },\r\n\r\n        /**\r\n         * Imports a file from the URL\r\n         * @param url\r\n         * @param file\r\n         * @param storeName\r\n         * @return {*}\r\n         */\r\n        ufsImportURL(url, file, storeName) {\r\n            check(url, String);\r\n            check(file, Object);\r\n            check(storeName, String);\r\n\r\n            // Check URL\r\n            if (typeof url !== 'string' || url.length <= 0) {\r\n                throw new Meteor.Error('invalid-url', \"The url is not valid\");\r\n            }\r\n            // Check file\r\n            if (typeof file !== 'object' || file === null) {\r\n                throw new Meteor.Error('invalid-file', \"The file is not valid\");\r\n            }\r\n            // Check store\r\n            const store = UploadFS.getStore(storeName);\r\n            if (!store) {\r\n                throw new Meteor.Error('invalid-store', 'The store does not exist');\r\n            }\r\n\r\n            // Extract file info\r\n            if (!file.name) {\r\n                file.name = url.replace(/\\?.*$/, '').split('/').pop();\r\n            }\r\n            if (file.name && !file.extension) {\r\n                file.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase();\r\n            }\r\n            if (file.extension && !file.type) {\r\n                // Assign file MIME type based on the extension\r\n                file.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\r\n            }\r\n            // Check if file is valid\r\n            if (store.getFilter() instanceof Filter) {\r\n                store.getFilter().check(file);\r\n            }\r\n\r\n            if (file.originalUrl) {\r\n                console.warn(`ufs: The \"originalUrl\" attribute is automatically set when importing a file from a URL`);\r\n            }\r\n\r\n            // Add original URL\r\n            file.originalUrl = url;\r\n\r\n            // Create the file\r\n            file.complete = false;\r\n            file.uploading = true;\r\n            file.progress = 0;\r\n            file._id = store.create(file);\r\n\r\n            let fut = new Future();\r\n            let proto;\r\n\r\n            // Detect protocol to use\r\n            if (/http:\\/\\//i.test(url)) {\r\n                proto = http;\r\n            } else if (/https:\\/\\//i.test(url)) {\r\n                proto = https;\r\n            }\r\n\r\n            this.unblock();\r\n\r\n            // Download file\r\n            proto.get(url, Meteor.bindEnvironment(function (res) {\r\n                // Save the file in the store\r\n                store.write(res, file._id, function (err, file) {\r\n                    if (err) {\r\n                        fut.throw(err);\r\n                    } else {\r\n                        fut.return(file);\r\n                    }\r\n                });\r\n            })).on('error', function (err) {\r\n                fut.throw(err);\r\n            });\r\n            return fut.wait();\r\n        },\r\n\r\n        /**\r\n         * Marks the file uploading as stopped\r\n         * @param fileId\r\n         * @param storeName\r\n         * @param token\r\n         * @returns {*}\r\n         */\r\n        ufsStop(fileId, storeName, token) {\r\n            check(fileId, String);\r\n            check(storeName, String);\r\n            check(token, String);\r\n\r\n            // Check store\r\n            const store = UploadFS.getStore(storeName);\r\n            if (!store) {\r\n                throw new Meteor.Error('invalid-store', \"Store not found\");\r\n            }\r\n            // Check file\r\n            const file = store.getCollection().find({_id: fileId}, {fields: {userId: 1}});\r\n            if (!file) {\r\n                throw new Meteor.Error('invalid-file', \"File not found\");\r\n            }\r\n            // Check token\r\n            if (!store.checkToken(token, fileId)) {\r\n                throw new Meteor.Error('invalid-token', \"Token is not valid\");\r\n            }\r\n\r\n            return store.getCollection().update({_id: fileId}, {\r\n                $set: {uploading: false}\r\n            });\r\n        }\r\n    });\r\n}\r\n","/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * MIME types and extensions\r\n */\r\nexport const MIME = {\r\n\r\n    // application\r\n    '7z': 'application/x-7z-compressed',\r\n    'arc': 'application/octet-stream',\r\n    'ai': 'application/postscript',\r\n    'bin': 'application/octet-stream',\r\n    'bz': 'application/x-bzip',\r\n    'bz2': 'application/x-bzip2',\r\n    'eps': 'application/postscript',\r\n    'exe': 'application/octet-stream',\r\n    'gz': 'application/x-gzip',\r\n    'gzip': 'application/x-gzip',\r\n    'js': 'application/javascript',\r\n    'json': 'application/json',\r\n    'ogx': 'application/ogg',\r\n    'pdf': 'application/pdf',\r\n    'ps': 'application/postscript',\r\n    'psd': 'application/octet-stream',\r\n    'rar': 'application/x-rar-compressed',\r\n    'rev': 'application/x-rar-compressed',\r\n    'swf': 'application/x-shockwave-flash',\r\n    'tar': 'application/x-tar',\r\n    'xhtml': 'application/xhtml+xml',\r\n    'xml': 'application/xml',\r\n    'zip': 'application/zip',\r\n\r\n    // audio\r\n    'aif': 'audio/aiff',\r\n    'aifc': 'audio/aiff',\r\n    'aiff': 'audio/aiff',\r\n    'au': 'audio/basic',\r\n    'flac': 'audio/flac',\r\n    'midi': 'audio/midi',\r\n    'mp2': 'audio/mpeg',\r\n    'mp3': 'audio/mpeg',\r\n    'mpa': 'audio/mpeg',\r\n    'oga': 'audio/ogg',\r\n    'ogg': 'audio/ogg',\r\n    'opus': 'audio/ogg',\r\n    'ra': 'audio/vnd.rn-realaudio',\r\n    'spx': 'audio/ogg',\r\n    'wav': 'audio/x-wav',\r\n    'weba': 'audio/webm',\r\n    'wma': 'audio/x-ms-wma',\r\n\r\n    // image\r\n    'avs': 'image/avs-video',\r\n    'bmp': 'image/x-windows-bmp',\r\n    'gif': 'image/gif',\r\n    'ico': 'image/vnd.microsoft.icon',\r\n    'jpeg': 'image/jpeg',\r\n    'jpg': 'image/jpg',\r\n    'mjpg': 'image/x-motion-jpeg',\r\n    'pic': 'image/pic',\r\n    'png': 'image/png',\r\n    'svg': 'image/svg+xml',\r\n    'tif': 'image/tiff',\r\n    'tiff': 'image/tiff',\r\n\r\n    // text\r\n    'css': 'text/css',\r\n    'csv': 'text/csv',\r\n    'html': 'text/html',\r\n    'txt': 'text/plain',\r\n\r\n    // video\r\n    'avi': 'video/avi',\r\n    'dv': 'video/x-dv',\r\n    'flv': 'video/x-flv',\r\n    'mov': 'video/quicktime',\r\n    'mp4': 'video/mp4',\r\n    'mpeg': 'video/mpeg',\r\n    'mpg': 'video/mpg',\r\n    'ogv': 'video/ogg',\r\n    'vdo': 'video/vdo',\r\n    'webm': 'video/webm',\r\n    'wmv': 'video/x-ms-wmv',\r\n\r\n    // specific to vendors\r\n    'doc': 'application/msword',\r\n    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n    'odb': 'application/vnd.oasis.opendocument.database',\r\n    'odc': 'application/vnd.oasis.opendocument.chart',\r\n    'odf': 'application/vnd.oasis.opendocument.formula',\r\n    'odg': 'application/vnd.oasis.opendocument.graphics',\r\n    'odi': 'application/vnd.oasis.opendocument.image',\r\n    'odm': 'application/vnd.oasis.opendocument.text-master',\r\n    'odp': 'application/vnd.oasis.opendocument.presentation',\r\n    'ods': 'application/vnd.oasis.opendocument.spreadsheet',\r\n    'odt': 'application/vnd.oasis.opendocument.text',\r\n    'otg': 'application/vnd.oasis.opendocument.graphics-template',\r\n    'otp': 'application/vnd.oasis.opendocument.presentation-template',\r\n    'ots': 'application/vnd.oasis.opendocument.spreadsheet-template',\r\n    'ott': 'application/vnd.oasis.opendocument.text-template',\r\n    'ppt': 'application/vnd.ms-powerpoint',\r\n    'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n    'xls': 'application/vnd.ms-excel',\r\n    'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n};\r\n","/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\nimport {_} from \"meteor/underscore\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport {WebApp} from \"meteor/webapp\";\r\nimport {UploadFS} from \"./ufs\";\r\n\r\n\r\nif (Meteor.isServer) {\r\n\r\n    const domain = Npm.require('domain');\r\n    const fs = Npm.require('fs');\r\n    const http = Npm.require('http');\r\n    const https = Npm.require('https');\r\n    const mkdirp = Npm.require('mkdirp');\r\n    const stream = Npm.require('stream');\r\n    const URL = Npm.require('url');\r\n    const zlib = Npm.require('zlib');\r\n\r\n\r\n    Meteor.startup(() => {\r\n        let path = UploadFS.config.tmpDir;\r\n        let mode = UploadFS.config.tmpDirPermissions;\r\n\r\n        fs.stat(path, (err) => {\r\n            if (err) {\r\n                // Create the temp directory\r\n                mkdirp(path, {mode: mode}, (err) => {\r\n                    if (err) {\r\n                        console.error(`ufs: cannot create temp directory at \"${path}\" (${err.message})`);\r\n                    } else {\r\n                        console.log(`ufs: temp directory created at \"${path}\"`);\r\n                    }\r\n                });\r\n            } else {\r\n                // Set directory permissions\r\n                fs.chmod(path, mode, (err) => {\r\n                    err && console.error(`ufs: cannot set temp directory permissions ${mode} (${err.message})`);\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    // Create domain to handle errors\r\n    // and possibly avoid server crashes.\r\n    let d = domain.create();\r\n\r\n    d.on('error', (err) => {\r\n        console.error('ufs: ' + err.message);\r\n    });\r\n\r\n    // Listen HTTP requests to serve files\r\n    WebApp.connectHandlers.use((req, res, next) => {\r\n        // Quick check to see if request should be catch\r\n        if (req.url.indexOf(UploadFS.config.storesPath) === -1) {\r\n            next();\r\n            return;\r\n        }\r\n\r\n        // Remove store path\r\n        let parsedUrl = URL.parse(req.url);\r\n        let path = parsedUrl.pathname.substr(UploadFS.config.storesPath.length + 1);\r\n\r\n        let allowCORS = () => {\r\n            // res.setHeader('Access-Control-Allow-Origin', req.headers.origin);\r\n            res.setHeader(\"Access-Control-Allow-Methods\", \"POST\");\r\n            res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n            res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\r\n        };\r\n\r\n        if (req.method === \"OPTIONS\") {\r\n            let regExp = new RegExp('^\\/([^\\/\\?]+)\\/([^\\/\\?]+)$');\r\n            let match = regExp.exec(path);\r\n\r\n            // Request is not valid\r\n            if (match === null) {\r\n                res.writeHead(400);\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            // Get store\r\n            let store = UploadFS.getStore(match[1]);\r\n            if (!store) {\r\n                res.writeHead(404);\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            // If a store is found, go ahead and allow the origin\r\n            allowCORS();\r\n\r\n            next();\r\n        }\r\n        else if (req.method === 'POST') {\r\n            // Get store\r\n            let regExp = new RegExp('^\\/([^\\/\\?]+)\\/([^\\/\\?]+)$');\r\n            let match = regExp.exec(path);\r\n\r\n            // Request is not valid\r\n            if (match === null) {\r\n                res.writeHead(400);\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            // Get store\r\n            let store = UploadFS.getStore(match[1]);\r\n            if (!store) {\r\n                res.writeHead(404);\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            // If a store is found, go ahead and allow the origin\r\n            allowCORS();\r\n\r\n            // Get file\r\n            let fileId = match[2];\r\n            if (store.getCollection().find({_id: fileId}).count() === 0) {\r\n                res.writeHead(404);\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            // Check upload token\r\n            if (!store.checkToken(req.query.token, fileId)) {\r\n                res.writeHead(403);\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            let tmpFile = UploadFS.getTempFilePath(fileId);\r\n            let ws = fs.createWriteStream(tmpFile, {flags: 'a'});\r\n            let fields = {uploading: true};\r\n            let progress = parseFloat(req.query.progress);\r\n            if (!isNaN(progress) && progress > 0) {\r\n                fields.progress = Math.min(progress, 1);\r\n            }\r\n\r\n            req.on('data', (chunk) => {\r\n                ws.write(chunk);\r\n            });\r\n            req.on('error', (err) => {\r\n                res.writeHead(500);\r\n                res.end();\r\n            });\r\n            req.on('end', Meteor.bindEnvironment(() => {\r\n                // Update completed state without triggering hooks\r\n                store.getCollection().direct.update({_id: fileId}, {$set: fields});\r\n                ws.end();\r\n            }));\r\n            ws.on('error', (err) => {\r\n                console.error(`ufs: cannot write chunk of file \"${fileId}\" (${err.message})`);\r\n                fs.unlink(tmpFile, (err) => {\r\n                    err && console.error(`ufs: cannot delete temp file \"${tmpFile}\" (${err.message})`);\r\n                });\r\n                res.writeHead(500);\r\n                res.end();\r\n            });\r\n            ws.on('finish', () => {\r\n                res.writeHead(204, {\"Content-Type\": 'text/plain'});\r\n                res.end();\r\n            });\r\n        }\r\n        else if (req.method === 'GET') {\r\n            // Get store, file Id and file name\r\n            let regExp = new RegExp('^\\/([^\\/\\?]+)\\/([^\\/\\?]+)(?:\\/([^\\/\\?]+))?$');\r\n            let match = regExp.exec(path);\r\n\r\n            // Avoid 504 Gateway timeout error\r\n            // if file is not handled by UploadFS.\r\n            if (match === null) {\r\n                next();\r\n                return;\r\n            }\r\n\r\n            // Get store\r\n            const storeName = match[1];\r\n            const store = UploadFS.getStore(storeName);\r\n\r\n            if (!store) {\r\n                res.writeHead(404);\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            if (store.onRead !== null && store.onRead !== undefined && typeof store.onRead !== 'function') {\r\n                console.error(`ufs: Store.onRead is not a function in store \"${storeName}\"`);\r\n                res.writeHead(500);\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            // Remove file extension from file Id\r\n            let index = match[2].indexOf('.');\r\n            let fileId = index !== -1 ? match[2].substr(0, index) : match[2];\r\n\r\n            // Get file from database\r\n            const file = store.getCollection().findOne({_id: fileId});\r\n            if (!file) {\r\n                res.writeHead(404);\r\n                res.end();\r\n                return;\r\n            }\r\n\r\n            // Simulate read speed\r\n            if (UploadFS.config.simulateReadDelay) {\r\n                Meteor._sleepForMs(UploadFS.config.simulateReadDelay);\r\n            }\r\n\r\n            d.run(() => {\r\n                // Check if the file can be accessed\r\n                if (store.onRead.call(store, fileId, file, req, res) !== false) {\r\n                    let options = {};\r\n                    let status = 200;\r\n\r\n                    // Prepare response headers\r\n                    let headers = {\r\n                        'Content-Type': file.type,\r\n                        'Content-Length': file.size\r\n                    };\r\n\r\n                    // Add ETag header\r\n                    if (typeof file.etag === 'string') {\r\n                        headers['ETag'] = file.etag;\r\n                    }\r\n\r\n                    // Add Last-Modified header\r\n                    if (file.modifiedAt instanceof Date) {\r\n                        headers['Last-Modified'] = file.modifiedAt.toUTCString();\r\n                    }\r\n                    else if (file.uploadedAt instanceof Date) {\r\n                        headers['Last-Modified'] = file.uploadedAt.toUTCString();\r\n                    }\r\n\r\n                    // Parse request headers\r\n                    if (typeof req.headers === 'object') {\r\n\r\n                        // Compare ETag\r\n                        if (req.headers['if-none-match']) {\r\n                            if (file.etag === req.headers['if-none-match']) {\r\n                                res.writeHead(304); // Not Modified\r\n                                res.end();\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        // Compare file modification date\r\n                        if (req.headers['if-modified-since']) {\r\n                            const modifiedSince = new Date(req.headers['if-modified-since']);\r\n\r\n                            if ((file.modifiedAt instanceof Date && file.modifiedAt > modifiedSince)\r\n                                || file.uploadedAt instanceof Date && file.uploadedAt > modifiedSince) {\r\n                                res.writeHead(304); // Not Modified\r\n                                res.end();\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        // Support range request\r\n                        if (typeof req.headers.range === 'string') {\r\n                            const range = req.headers.range;\r\n\r\n                            // Range is not valid\r\n                            if (!range) {\r\n                                res.writeHead(416);\r\n                                res.end();\r\n                                return;\r\n                            }\r\n\r\n                            const total = file.size;\r\n                            const unit = range.substr(0, range.indexOf(\"=\"));\r\n\r\n                            if (unit !== \"bytes\") {\r\n                                res.writeHead(416);\r\n                                res.end();\r\n                                return;\r\n                            }\r\n\r\n                            const ranges = range.substr(unit.length).replace(/[^0-9\\-,]/, '').split(',');\r\n\r\n                            if (ranges.length > 1) {\r\n                                //todo: support multipart ranges: https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests\r\n                            } else {\r\n                                const r = ranges[0].split(\"-\");\r\n                                const start = parseInt(r[0], 10);\r\n                                const end = r[1] ? parseInt(r[1], 10) : total - 1;\r\n\r\n                                // Range is not valid\r\n                                if (start < 0 || end >= total || start > end) {\r\n                                    res.writeHead(416);\r\n                                    res.end();\r\n                                    return;\r\n                                }\r\n\r\n                                // Update headers\r\n                                headers['Content-Range'] = `bytes ${start}-${end}/${total}`;\r\n                                headers['Content-Length'] = end - start + 1;\r\n                                options.start = start;\r\n                                options.end = end;\r\n                            }\r\n                            status = 206; // partial content\r\n                        }\r\n                    } else {\r\n                        headers['Accept-Ranges'] = \"bytes\";\r\n                    }\r\n\r\n                    // Open the file stream\r\n                    const rs = store.getReadStream(fileId, file, options);\r\n                    const ws = new stream.PassThrough();\r\n\r\n                    rs.on('error', Meteor.bindEnvironment((err) => {\r\n                        store.onReadError.call(store, err, fileId, file);\r\n                        res.end();\r\n                    }));\r\n                    ws.on('error', Meteor.bindEnvironment((err) => {\r\n                        store.onReadError.call(store, err, fileId, file);\r\n                        res.end();\r\n                    }));\r\n                    ws.on('close', () => {\r\n                        // Close output stream at the end\r\n                        ws.emit('end');\r\n                    });\r\n\r\n                    // Transform stream\r\n                    store.transformRead(rs, ws, fileId, file, req, headers);\r\n\r\n                    // Parse request headers\r\n                    if (typeof req.headers === 'object') {\r\n                        // Compress data using if needed (ignore audio/video as they are already compressed)\r\n                        if (typeof req.headers['accept-encoding'] === 'string' && !/^(audio|video)/.test(file.type)) {\r\n                            let accept = req.headers['accept-encoding'];\r\n\r\n                            // Compress with gzip\r\n                            if (accept.match(/\\bgzip\\b/)) {\r\n                                headers['Content-Encoding'] = 'gzip';\r\n                                delete headers['Content-Length'];\r\n                                res.writeHead(status, headers);\r\n                                ws.pipe(zlib.createGzip()).pipe(res);\r\n                                return;\r\n                            }\r\n                            // Compress with deflate\r\n                            else if (accept.match(/\\bdeflate\\b/)) {\r\n                                headers['Content-Encoding'] = 'deflate';\r\n                                delete headers['Content-Length'];\r\n                                res.writeHead(status, headers);\r\n                                ws.pipe(zlib.createDeflate()).pipe(res);\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Send raw data\r\n                    if (!headers['Content-Encoding']) {\r\n                        res.writeHead(status, headers);\r\n                        ws.pipe(res);\r\n                    }\r\n\r\n                } else {\r\n                    res.end();\r\n                }\r\n            });\r\n        } else {\r\n            next();\r\n        }\r\n    });\r\n}\r\n","/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\nimport {_} from \"meteor/underscore\";\r\n\r\n\r\n/**\r\n * Store permissions\r\n */\r\nexport class StorePermissions {\r\n\r\n    constructor(options) {\r\n        // Default options\r\n        options = _.extend({\r\n            insert: null,\r\n            remove: null,\r\n            update: null\r\n        }, options);\r\n\r\n        // Check options\r\n        if (options.insert && typeof options.insert !== 'function') {\r\n            throw new TypeError(\"StorePermissions: insert is not a function\");\r\n        }\r\n        if (options.remove && typeof options.remove !== 'function') {\r\n            throw new TypeError(\"StorePermissions: remove is not a function\");\r\n        }\r\n        if (options.update && typeof options.update !== 'function') {\r\n            throw new TypeError(\"StorePermissions: update is not a function\");\r\n        }\r\n\r\n        // Public attributes\r\n        this.actions = {\r\n            insert: options.insert,\r\n            remove: options.remove,\r\n            update: options.update,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks the permission for the action\r\n     * @param action\r\n     * @param userId\r\n     * @param file\r\n     * @param fields\r\n     * @param modifiers\r\n     * @return {*}\r\n     */\r\n    check(action, userId, file, fields, modifiers) {\r\n        if (typeof this.actions[action] === 'function') {\r\n            return this.actions[action](userId, file, fields, modifiers);\r\n        }\r\n        return true; // by default allow all\r\n    }\r\n\r\n    /**\r\n     * Checks the insert permission\r\n     * @param userId\r\n     * @param file\r\n     * @returns {*}\r\n     */\r\n    checkInsert(userId, file) {\r\n        return this.check('insert', userId, file);\r\n    }\r\n\r\n    /**\r\n     * Checks the remove permission\r\n     * @param userId\r\n     * @param file\r\n     * @returns {*}\r\n     */\r\n    checkRemove(userId, file) {\r\n        return this.check('remove', userId, file);\r\n    }\r\n\r\n    /**\r\n     * Checks the update permission\r\n     * @param userId\r\n     * @param file\r\n     * @param fields\r\n     * @param modifiers\r\n     * @returns {*}\r\n     */\r\n    checkUpdate(userId, file, fields, modifiers) {\r\n        return this.check('update', userId, file, fields, modifiers);\r\n    }\r\n}\r\n","/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\nimport {_} from \"meteor/underscore\";\r\nimport {check} from \"meteor/check\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport {Mongo} from \"meteor/mongo\";\r\nimport {UploadFS} from \"./ufs\";\r\nimport {Filter} from \"./ufs-filter\";\r\nimport {StorePermissions} from \"./ufs-store-permissions\";\r\nimport {Tokens} from \"./ufs-tokens\";\r\n\r\n\r\n/**\r\n * File store\r\n */\r\nexport class Store {\r\n\r\n    constructor(options) {\r\n        let self = this;\r\n\r\n        // Default options\r\n        options = _.extend({\r\n            collection: null,\r\n            filter: null,\r\n            name: null,\r\n            onCopyError: this.onCopyError,\r\n            onFinishUpload: this.onFinishUpload,\r\n            onRead: this.onRead,\r\n            onReadError: this.onReadError,\r\n            onValidate: this.onValidate,\r\n            onWriteError: this.onWriteError,\r\n            permissions: null,\r\n            transformRead: null,\r\n            transformWrite: null\r\n        }, options);\r\n\r\n        // Check options\r\n        if (!(options.collection instanceof Mongo.Collection)) {\r\n            throw new TypeError('Store: collection is not a Mongo.Collection');\r\n        }\r\n        if (options.filter && !(options.filter instanceof Filter)) {\r\n            throw new TypeError('Store: filter is not a UploadFS.Filter');\r\n        }\r\n        if (typeof options.name !== 'string') {\r\n            throw new TypeError('Store: name is not a string');\r\n        }\r\n        if (UploadFS.getStore(options.name)) {\r\n            throw new TypeError('Store: name already exists');\r\n        }\r\n        if (options.onCopyError && typeof options.onCopyError !== 'function') {\r\n            throw new TypeError('Store: onCopyError is not a function');\r\n        }\r\n        if (options.onFinishUpload && typeof options.onFinishUpload !== 'function') {\r\n            throw new TypeError('Store: onFinishUpload is not a function');\r\n        }\r\n        if (options.onRead && typeof options.onRead !== 'function') {\r\n            throw new TypeError('Store: onRead is not a function');\r\n        }\r\n        if (options.onReadError && typeof options.onReadError !== 'function') {\r\n            throw new TypeError('Store: onReadError is not a function');\r\n        }\r\n        if (options.onWriteError && typeof options.onWriteError !== 'function') {\r\n            throw new TypeError('Store: onWriteError is not a function');\r\n        }\r\n        if (options.permissions && !(options.permissions instanceof StorePermissions)) {\r\n            throw new TypeError('Store: permissions is not a UploadFS.StorePermissions');\r\n        }\r\n        if (options.transformRead && typeof options.transformRead !== 'function') {\r\n            throw new TypeError('Store: transformRead is not a function');\r\n        }\r\n        if (options.transformWrite && typeof options.transformWrite !== 'function') {\r\n            throw new TypeError('Store: transformWrite is not a function');\r\n        }\r\n        if (options.onValidate && typeof options.onValidate !== 'function') {\r\n            throw new TypeError('Store: onValidate is not a function');\r\n        }\r\n\r\n        // Public attributes\r\n        self.options = options;\r\n        self.permissions = options.permissions;\r\n        _.each([\r\n            'onCopyError',\r\n            'onFinishUpload',\r\n            'onRead',\r\n            'onReadError',\r\n            'onWriteError',\r\n            'onValidate'\r\n        ], (method) => {\r\n            if (typeof options[method] === 'function') {\r\n                self[method] = options[method];\r\n            }\r\n        });\r\n\r\n        // Add the store to the list\r\n        UploadFS.addStore(self);\r\n\r\n        // Set default permissions\r\n        if (!(self.permissions instanceof StorePermissions)) {\r\n            // Uses custom default permissions or UFS default permissions\r\n            if (UploadFS.config.defaultStorePermissions instanceof StorePermissions) {\r\n                self.permissions = UploadFS.config.defaultStorePermissions;\r\n            } else {\r\n                self.permissions = new StorePermissions();\r\n                console.warn(`ufs: permissions are not defined for store \"${options.name}\"`);\r\n            }\r\n        }\r\n\r\n        if (Meteor.isServer) {\r\n\r\n            /**\r\n             * Checks token validity\r\n             * @param token\r\n             * @param fileId\r\n             * @returns {boolean}\r\n             */\r\n            self.checkToken = function (token, fileId) {\r\n                check(token, String);\r\n                check(fileId, String);\r\n                return Tokens.find({value: token, fileId: fileId}).count() === 1;\r\n            };\r\n\r\n            /**\r\n             * Copies the file to a store\r\n             * @param fileId\r\n             * @param store\r\n             * @param callback\r\n             */\r\n            self.copy = function (fileId, store, callback) {\r\n                check(fileId, String);\r\n\r\n                if (!(store instanceof Store)) {\r\n                    throw new TypeError('store is not an instance of UploadFS.Store');\r\n                }\r\n                // Get original file\r\n                let file = self.getCollection().findOne({_id: fileId});\r\n                if (!file) {\r\n                    throw new Meteor.Error('file-not-found', 'File not found');\r\n                }\r\n                // Silently ignore the file if it does not match filter\r\n                const filter = store.getFilter();\r\n                if (filter instanceof Filter && !filter.isValid(file)) {\r\n                    return;\r\n                }\r\n\r\n                // Prepare copy\r\n                let copy = _.omit(file, '_id', 'url');\r\n                copy.originalStore = self.getName();\r\n                copy.originalId = fileId;\r\n\r\n                // Create the copy\r\n                let copyId = store.create(copy);\r\n\r\n                // Get original stream\r\n                let rs = self.getReadStream(fileId, file);\r\n\r\n                // Catch errors to avoid app crashing\r\n                rs.on('error', Meteor.bindEnvironment(function (err) {\r\n                    callback.call(self, err, null);\r\n                }));\r\n\r\n                // Copy file data\r\n                store.write(rs, copyId, Meteor.bindEnvironment(function (err) {\r\n                    if (err) {\r\n                        self.getCollection().remove({_id: copyId});\r\n                        self.onCopyError.call(self, err, fileId, file);\r\n                    }\r\n                    if (typeof callback === 'function') {\r\n                        callback.call(self, err, copyId, copy, store);\r\n                    }\r\n                }));\r\n            };\r\n\r\n            /**\r\n             * Creates the file in the collection\r\n             * @param file\r\n             * @param callback\r\n             * @return {string}\r\n             */\r\n            self.create = function (file, callback) {\r\n                check(file, Object);\r\n                file.store = self.options.name; // assign store to file\r\n                return self.getCollection().insert(file, callback);\r\n            };\r\n\r\n            /**\r\n             * Creates a token for the file (only needed for client side upload)\r\n             * @param fileId\r\n             * @returns {*}\r\n             */\r\n            self.createToken = function (fileId) {\r\n                let token = self.generateToken();\r\n\r\n                // Check if token exists\r\n                if (Tokens.find({fileId: fileId}).count()) {\r\n                    Tokens.update({fileId: fileId}, {\r\n                        $set: {\r\n                            createdAt: new Date(),\r\n                            value: token\r\n                        }\r\n                    });\r\n                } else {\r\n                    Tokens.insert({\r\n                        createdAt: new Date(),\r\n                        fileId: fileId,\r\n                        value: token\r\n                    });\r\n                }\r\n                return token;\r\n            };\r\n\r\n            /**\r\n             * Writes the file to the store\r\n             * @param rs\r\n             * @param fileId\r\n             * @param callback\r\n             */\r\n            self.write = function (rs, fileId, callback) {\r\n                let file = self.getCollection().findOne({_id: fileId});\r\n                let ws = self.getWriteStream(fileId, file);\r\n\r\n                let errorHandler = Meteor.bindEnvironment(function (err) {\r\n                    self.getCollection().remove({_id: fileId});\r\n                    self.onWriteError.call(self, err, fileId, file);\r\n                    callback.call(self, err);\r\n                });\r\n\r\n                ws.on('error', errorHandler);\r\n                ws.on('finish', Meteor.bindEnvironment(function () {\r\n                    let size = 0;\r\n                    let readStream = self.getReadStream(fileId, file);\r\n\r\n                    readStream.on('error', Meteor.bindEnvironment(function (error) {\r\n                        callback.call(self, error, null);\r\n                    }));\r\n                    readStream.on('data', Meteor.bindEnvironment(function (data) {\r\n                        size += data.length;\r\n                    }));\r\n                    readStream.on('end', Meteor.bindEnvironment(function () {\r\n                        // Set file attribute\r\n                        file.complete = true;\r\n                        file.etag = UploadFS.generateEtag();\r\n                        file.path = self.getFileRelativeURL(fileId);\r\n                        file.progress = 1;\r\n                        file.size = size;\r\n                        file.token = self.generateToken();\r\n                        file.uploading = false;\r\n                        file.uploadedAt = new Date();\r\n                        file.url = self.getFileURL(fileId);\r\n\r\n                        // Execute callback\r\n                        if (typeof self.onFinishUpload === 'function') {\r\n                            self.onFinishUpload.call(self, file);\r\n                        }\r\n\r\n                        // Sets the file URL when file transfer is complete,\r\n                        // this way, the image will loads entirely.\r\n                        self.getCollection().direct.update({_id: fileId}, {\r\n                            $set: {\r\n                                complete: file.complete,\r\n                                etag: file.etag,\r\n                                path: file.path,\r\n                                progress: file.progress,\r\n                                size: file.size,\r\n                                token: file.token,\r\n                                uploading: file.uploading,\r\n                                uploadedAt: file.uploadedAt,\r\n                                url: file.url\r\n                            }\r\n                        });\r\n\r\n                        // Return file info\r\n                        callback.call(self, null, file);\r\n\r\n                        // Simulate write speed\r\n                        if (UploadFS.config.simulateWriteDelay) {\r\n                            Meteor._sleepForMs(UploadFS.config.simulateWriteDelay);\r\n                        }\r\n\r\n                        // Copy file to other stores\r\n                        if (self.options.copyTo instanceof Array) {\r\n                            for (let i = 0; i < self.options.copyTo.length; i += 1) {\r\n                                let store = self.options.copyTo[i];\r\n\r\n                                if (!store.getFilter() || store.getFilter().isValid(file)) {\r\n                                    self.copy(fileId, store);\r\n                                }\r\n                            }\r\n                        }\r\n                    }));\r\n                }));\r\n\r\n                // Execute transformation\r\n                self.transformWrite(rs, ws, fileId, file);\r\n            };\r\n        }\r\n\r\n        if (Meteor.isServer) {\r\n            const fs = Npm.require('fs');\r\n            const collection = self.getCollection();\r\n\r\n            // Code executed after removing file\r\n            collection.after.remove(function (userId, file) {\r\n                // Remove associated tokens\r\n                Tokens.remove({fileId: file._id});\r\n\r\n                if (self.options.copyTo instanceof Array) {\r\n                    for (let i = 0; i < self.options.copyTo.length; i += 1) {\r\n                        // Remove copies in stores\r\n                        self.options.copyTo[i].getCollection().remove({originalId: file._id});\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Code executed before inserting file\r\n            collection.before.insert(function (userId, file) {\r\n                if (!self.permissions.checkInsert(userId, file)) {\r\n                    throw new Meteor.Error('forbidden', \"Forbidden\");\r\n                }\r\n            });\r\n\r\n            // Code executed before updating file\r\n            collection.before.update(function (userId, file, fields, modifiers) {\r\n                if (!self.permissions.checkUpdate(userId, file, fields, modifiers)) {\r\n                    throw new Meteor.Error('forbidden', \"Forbidden\");\r\n                }\r\n            });\r\n\r\n            // Code executed before removing file\r\n            collection.before.remove(function (userId, file) {\r\n                if (!self.permissions.checkRemove(userId, file)) {\r\n                    throw new Meteor.Error('forbidden', \"Forbidden\");\r\n                }\r\n\r\n                // Delete the physical file in the store\r\n                self.delete(file._id);\r\n\r\n                let tmpFile = UploadFS.getTempFilePath(file._id);\r\n\r\n                // Delete the temp file\r\n                fs.stat(tmpFile, function (err) {\r\n                    !err && fs.unlink(tmpFile, function (err) {\r\n                        err && console.error(`ufs: cannot delete temp file at ${tmpFile} (${err.message})`);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a file async\r\n     * @param fileId\r\n     * @param callback\r\n     */\r\n    delete(fileId, callback) {\r\n        throw new Error('delete is not implemented');\r\n    }\r\n\r\n    /**\r\n     * Generates a random token\r\n     * @param pattern\r\n     * @return {string}\r\n     */\r\n    generateToken(pattern) {\r\n        return (pattern || 'xyxyxyxyxy').replace(/[xy]/g, (c) => {\r\n            let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n            let s = v.toString(16);\r\n            return Math.round(Math.random()) ? s.toUpperCase() : s;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the collection\r\n     * @return {Mongo.Collection}\r\n     */\r\n    getCollection() {\r\n        return this.options.collection;\r\n    }\r\n\r\n    /**\r\n     * Returns the file URL\r\n     * @param fileId\r\n     * @return {string|null}\r\n     */\r\n    getFileRelativeURL(fileId) {\r\n        let file = this.getCollection().findOne(fileId, {fields: {name: 1}});\r\n        return file ? this.getRelativeURL(`${fileId}/${file.name}`) : null;\r\n    }\r\n\r\n    /**\r\n     * Returns the file URL\r\n     * @param fileId\r\n     * @return {string|null}\r\n     */\r\n    getFileURL(fileId) {\r\n        let file = this.getCollection().findOne(fileId, {fields: {name: 1}});\r\n        return file ? this.getURL(`${fileId}/${file.name}`) : null;\r\n    }\r\n\r\n    /**\r\n     * Returns the file filter\r\n     * @return {UploadFS.Filter}\r\n     */\r\n    getFilter() {\r\n        return this.options.filter;\r\n    }\r\n\r\n    /**\r\n     * Returns the store name\r\n     * @return {string}\r\n     */\r\n    getName() {\r\n        return this.options.name;\r\n    }\r\n\r\n    /**\r\n     * Returns the file read stream\r\n     * @param fileId\r\n     * @param file\r\n     */\r\n    getReadStream(fileId, file) {\r\n        throw new Error('Store.getReadStream is not implemented');\r\n    }\r\n\r\n    /**\r\n     * Returns the store relative URL\r\n     * @param path\r\n     * @return {string}\r\n     */\r\n    getRelativeURL(path) {\r\n        const rootUrl = Meteor.absoluteUrl().replace(/\\/+$/, '');\r\n        const rootPath = rootUrl.replace(/^[a-z]+:\\/\\/[^/]+\\/*/gi, '');\r\n        const storeName = this.getName();\r\n        path = String(path).replace(/\\/$/, '').trim();\r\n        return encodeURI(`${rootPath}/${UploadFS.config.storesPath}/${storeName}/${path}`);\r\n    }\r\n\r\n    /**\r\n     * Returns the store absolute URL\r\n     * @param path\r\n     * @return {string}\r\n     */\r\n    getURL(path) {\r\n        const rootUrl = Meteor.absoluteUrl({secure: UploadFS.config.https}).replace(/\\/+$/, '');\r\n        const storeName = this.getName();\r\n        path = String(path).replace(/\\/$/, '').trim();\r\n        return encodeURI(`${rootUrl}/${UploadFS.config.storesPath}/${storeName}/${path}`);\r\n    }\r\n\r\n    /**\r\n     * Returns the file write stream\r\n     * @param fileId\r\n     * @param file\r\n     */\r\n    getWriteStream(fileId, file) {\r\n        throw new Error('getWriteStream is not implemented');\r\n    }\r\n\r\n    /**\r\n     * Completes the file upload\r\n     * @param url\r\n     * @param file\r\n     * @param callback\r\n     */\r\n    importFromURL(url, file, callback) {\r\n        Meteor.call('ufsImportURL', url, file, this.getName(), callback);\r\n    }\r\n\r\n    /**\r\n     * Called when a copy error happened\r\n     * @param err\r\n     * @param fileId\r\n     * @param file\r\n     */\r\n    onCopyError(err, fileId, file) {\r\n        console.error(`ufs: cannot copy file \"${fileId}\" (${err.message})`, err);\r\n    }\r\n\r\n    /**\r\n     * Called when a file has been uploaded\r\n     * @param file\r\n     */\r\n    onFinishUpload(file) {\r\n    }\r\n\r\n    /**\r\n     * Called when a file is read from the store\r\n     * @param fileId\r\n     * @param file\r\n     * @param request\r\n     * @param response\r\n     * @return boolean\r\n     */\r\n    onRead(fileId, file, request, response) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Called when a read error happened\r\n     * @param err\r\n     * @param fileId\r\n     * @param file\r\n     * @return boolean\r\n     */\r\n    onReadError(err, fileId, file) {\r\n        console.error(`ufs: cannot read file \"${fileId}\" (${err.message})`, err);\r\n    }\r\n\r\n    /**\r\n     * Called when file is being validated\r\n     * @param file\r\n     */\r\n    onValidate(file) {\r\n    }\r\n\r\n    /**\r\n     * Called when a write error happened\r\n     * @param err\r\n     * @param fileId\r\n     * @param file\r\n     * @return boolean\r\n     */\r\n    onWriteError(err, fileId, file) {\r\n        console.error(`ufs: cannot write file \"${fileId}\" (${err.message})`, err);\r\n    }\r\n\r\n    /**\r\n     * Sets the store permissions\r\n     * @param permissions\r\n     */\r\n    setPermissions(permissions) {\r\n        if (!(permissions instanceof StorePermissions)) {\r\n            throw new TypeError(\"Permissions is not an instance of UploadFS.StorePermissions\");\r\n        }\r\n        this.permissions = permissions;\r\n    }\r\n\r\n    /**\r\n     * Transforms the file on reading\r\n     * @param readStream\r\n     * @param writeStream\r\n     * @param fileId\r\n     * @param file\r\n     * @param request\r\n     * @param headers\r\n     */\r\n    transformRead(readStream, writeStream, fileId, file, request, headers) {\r\n        if (typeof this.options.transformRead === 'function') {\r\n            this.options.transformRead.call(this, readStream, writeStream, fileId, file, request, headers);\r\n        } else {\r\n            readStream.pipe(writeStream);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transforms the file on writing\r\n     * @param readStream\r\n     * @param writeStream\r\n     * @param fileId\r\n     * @param file\r\n     */\r\n    transformWrite(readStream, writeStream, fileId, file) {\r\n        if (typeof this.options.transformWrite === 'function') {\r\n            this.options.transformWrite.call(this, readStream, writeStream, fileId, file);\r\n        } else {\r\n            readStream.pipe(writeStream);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates the file\r\n     * @param file\r\n     */\r\n    validate(file) {\r\n        if (typeof this.onValidate === 'function') {\r\n            this.onValidate(file);\r\n        }\r\n    }\r\n}\r\n","/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\n\r\nimport {Template} from 'meteor/templating';\r\n\r\n\r\nlet isMIME = function (type, mime) {\r\n    return typeof type === 'string'\r\n        && typeof mime === 'string'\r\n        && mime.indexOf(type + '/') === 0;\r\n};\r\n\r\nTemplate.registerHelper('isApplication', function (type) {\r\n    return isMIME('application', this.type || type);\r\n});\r\n\r\nTemplate.registerHelper('isAudio', function (type) {\r\n    return isMIME('audio', this.type || type);\r\n});\r\n\r\nTemplate.registerHelper('isImage', function (type) {\r\n    return isMIME('image', this.type || type);\r\n});\r\n\r\nTemplate.registerHelper('isText', function (type) {\r\n    return isMIME('text', this.type || type);\r\n});\r\n\r\nTemplate.registerHelper('isVideo', function (type) {\r\n    return isMIME('video', this.type || type);\r\n});\r\n","/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\n\r\nimport {Mongo} from 'meteor/mongo';\r\n\r\n/**\r\n * Collection of upload tokens\r\n * @type {Mongo.Collection}\r\n */\r\nexport const Tokens = new Mongo.Collection('ufsTokens');\r\n","/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\n\r\nimport {_} from 'meteor/underscore';\r\nimport {Meteor} from 'meteor/meteor';\r\nimport {Store} from './ufs-store';\r\n\r\n\r\n/**\r\n * File uploader\r\n */\r\nexport class Uploader {\r\n\r\n    constructor(options) {\r\n        let self = this;\r\n\r\n        // Set default options\r\n        options = _.extend({\r\n            adaptive: true,\r\n            capacity: 0.9,\r\n            chunkSize: 16 * 1024,\r\n            data: null,\r\n            file: null,\r\n            maxChunkSize: 4 * 1024 * 1000,\r\n            maxTries: 5,\r\n            onAbort: this.onAbort,\r\n            onComplete: this.onComplete,\r\n            onCreate: this.onCreate,\r\n            onError: this.onError,\r\n            onProgress: this.onProgress,\r\n            onStart: this.onStart,\r\n            onStop: this.onStop,\r\n            retryDelay: 2000,\r\n            store: null,\r\n            transferDelay: 100\r\n        }, options);\r\n\r\n        // Check options\r\n        if (typeof options.adaptive !== 'boolean') {\r\n            throw new TypeError('adaptive is not a number');\r\n        }\r\n        if (typeof options.capacity !== 'number') {\r\n            throw new TypeError('capacity is not a number');\r\n        }\r\n        if (options.capacity <= 0 || options.capacity > 1) {\r\n            throw new RangeError('capacity must be a float between 0.1 and 1.0');\r\n        }\r\n        if (typeof options.chunkSize !== 'number') {\r\n            throw new TypeError('chunkSize is not a number');\r\n        }\r\n        if (!(options.data instanceof Blob) && !(options.data instanceof File)) {\r\n            throw new TypeError('data is not an Blob or File');\r\n        }\r\n        if (options.file === null || typeof options.file !== 'object') {\r\n            throw new TypeError('file is not an object');\r\n        }\r\n        if (typeof options.maxChunkSize !== 'number') {\r\n            throw new TypeError('maxChunkSize is not a number');\r\n        }\r\n        if (typeof options.maxTries !== 'number') {\r\n            throw new TypeError('maxTries is not a number');\r\n        }\r\n        if (typeof options.retryDelay !== 'number') {\r\n            throw new TypeError('retryDelay is not a number');\r\n        }\r\n        if (typeof options.transferDelay !== 'number') {\r\n            throw new TypeError('transferDelay is not a number');\r\n        }\r\n        if (typeof options.onAbort !== 'function') {\r\n            throw new TypeError('onAbort is not a function');\r\n        }\r\n        if (typeof options.onComplete !== 'function') {\r\n            throw new TypeError('onComplete is not a function');\r\n        }\r\n        if (typeof options.onCreate !== 'function') {\r\n            throw new TypeError('onCreate is not a function');\r\n        }\r\n        if (typeof options.onError !== 'function') {\r\n            throw new TypeError('onError is not a function');\r\n        }\r\n        if (typeof options.onProgress !== 'function') {\r\n            throw new TypeError('onProgress is not a function');\r\n        }\r\n        if (typeof options.onStart !== 'function') {\r\n            throw new TypeError('onStart is not a function');\r\n        }\r\n        if (typeof options.onStop !== 'function') {\r\n            throw new TypeError('onStop is not a function');\r\n        }\r\n        if (typeof options.store !== 'string' && !(options.store instanceof Store)) {\r\n            throw new TypeError('store must be the name of the store or an instance of UploadFS.Store');\r\n        }\r\n\r\n        // Public attributes\r\n        self.adaptive = options.adaptive;\r\n        self.capacity = parseFloat(options.capacity);\r\n        self.chunkSize = parseInt(options.chunkSize);\r\n        self.maxChunkSize = parseInt(options.maxChunkSize);\r\n        self.maxTries = parseInt(options.maxTries);\r\n        self.retryDelay = parseInt(options.retryDelay);\r\n        self.transferDelay = parseInt(options.transferDelay);\r\n        self.onAbort = options.onAbort;\r\n        self.onComplete = options.onComplete;\r\n        self.onCreate = options.onCreate;\r\n        self.onError = options.onError;\r\n        self.onProgress = options.onProgress;\r\n        self.onStart = options.onStart;\r\n        self.onStop = options.onStop;\r\n\r\n        // Private attributes\r\n        let store = options.store;\r\n        let data = options.data;\r\n        let capacityMargin = 0.1;\r\n        let file = options.file;\r\n        let fileId = null;\r\n        let offset = 0;\r\n        let loaded = 0;\r\n        let total = data.size;\r\n        let tries = 0;\r\n        let postUrl = null;\r\n        let token = null;\r\n        let complete = false;\r\n        let uploading = false;\r\n\r\n        let timeA = null;\r\n        let timeB = null;\r\n\r\n        let elapsedTime = 0;\r\n        let startTime = 0;\r\n\r\n        // Keep only the name of the store\r\n        if (store instanceof Store) {\r\n            store = store.getName();\r\n        }\r\n\r\n        // Assign file to store\r\n        file.store = store;\r\n\r\n        function finish() {\r\n            // Finish the upload by telling the store the upload is complete\r\n            Meteor.call('ufsComplete', fileId, store, token, function (err, uploadedFile) {\r\n                if (err) {\r\n                    self.onError(err, file);\r\n                    self.abort();\r\n                }\r\n                else if (uploadedFile) {\r\n                    uploading = false;\r\n                    complete = true;\r\n                    file = uploadedFile;\r\n                    self.onComplete(uploadedFile);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Aborts the current transfer\r\n         */\r\n        self.abort = function () {\r\n            // Remove the file from database\r\n            Meteor.call('ufsDelete', fileId, store, token, function (err, result) {\r\n                if (err) {\r\n                    self.onError(err, file);\r\n                }\r\n            });\r\n\r\n            // Reset uploader status\r\n            uploading = false;\r\n            fileId = null;\r\n            offset = 0;\r\n            tries = 0;\r\n            loaded = 0;\r\n            complete = false;\r\n            startTime = null;\r\n            self.onAbort(file);\r\n        };\r\n\r\n        /**\r\n         * Returns the average speed in bytes per second\r\n         * @returns {number}\r\n         */\r\n        self.getAverageSpeed = function () {\r\n            let seconds = self.getElapsedTime() / 1000;\r\n            return self.getLoaded() / seconds;\r\n        };\r\n\r\n        /**\r\n         * Returns the elapsed time in milliseconds\r\n         * @returns {number}\r\n         */\r\n        self.getElapsedTime = function () {\r\n            if (startTime && self.isUploading()) {\r\n                return elapsedTime + (Date.now() - startTime);\r\n            }\r\n            return elapsedTime;\r\n        };\r\n\r\n        /**\r\n         * Returns the file\r\n         * @return {object}\r\n         */\r\n        self.getFile = function () {\r\n            return file;\r\n        };\r\n\r\n        /**\r\n         * Returns the loaded bytes\r\n         * @return {number}\r\n         */\r\n        self.getLoaded = function () {\r\n            return loaded;\r\n        };\r\n\r\n        /**\r\n         * Returns current progress\r\n         * @return {number}\r\n         */\r\n        self.getProgress = function () {\r\n            return Math.min((loaded / total) * 100 / 100, 1.0);\r\n        };\r\n\r\n        /**\r\n         * Returns the remaining time in milliseconds\r\n         * @returns {number}\r\n         */\r\n        self.getRemainingTime = function () {\r\n            let averageSpeed = self.getAverageSpeed();\r\n            let remainingBytes = total - self.getLoaded();\r\n            return averageSpeed && remainingBytes ? Math.max(remainingBytes / averageSpeed, 0) : 0;\r\n        };\r\n\r\n        /**\r\n         * Returns the upload speed in bytes per second\r\n         * @returns {number}\r\n         */\r\n        self.getSpeed = function () {\r\n            if (timeA && timeB && self.isUploading()) {\r\n                let seconds = (timeB - timeA) / 1000;\r\n                return self.chunkSize / seconds;\r\n            }\r\n            return 0;\r\n        };\r\n\r\n        /**\r\n         * Returns the total bytes\r\n         * @return {number}\r\n         */\r\n        self.getTotal = function () {\r\n            return total;\r\n        };\r\n\r\n        /**\r\n         * Checks if the transfer is complete\r\n         * @return {boolean}\r\n         */\r\n        self.isComplete = function () {\r\n            return complete;\r\n        };\r\n\r\n        /**\r\n         * Checks if the transfer is active\r\n         * @return {boolean}\r\n         */\r\n        self.isUploading = function () {\r\n            return uploading;\r\n        };\r\n\r\n        /**\r\n         * Reads a portion of file\r\n         * @param start\r\n         * @param length\r\n         * @param callback\r\n         * @returns {Blob}\r\n         */\r\n        self.readChunk = function (start, length, callback) {\r\n            if (typeof callback != 'function') {\r\n                throw new Error('readChunk is missing callback');\r\n            }\r\n            try {\r\n                let end;\r\n\r\n                // Calculate the chunk size\r\n                if (length && start + length > total) {\r\n                    end = total;\r\n                } else {\r\n                    end = start + length;\r\n                }\r\n                // Get chunk\r\n                let chunk = data.slice(start, end);\r\n                // Pass chunk to callback\r\n                callback.call(self, null, chunk);\r\n\r\n            } catch (err) {\r\n                console.error('read error', err);\r\n                // Retry to read chunk\r\n                Meteor.setTimeout(function () {\r\n                    if (tries < self.maxTries) {\r\n                        tries += 1;\r\n                        self.readChunk(start, length, callback);\r\n                    }\r\n                }, self.retryDelay);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Sends a file chunk to the store\r\n         */\r\n        self.sendChunk = function () {\r\n            if (!complete && startTime !== null) {\r\n                if (offset < total) {\r\n                    let chunkSize = self.chunkSize;\r\n\r\n                    // Use adaptive length\r\n                    if (self.adaptive && timeA && timeB && timeB > timeA) {\r\n                        let duration = (timeB - timeA) / 1000;\r\n                        let max = self.capacity * (1 + capacityMargin);\r\n                        let min = self.capacity * (1 - capacityMargin);\r\n\r\n                        if (duration >= max) {\r\n                            chunkSize = Math.abs(Math.round(chunkSize * (max - duration)));\r\n\r\n                        } else if (duration < min) {\r\n                            chunkSize = Math.round(chunkSize * (min / duration));\r\n                        }\r\n                        // Limit to max chunk size\r\n                        if (self.maxChunkSize > 0 && chunkSize > self.maxChunkSize) {\r\n                            chunkSize = self.maxChunkSize;\r\n                        }\r\n                    }\r\n\r\n                    // Limit to max chunk size\r\n                    if (self.maxChunkSize > 0 && chunkSize > self.maxChunkSize) {\r\n                        chunkSize = self.maxChunkSize;\r\n                    }\r\n\r\n                    // Reduce chunk size to fit total\r\n                    if (offset + chunkSize > total) {\r\n                        chunkSize = total - offset;\r\n                    }\r\n\r\n                    // Prepare the chunk\r\n                    self.readChunk(offset, chunkSize, function (err, chunk) {\r\n                        if (err) {\r\n                            self.onError(err, file);\r\n                            return;\r\n                        }\r\n\r\n                        let xhr = new XMLHttpRequest();\r\n                        xhr.onreadystatechange = function () {\r\n                            if (xhr.readyState === 4) {\r\n                                if (_.contains([200, 201, 202, 204], xhr.status)) {\r\n                                    timeB = Date.now();\r\n                                    offset += chunkSize;\r\n                                    loaded += chunkSize;\r\n\r\n                                    // Send next chunk\r\n                                    self.onProgress(file, self.getProgress());\r\n\r\n                                    // Finish upload\r\n                                    if (loaded >= total) {\r\n                                        elapsedTime = Date.now() - startTime;\r\n                                        finish();\r\n                                    } else {\r\n                                        Meteor.setTimeout(self.sendChunk, self.transferDelay);\r\n                                    }\r\n                                }\r\n                                else if (!_.contains([402, 403, 404, 500], xhr.status)) {\r\n                                    // Retry until max tries is reach\r\n                                    // But don't retry if these errors occur\r\n                                    if (tries <= self.maxTries) {\r\n                                        tries += 1;\r\n                                        // Wait before retrying\r\n                                        Meteor.setTimeout(self.sendChunk, self.retryDelay);\r\n                                    } else {\r\n                                        self.abort();\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    self.abort();\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        // Calculate upload progress\r\n                        let progress = (offset + chunkSize) / total;\r\n                        // let formData = new FormData();\r\n                        // formData.append('progress', progress);\r\n                        // formData.append('chunk', chunk);\r\n                        let url = `${postUrl}&progress=${progress}`;\r\n\r\n                        timeA = Date.now();\r\n                        timeB = null;\r\n                        uploading = true;\r\n\r\n                        // Send chunk to the store\r\n                        xhr.open('POST', url, true);\r\n                        xhr.send(chunk);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Starts or resumes the transfer\r\n         */\r\n        self.start = function () {\r\n            if (!fileId) {\r\n                // Create the file document and get the token\r\n                // that allows the user to send chunks to the store.\r\n                Meteor.call('ufsCreate', _.extend({}, file), function (err, result) {\r\n                    if (err) {\r\n                        self.onError(err, file);\r\n                    } else if (result) {\r\n                        token = result.token;\r\n                        postUrl = result.url;\r\n                        fileId = result.fileId;\r\n                        file._id = result.fileId;\r\n                        self.onCreate(file);\r\n                        tries = 0;\r\n                        startTime = Date.now();\r\n                        self.onStart(file);\r\n                        self.sendChunk();\r\n                    }\r\n                });\r\n            } else if (!uploading && !complete) {\r\n                // Resume uploading\r\n                tries = 0;\r\n                startTime = Date.now();\r\n                self.onStart(file);\r\n                self.sendChunk();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Stops the transfer\r\n         */\r\n        self.stop = function () {\r\n            if (uploading) {\r\n                // Update elapsed time\r\n                elapsedTime = Date.now() - startTime;\r\n                startTime = null;\r\n                uploading = false;\r\n                self.onStop(file);\r\n\r\n                Meteor.call('ufsStop', fileId, store, token, function (err, result) {\r\n                    if (err) {\r\n                        self.onError(err, file);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Called when the file upload is aborted\r\n     * @param file\r\n     */\r\n    onAbort(file) {\r\n    }\r\n\r\n    /**\r\n     * Called when the file upload is complete\r\n     * @param file\r\n     */\r\n    onComplete(file) {\r\n    }\r\n\r\n    /**\r\n     * Called when the file is created in the collection\r\n     * @param file\r\n     */\r\n    onCreate(file) {\r\n    }\r\n\r\n    /**\r\n     * Called when an error occurs during file upload\r\n     * @param err\r\n     * @param file\r\n     */\r\n    onError(err, file) {\r\n        console.error(`ufs: ${err.message}`);\r\n    }\r\n\r\n    /**\r\n     * Called when a file chunk has been sent\r\n     * @param file\r\n     * @param progress is a float from 0.0 to 1.0\r\n     */\r\n    onProgress(file, progress) {\r\n    }\r\n\r\n    /**\r\n     * Called when the file upload starts\r\n     * @param file\r\n     */\r\n    onStart(file) {\r\n    }\r\n\r\n    /**\r\n     * Called when the file upload stops\r\n     * @param file\r\n     */\r\n    onStop(file) {\r\n    }\r\n}\r\n"]}