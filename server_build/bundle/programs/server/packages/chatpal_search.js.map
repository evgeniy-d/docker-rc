{"version":3,"sources":["meteor://ðŸ’»app/packages/chatpal:search/server/provider/provider.js","meteor://ðŸ’»app/packages/chatpal:search/server/provider/index.js","meteor://ðŸ’»app/packages/chatpal:search/server/utils/logger.js","meteor://ðŸ’»app/packages/chatpal:search/server/utils/utils.js","meteor://ðŸ’»app/packages/chatpal:search/server/asset/config.js"],"names":["searchProviderService","module","watch","require","v","SearchProvider","Index","default","ChatpalLogger","ChatpalProvider","constructor","chatpalBaseUrl","_settings","add","values","key","i18nLabel","i18nDescription","enableQuery","_id","value","multiline","alert","iconName","resultTemplate","suggestionItemTemplate","supportsSuggestions","get","on","name","payload","index","indexFail","indexDoc","removeDoc","_checkForClear","reason","_indexConfig","backendtype","baseurl","endsWith","slice","httpOptions","headers","language","_parseHeaders","sh","split","forEach","d","ds","length","trim","_ping","config","resolve","reject","timeout","maxTimeout","stats","ping","debug","warn","_pingTimeout","Meteor","setTimeout","Math","min","_getIndexConfig","Promise","searchpath","updatepath","pingpath","clearpath","suggestionpath","batchSize","windowSize","stop","info","clearTimeout","start","clear","then","server","_stats","JSON","stringify","message","oldest","Date","valueOf","_getAcl","context","RocketChat","models","Subscriptions","find","uid","fetch","map","room","rid","search","text","callback","msg","type","resultType","query","rows","suggest","register","export","Random","Backend","options","_options","docs","data","params","response","HTTP","call","statusCode","Error","e","error","remove","id","delete","commit","count","numFound","err","result","undefined","suggestion","BatchIndexer","size","func","rest","_size","_func","_rest","_values","push","flush","date","_backend","_batchIndexer","_bootstrap","_getIndexDocument","doc","user","u","created","ts","updated","_updatedAt","createdAt","lm","room_name","room_announcement","announcement","room_description","description","room_topic","topic","user_username","username","user_name","user_email","emails","address","_existsDataOlderThan","Messages","model","$lt","t","$exists","limit","_doesRoomCountDiffer","Rooms","$ne","_doesUserCountDiffer","users","active","_indexUsers","cursor","_indexRooms","_indexMessages","gap","end","$gt","toString","getTime","_run","_running","_break","reindex","acl","Logger","exportDefault","methods","email","tier","lang","content","Inject","rawBody","Assets","getText"],"mappings":"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","file":"/packages/chatpal_search.js","sourcesContent":["import {searchProviderService} from 'meteor/rocketchat:search';\nimport {SearchProvider} from 'meteor/rocketchat:search';\nimport Index from './index';\nimport ChatpalLogger from '../utils/logger';\n\n/**\n * The chatpal search provider enables chatpal search. An appropriate backedn has to be specified by settings.\n */\nclass ChatpalProvider extends SearchProvider {\n\n\t/**\n\t * Create chatpal provider with some settings for backend and ui\n\t */\n\tconstructor() {\n\t\tsuper('chatpalProvider');\n\n\t\tthis.chatpalBaseUrl = 'https://beta.chatpal.io/v1';\n\n\t\tthis._settings.add('Backend', 'select', 'cloud', {\n\t\t\tvalues:[\n\t\t\t\t{key: 'cloud', i18nLabel: 'Cloud Service'},\n\t\t\t\t{key: 'onsite', i18nLabel: 'On-Site'}\n\t\t\t],\n\t\t\ti18nLabel: 'Chatpal_Backend',\n\t\t\ti18nDescription: 'Chatpal_Backend_Description'\n\t\t});\n\t\tthis._settings.add('API_Key', 'string', '', {\n\t\t\tenableQuery:[{\n\t\t\t\t_id: 'Search.chatpalProvider.Backend',\n\t\t\t\tvalue: 'cloud'\n\t\t\t}],\n\t\t\ti18nLabel: 'Chatpal_API_Key',\n\t\t\ti18nDescription: 'Chatpal_API_Key_Description'\n\t\t});\n\t\tthis._settings.add('Base_URL', 'string', '', {\n\t\t\tenableQuery:[{\n\t\t\t\t_id: 'Search.chatpalProvider.Backend',\n\t\t\t\tvalue: 'onsite'\n\t\t\t}],\n\t\t\ti18nLabel: 'Chatpal_Base_URL',\n\t\t\ti18nDescription: 'Chatpal_Base_URL_Description'\n\t\t});\n\t\tthis._settings.add('HTTP_Headers', 'string', '', {\n\t\t\tenableQuery:[{\n\t\t\t\t_id: 'Search.chatpalProvider.Backend',\n\t\t\t\tvalue: 'onsite'\n\t\t\t}],\n\t\t\tmultiline: true,\n\t\t\ti18nLabel: 'Chatpal_HTTP_Headers',\n\t\t\ti18nDescription: 'Chatpal_HTTP_Headers_Description'\n\t\t});\n\t\tthis._settings.add('Main_Language', 'select', 'en', {\n\t\t\tvalues: [\n\t\t\t\t{key: 'en', i18nLabel: 'English'},\n\t\t\t\t{key: 'none', i18nLabel: 'Language_Not_set'},\n\t\t\t\t{key: 'cs', i18nLabel: 'Czech'},\n\t\t\t\t{key: 'de', i18nLabel: 'Deutsch'},\n\t\t\t\t{key: 'el', i18nLabel: 'Greek'},\n\t\t\t\t{key: 'es', i18nLabel: 'Spanish'},\n\t\t\t\t{key: 'fi', i18nLabel: 'Finish'},\n\t\t\t\t{key: 'fr', i18nLabel: 'French'},\n\t\t\t\t{key: 'hu', i18nLabel: 'Hungarian'},\n\t\t\t\t{key: 'it', i18nLabel: 'Italian'},\n\t\t\t\t{key: 'nl', i18nLabel: 'Dutsch'},\n\t\t\t\t{key: 'pl', i18nLabel: 'Polish'},\n\t\t\t\t{key: 'pt', i18nLabel: 'Portuguese'},\n\t\t\t\t{key: 'pt_BR', i18nLabel: 'Brasilian'},\n\t\t\t\t{key: 'ro', i18nLabel: 'Romanian'},\n\t\t\t\t{key: 'ru', i18nLabel: 'Russian'},\n\t\t\t\t{key: 'sv', i18nLabel: 'Swedisch'},\n\t\t\t\t{key: 'tr', i18nLabel: 'Turkish'},\n\t\t\t\t{key: 'uk', i18nLabel: 'Ukrainian'}\n\t\t\t],\n\t\t\ti18nLabel: 'Chatpal_Main_Language',\n\t\t\ti18nDescription: 'Chatpal_Main_Language_Description'\n\t\t});\n\t\tthis._settings.add('DefaultResultType', 'select', 'All', {\n\t\t\tvalues: [\n\t\t\t\t{key: 'All', i18nLabel: 'All'},\n\t\t\t\t{key: 'Messages', i18nLabel: 'Messages'}\n\t\t\t],\n\t\t\ti18nLabel: 'Chatpal_Default_Result_Type',\n\t\t\ti18nDescription: 'Chatpal_Default_Result_Type_Description'\n\t\t});\n\t\tthis._settings.add('PageSize', 'int', 15, {\n\t\t\ti18nLabel: 'Search_Page_Size'\n\t\t});\n\t\tthis._settings.add('SuggestionEnabled', 'boolean', true, {\n\t\t\ti18nLabel: 'Chatpal_Suggestion_Enabled',\n\t\t\talert: 'This feature is currently in beta and will be extended in the future'\n\t\t});\n\t\tthis._settings.add('BatchSize', 'int', 100, {\n\t\t\ti18nLabel: 'Chatpal_Batch_Size',\n\t\t\ti18nDescription: 'Chatpal_Batch_Size_Description'\n\t\t});\n\t\tthis._settings.add('TimeoutSize', 'int', 5000, {\n\t\t\ti18nLabel: 'Chatpal_Timeout_Size',\n\t\t\ti18nDescription: 'Chatpal_Timeout_Size_Description'\n\t\t});\n\t\tthis._settings.add('WindowSize', 'int', 48, {\n\t\t\ti18nLabel: 'Chatpal_Window_Size',\n\t\t\ti18nDescription: 'Chatpal_Window_Size_Description'\n\t\t});\n\t}\n\n\tget i18nLabel() {\n\t\treturn 'Chatpal Provider';\n\t}\n\n\tget iconName() {\n\t\treturn 'chatpal-logo-icon-darkblue';\n\t}\n\n\tget resultTemplate() {\n\t\treturn 'ChatpalSearchResultTemplate';\n\t}\n\n\tget suggestionItemTemplate() {\n\t\treturn 'ChatpalSuggestionItemTemplate';\n\t}\n\n\tget supportsSuggestions() {\n\t\treturn this._settings.get('SuggestionEnabled');\n\t}\n\n\t/**\n\t * indexing for messages, rooms and users\n\t * @inheritDoc\n\t */\n\ton(name, value, payload) {\n\n\t\tif (!this.index) {\n\t\t\tthis.indexFail = true;\n\t\t\treturn false;\n\t\t}\n\n\t\tswitch (name) {\n\t\t\tcase 'message.save': return this.index.indexDoc('message', payload);\n\t\t\tcase 'user.save': return this.index.indexDoc('user', payload);\n\t\t\tcase 'room.save': return this.index.indexDoc('room', payload);\n\t\t\tcase 'message.delete': return this.index.removeDoc('message', value);\n\t\t\tcase 'user.delete': return this.index.removeDoc('user', value);\n\t\t\tcase 'room.delete': return this.index.removeDoc('room', value);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check if the index has to be deleted and completely new reindexed\n\t * @param reason the reason for the provider start\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_checkForClear(reason) {\n\n\t\tif (reason === 'startup') { return false; }\n\n\t\tif (reason === 'switch') { return true; }\n\n\t\treturn this._indexConfig.backendtype !== this._settings.get('Backend') ||\n\t\t\t(this._indexConfig.backendtype === 'onsite' && this._indexConfig.baseurl !== (this._settings.get('Base_URL').endsWith('/') ? this._settings.get('Base_URL').slice(0, -1) : this._settings.get('Base_URL'))) ||\n\t\t\t(this._indexConfig.backendtype === 'cloud' && this._indexConfig.httpOptions.headers['X-Api-Key'] !== this._settings.get('API_Key')) ||\n\t\t\tthis._indexConfig.language !== this._settings.get('Main_Language');\n\t}\n\n\t/**\n\t * parse string to object that can be used as header for HTTP calls\n\t * @returns {{}}\n\t * @private\n\t */\n\t_parseHeaders() {\n\t\tconst headers = {};\n\t\tconst sh = this._settings.get('HTTP_Headers').split('\\n');\n\t\tsh.forEach(function(d) {\n\t\t\tconst ds = d.split(':');\n\t\t\tif (ds.length === 2 && ds[0].trim() !== '') {\n\t\t\t\theaders[ds[0]] = ds[1];\n\t\t\t}\n\t\t});\n\t\treturn headers;\n\t}\n\n\t/**\n\t * ping if configuration has been set correctly\n\t * @param config\n\t * @param resolve if ping was successfull\n\t * @param reject if some error occurs\n\t * @param timeout until ping is repeated\n\t * @private\n\t */\n\t_ping(config, resolve, reject, timeout = 5000) {\n\n\t\tconst maxTimeout = 200000;\n\n\t\tconst stats = Index.ping(config);\n\n\t\tif (stats) {\n\t\t\tChatpalLogger.debug('ping was successfull');\n\t\t\tresolve({config, stats});\n\t\t} else {\n\n\t\t\tChatpalLogger.warn(`ping failed, retry in ${ timeout } ms`);\n\n\t\t\tthis._pingTimeout = Meteor.setTimeout(() => {\n\t\t\t\tthis._ping(config, resolve, reject, Math.min(maxTimeout, 2*timeout));\n\t\t\t}, timeout);\n\t\t}\n\n\t}\n\n\t/**\n\t * Get index config based on settings\n\t * @param callback\n\t * @private\n\t */\n\t_getIndexConfig() {\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst config = {\n\t\t\t\tbackendtype: this._settings.get('Backend')\n\t\t\t};\n\n\t\t\tif (this._settings.get('Backend') === 'cloud') {\n\t\t\t\tconfig.baseurl = this.chatpalBaseUrl;\n\t\t\t\tconfig.language = this._settings.get('Main_Language');\n\t\t\t\tconfig.searchpath = '/search/search';\n\t\t\t\tconfig.updatepath = '/search/update';\n\t\t\t\tconfig.pingpath = '/search/ping';\n\t\t\t\tconfig.clearpath = '/search/clear';\n\t\t\t\tconfig.suggestionpath = '/search/suggest';\n\t\t\t\tconfig.httpOptions = {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'X-Api-Key': this._settings.get('API_Key')\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconfig.baseurl = this._settings.get('Base_URL').endsWith('/') ? this._settings.get('Base_URL').slice(0, -1) : this._settings.get('Base_URL');\n\t\t\t\tconfig.language = this._settings.get('Main_Language');\n\t\t\t\tconfig.searchpath = '/chatpal/search';\n\t\t\t\tconfig.updatepath = '/chatpal/update';\n\t\t\t\tconfig.pingpath = '/chatpal/ping';\n\t\t\t\tconfig.clearpath = '/chatpal/clear';\n\t\t\t\tconfig.suggestionpath = '/chatpal/suggest';\n\t\t\t\tconfig.httpOptions = {\n\t\t\t\t\theaders: this._parseHeaders()\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconfig.batchSize = this._settings.get('BatchSize');\n\t\t\tconfig.timeout = this._settings.get('TimeoutSize');\n\t\t\tconfig.windowSize = this._settings.get('WindowSize');\n\n\t\t\tthis._ping(config, resolve, reject);\n\t\t});\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @param callback\n\t */\n\tstop(resolve) {\n\t\tChatpalLogger.info('Provider stopped');\n\t\tMeteor.clearTimeout(this._pingTimeout);\n\t\tthis.indexFail = false;\n\t\tthis.index && this.index.stop();\n\t\tresolve();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @param reason\n\t * @param resolve\n\t * @param reject\n\t */\n\tstart(reason, resolve, reject) {\n\n\t\tconst clear = this._checkForClear(reason);\n\n\t\tChatpalLogger.debug(`clear = ${ clear } with reason '${ reason }'`);\n\n\t\tthis._getIndexConfig().then((server) => {\n\t\t\tthis._indexConfig = server.config;\n\n\t\t\tthis._stats = server.stats;\n\n\t\t\tChatpalLogger.debug('config:', JSON.stringify(this._indexConfig, null, 2));\n\t\t\tChatpalLogger.debug('stats:', JSON.stringify(this._stats, null, 2));\n\n\t\t\tthis.index = new Index(this._indexConfig, this.indexFail || clear, this._stats.message.oldest || new Date().valueOf());\n\n\t\t\tresolve();\n\t\t}, reject);\n\t}\n\n\t/**\n\t * returns a list of rooms that are allowed to see by current user\n\t * @param context\n\t * @private\n\t */\n\t_getAcl(context) {\n\t\treturn RocketChat.models.Subscriptions.find({'u._id': context.uid}).fetch().map(room => room.rid);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @returns {*}\n\t */\n\tsearch(text, context, payload, callback) {\n\n\t\tif (!this.index) { return callback({msg:'Chatpal_currently_not_active'}); }\n\n\t\tconst type = payload.resultType === 'All' ? ['message', 'user', 'room'] : ['message'];\n\n\t\tthis.index.query(\n\t\t\ttext,\n\t\t\tthis._settings.get('Main_Language'),\n\t\t\tthis._getAcl(context),\n\t\t\ttype,\n\t\t\tpayload.start || 0,\n\t\t\tpayload.rows || this._settings.get('PageSize'),\n\t\t\tcallback\n\t\t);\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tsuggest(text, context, payload, callback) {\n\n\t\tif (!this.index) { return callback({msg:'Chatpal_currently_not_active'}); }\n\n\t\tconst type = payload.resultType === 'All' ? ['message', 'user', 'room'] : ['message'];\n\n\t\tthis.index.suggest(\n\t\t\ttext,\n\t\t\tthis._settings.get('Main_Language'),\n\t\t\tthis._getAcl(context),\n\t\t\ttype,\n\t\t\tcallback\n\t\t);\n\t}\n}\n\nsearchProviderService.register(new ChatpalProvider());\n","import ChatpalLogger from '../utils/logger';\nimport { Random } from 'meteor/random';\n\n/**\n * Enables HTTP functions on Chatpal Backend\n */\nclass Backend {\n\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * index a set of Sorl documents\n\t * @param docs\n\t * @returns {boolean}\n\t */\n\tindex(docs) {\n\t\tconst options = {\n\t\t\tdata:docs,\n\t\t\tparams:{language:this._options.language},\n\t\t\t...this._options.httpOptions\n\t\t};\n\n\t\ttry {\n\n\t\t\tconst response = HTTP.call('POST', `${ this._options.baseurl }${ this._options.updatepath }`, options);\n\n\t\t\tif (response.statusCode >= 200 && response.statusCode < 300) {\n\t\t\t\tChatpalLogger.debug(`indexed ${ docs.length } documents`, JSON.stringify(response.data, null, 2));\n\t\t\t} else {\n\t\t\t\tthrow new Error(response);\n\t\t\t}\n\n\t\t} catch (e) {\n\t\t\t//TODO how to deal with this\n\t\t\tChatpalLogger.error('indexing failed', JSON.stringify(e, null, 2));\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t/**\n\t * remove an entry by type and id\n\t * @param type\n\t * @param id\n\t * @returns {boolean}\n\t */\n\tremove(type, id) {\n\t\tChatpalLogger.debug(`Remove ${ type }(${ id }) from Index`);\n\n\t\tconst options = {\n\t\t\tdata:{\n\t\t\t\tdelete: {\n\t\t\t\t\tquery: `id:${ id } AND type:${ type }`\n\t\t\t\t},\n\t\t\t\tcommit:{}\n\t\t\t},\n\t\t\t...this._options.httpOptions\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = HTTP.call('POST', this._options.baseurl + this._options.clearpath, options);\n\n\t\t\treturn response.statusCode >= 200 && response.statusCode < 300;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tcount(type) {\n\t\treturn this.query({type, rows:0, text:'*'})[type].numFound;\n\t}\n\n\t/**\n\t * query with params\n\t * @param params\n\t * @param callback\n\t */\n\tquery(params, callback) {\n\n\t\tconst options = {\n\t\t\tparams,\n\t\t\t...this._options.httpOptions\n\t\t};\n\n\t\tChatpalLogger.debug('query: ', JSON.stringify(options, null, 2));\n\n\t\ttry {\n\t\t\tif (callback) {\n\t\t\t\tHTTP.call('POST', this._options.baseurl + this._options.searchpath, options, (err, result) => {\n\t\t\t\t\tif (err) { return callback(err); }\n\n\t\t\t\t\tcallback(undefined, result.data);\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tconst response = HTTP.call('POST', this._options.baseurl + this._options.searchpath, options);\n\n\t\t\t\tif (response.statusCode >= 200 && response.statusCode < 300) {\n\t\t\t\t\treturn response.data;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(response);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tChatpalLogger.error('query failed', JSON.stringify(e, null, 2));\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tsuggest(params, callback) {\n\n\t\tconst options = {\n\t\t\tparams,\n\t\t\t...this._options.httpOptions\n\t\t};\n\n\t\tHTTP.call('POST', this._options.baseurl + this._options.suggestionpath, options, (err, result) => {\n\t\t\tif (err) { return callback(err); }\n\n\t\t\ttry {\n\t\t\t\tcallback(undefined, result.data.suggestion);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e);\n\t\t\t}\n\t\t});\n\t}\n\n\tclear() {\n\t\tChatpalLogger.debug('Clear Index');\n\n\t\tconst options = {\n\t\t\tdata:{\n\t\t\t\tdelete: {\n\t\t\t\t\tquery: '*:*'\n\t\t\t\t},\n\t\t\t\tcommit:{}\n\t\t\t}, ...this._options.httpOptions\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = HTTP.call('POST', this._options.baseurl + this._options.clearpath, options);\n\n\t\t\treturn response.statusCode >= 200 && response.statusCode < 300;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * statically ping with configuration\n\t * @param options\n\t * @returns {boolean}\n\t */\n\tstatic ping(config) {\n\n\t\tconst options = {\n\t\t\tparams: {\n\t\t\t\tstats:true\n\t\t\t},\n\t\t\t...config.httpOptions\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = HTTP.call('GET', config.baseurl + config.pingpath, options);\n\n\t\t\tif (response.statusCode >= 200 && response.statusCode < 300) {\n\t\t\t\treturn response.data.stats;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n\n/**\n * Enabled batch indexing\n */\nclass BatchIndexer {\n\n\tconstructor(size, func, ...rest) {\n\t\tthis._size = size;\n\t\tthis._func = func;\n\t\tthis._rest = rest;\n\t\tthis._values = [];\n\t}\n\n\tadd(value) {\n\t\tthis._values.push(value);\n\t\tif (this._values.length === this._size) {\n\t\t\tthis.flush();\n\t\t}\n\t}\n\n\tflush() {\n\t\tthis._func(this._values, this._rest);//TODO if flush does not work\n\t\tthis._values = [];\n\t}\n}\n\n/**\n * Provides index functions to chatpal provider\n */\nexport default class Index {\n\n\t/**\n\t * Creates Index Stub\n\t * @param options\n\t * @param clear if a complete reindex should be done\n\t */\n\tconstructor(options, clear, date) {\n\n\t\tthis._id = Random.id();\n\n\t\tthis._backend = new Backend(options);\n\n\t\tthis._options = options;\n\n\t\tthis._batchIndexer = new BatchIndexer(this._options.batchSize || 100, (values) => this._backend.index(values));\n\n\t\tthis._bootstrap(clear, date);\n\t}\n\n\t/**\n\t * prepare solr documents\n\t * @param type\n\t * @param doc\n\t * @returns {*}\n\t * @private\n\t */\n\t_getIndexDocument(type, doc) {\n\t\tswitch (type) {\n\t\t\tcase 'message':\n\t\t\t\treturn {\n\t\t\t\t\tid: doc._id,\n\t\t\t\t\trid: doc.rid,\n\t\t\t\t\tuser: doc.u._id,\n\t\t\t\t\tcreated: doc.ts,\n\t\t\t\t\tupdated: doc._updatedAt,\n\t\t\t\t\ttext: doc.msg,\n\t\t\t\t\ttype\n\t\t\t\t};\n\t\t\tcase 'room':\n\t\t\t\treturn {\n\t\t\t\t\tid: doc._id,\n\t\t\t\t\trid: doc._id,\n\t\t\t\t\tcreated: doc.createdAt,\n\t\t\t\t\tupdated: doc.lm ? doc.lm : doc._updatedAt,\n\t\t\t\t\ttype,\n\t\t\t\t\troom_name: doc.name,\n\t\t\t\t\troom_announcement: doc.announcement,\n\t\t\t\t\troom_description: doc.description,\n\t\t\t\t\troom_topic: doc.topic\n\t\t\t\t};\n\t\t\tcase 'user':\n\t\t\t\treturn {\n\t\t\t\t\tid: doc._id,\n\t\t\t\t\tcreated: doc.createdAt,\n\t\t\t\t\tupdated: doc._updatedAt,\n\t\t\t\t\ttype,\n\t\t\t\t\tuser_username: doc.username,\n\t\t\t\t\tuser_name: doc.name,\n\t\t\t\t\tuser_email: doc.emails && doc.emails.map((e) => { return e.address; })\n\t\t\t\t};\n\t\t\tdefault: throw new Error(`Cannot index type '${ type }'`);\n\t\t}\n\t}\n\n\t/**\n\t * return true if there are messages in the databases which has been created before *date*\n\t * @param date\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_existsDataOlderThan(date) {\n\t\treturn RocketChat.models.Messages.model.find({ts:{$lt: new Date(date)}, t:{$exists:false}}, {limit:1}).fetch().length > 0;\n\t}\n\n\t_doesRoomCountDiffer() {\n\t\treturn RocketChat.models.Rooms.find({t:{$ne:'d'}}).count() !== this._backend.count('room');\n\t}\n\n\t_doesUserCountDiffer() {\n\t\treturn Meteor.users.find({active:true}).count() !== this._backend.count('user');\n\t}\n\n\t/**\n\t * Index users by using a database cursor\n\t */\n\t_indexUsers() {\n\t\tconst cursor = Meteor.users.find({active:true});\n\n\t\tChatpalLogger.debug(`Start indexing ${ cursor.count() } users`);\n\n\t\tcursor.forEach((user) => {\n\t\t\tthis.indexDoc('user', user, false);\n\t\t});\n\n\t\tChatpalLogger.info(`Users indexed successfully (index-id: ${ this._id })`);\n\t}\n\n\t/**\n\t * Index rooms by database cursor\n\t * @private\n\t */\n\t_indexRooms() {\n\t\tconst cursor = RocketChat.models.Rooms.find({t:{$ne:'d'}});\n\n\t\tChatpalLogger.debug(`Start indexing ${ cursor.count() } rooms`);\n\n\t\tcursor.forEach((room) => {\n\t\t\tthis.indexDoc('room', room, false);\n\t\t});\n\n\t\tChatpalLogger.info(`Rooms indexed successfully (index-id: ${ this._id })`);\n\t}\n\n\t_indexMessages(date, gap) {\n\n\t\tconst start = new Date(date - gap);\n\t\tconst end = new Date(date);\n\n\t\tconst cursor = RocketChat.models.Messages.model.find({ts:{$gt: start, $lt: end}, t:{$exists:false}});\n\n\t\tChatpalLogger.debug(`Start indexing ${ cursor.count() } messages between ${ start.toString() } and ${ end.toString() }`);\n\n\t\tcursor.forEach((message) => {\n\t\t\tthis.indexDoc('message', message, false);\n\t\t});\n\n\t\tChatpalLogger.info(`Messages between ${ start.toString() } and ${ end.toString() } indexed successfully (index-id: ${ this._id })`);\n\n\t\treturn start.getTime();\n\t}\n\n\t_run(date, resolve, reject) {\n\n\t\tthis._running = true;\n\n\t\tif (this._existsDataOlderThan(date) && !this._break) {\n\n\t\t\tMeteor.setTimeout(() => {\n\t\t\t\tdate = this._indexMessages(date, (this._options.windowSize || 24) * 3600000);\n\n\t\t\t\tthis._run(date, resolve, reject);\n\n\t\t\t}, this._options.timeout || 1000);\n\t\t} else if (this._break) {\n\t\t\tChatpalLogger.info(`stopped bootstrap (index-id: ${ this._id })`);\n\n\t\t\tthis._batchIndexer.flush();\n\n\t\t\tthis._running = false;\n\n\t\t\tresolve();\n\t\t} else {\n\n\t\t\tChatpalLogger.info(`No messages older than already indexed date ${ new Date(date).toString() }`);\n\n\t\t\tif (this._doesUserCountDiffer() && !this._break) {\n\t\t\t\tthis._indexUsers();\n\t\t\t} else {\n\t\t\t\tChatpalLogger.info('Users already indexed');\n\t\t\t}\n\n\t\t\tif (this._doesRoomCountDiffer() && !this._break) {\n\t\t\t\tthis._indexRooms();\n\t\t\t} else {\n\t\t\t\tChatpalLogger.info('Rooms already indexed');\n\t\t\t}\n\n\t\t\tthis._batchIndexer.flush();\n\n\t\t\tChatpalLogger.info(`finished bootstrap (index-id: ${ this._id })`);\n\n\t\t\tthis._running = false;\n\n\t\t\tresolve();\n\t\t}\n\t}\n\n\t_bootstrap(clear, date) {\n\n\t\tChatpalLogger.info('Start bootstrapping');\n\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tif (clear) {\n\t\t\t\tthis._backend.clear();\n\t\t\t\tdate = new Date().getTime();\n\t\t\t}\n\n\t\t\tthis._run(date, resolve, reject);\n\n\t\t});\n\t}\n\n\tstatic ping(options) {\n\t\treturn Backend.ping(options);\n\t}\n\n\tstop() {\n\t\tthis._break = true;\n\t}\n\n\treindex() {\n\t\tif (!this._running) {\n\t\t\tthis._bootstrap(true);\n\t\t}\n\t}\n\n\tindexDoc(type, doc, flush = true) {\n\t\tthis._batchIndexer.add(this._getIndexDocument(type, doc));\n\n\t\tif (flush) { this._batchIndexer.flush(); }\n\n\t\treturn true;\n\t}\n\n\tremoveDoc(type, id) {\n\t\treturn this._backend.remove(type, id);\n\t}\n\n\tquery(text, language, acl, type, start, rows, callback, params = {}) {\n\t\tthis._backend.query({\n\t\t\ttext,\n\t\t\tlanguage,\n\t\t\tacl,\n\t\t\ttype,\n\t\t\tstart,\n\t\t\trows,\n\t\t\t...params\n\t\t}, callback);\n\t}\n\n\tsuggest(text, language, acl, type, callback) {\n\t\tthis._backend.suggest({\n\t\t\ttext,\n\t\t\tlanguage,\n\t\t\tacl,\n\t\t\ttype\n\t\t}, callback);\n\t}\n\n}\n","const ChatpalLogger = new Logger('Chatpal Logger', {});\nexport default ChatpalLogger;\n","Meteor.methods({\n\t'chatpalUtilsCreateKey'(email) {\n\t\ttry {\n\t\t\tconst response = HTTP.call('POST', 'https://beta.chatpal.io/v1/account', {data: {email, tier: 'free'}});\n\t\t\tif (response.statusCode === 201) {\n\t\t\t\treturn response.data.key;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t},\n\t'chatpalUtilsGetTaC'(lang) {\n\t\ttry {\n\t\t\tconst response = HTTP.call('GET', `https://beta.chatpal.io/v1/terms/${ lang }.html`);\n\t\t\tif (response.statusCode === 200) {\n\t\t\t\treturn response.content;\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n});\n","/* globals Inject */\n\nInject.rawBody('chatpal-enter', Assets.getText('server/asset/chatpal-enter.svg'));\nInject.rawBody('chatpal-logo-icon-darkblue', Assets.getText('server/asset/chatpal-logo-icon-darkblue.svg'));\n"]}