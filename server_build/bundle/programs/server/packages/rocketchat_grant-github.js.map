{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:grant-github/server/index.js"],"names":["module","export","getUser","Providers","GrantError","watch","require","v","HTTP","userAgent","getIdentity","accessToken","get","headers","params","access_token","data","err","message","getEmails","identity","emails","primaryEmail","find","email","primary","id","username","login","name","avatar","avatar_url","register","scope"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAQ,MAAIA;AAAb,CAAd;AAAqC,IAAIC,SAAJ,EAAcC,UAAd;AAAyBJ,OAAOK,KAAP,CAAaC,QAAQ,yBAAR,CAAb,EAAgD;AAACH,YAAUI,CAAV,EAAY;AAACJ,gBAAUI,CAAV;AAAY,GAA1B;;AAA2BH,aAAWG,CAAX,EAAa;AAACH,iBAAWG,CAAX;AAAa;;AAAtD,CAAhD,EAAwG,CAAxG;AAA2G,IAAIC,IAAJ;AAASR,OAAOK,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAACE,OAAKD,CAAL,EAAO;AAACC,WAAKD,CAAL;AAAO;;AAAhB,CAApC,EAAsD,CAAtD;AAGlL,MAAME,YAAY,QAAlB;;AAEA,SAASC,WAAT,CAAqBC,WAArB,EAAkC;AACjC,MAAI;AACH,WAAOH,KAAKI,GAAL,CACN,6BADM,EACyB;AAC9BC,eAAS;AAAE,sBAAcJ;AAAhB,OADqB;AACQ;AACtCK,cAAQ;AAAEC,sBAAcJ;AAAhB;AAFsB,KADzB,EAIHK,IAJJ;AAKA,GAND,CAME,OAAOC,GAAP,EAAY;AACb,UAAM,IAAIb,UAAJ,CAAgB,yCAAyCa,IAAIC,OAAS,EAAtE,CAAN;AACA;AACD;;AAED,SAASC,SAAT,CAAmBR,WAAnB,EAAgC;AAC/B,MAAI;AACH,WAAOH,KAAKI,GAAL,CACN,oCADM,EACgC;AACrCC,eAAS;AAAE,sBAAcJ;AAAhB,OAD4B;AACC;AACtCK,cAAQ;AAAEC,sBAAcJ;AAAhB;AAF6B,KADhC,EAIHK,IAJJ;AAKA,GAND,CAME,OAAOC,GAAP,EAAY;AACb,WAAO,EAAP;AACA;AACD;;AAEM,SAASf,OAAT,CAAiBS,WAAjB,EAA8B;AACpC,QAAMS,WAAWV,YAAYC,WAAZ,CAAjB;AACA,QAAMU,SAASF,UAAUR,WAAV,CAAf;AACA,QAAMW,eAAe,CAACD,UAAU,EAAX,EAAeE,IAAf,CAAoBC,SAASA,MAAMC,OAAN,KAAkB,IAA/C,CAArB;AAEA,SAAO;AACNC,QAAIN,SAASM,EADP;AAENF,WAAOJ,SAASI,KAAT,IAAmBF,gBAAgBA,aAAaE,KAAhD,IAA0D,EAF3D;AAGNG,cAAUP,SAASQ,KAHb;AAINP,UAJM;AAKNQ,UAAMT,SAASS,IALT;AAMNC,YAAQV,SAASW;AANX,GAAP;AAQA;;AAED;AACA5B,UAAU6B,QAAV,CAAmB,QAAnB,EAA6B;AAAEC,SAAO,CAAC,MAAD,EAAS,YAAT;AAAT,CAA7B,EAAgE/B,OAAhE,E","file":"/packages/rocketchat_grant-github.js","sourcesContent":["import { Providers, GrantError } from 'meteor/rocketchat:grant';\nimport { HTTP } from 'meteor/http';\n\nconst userAgent = 'Meteor';\n\nfunction getIdentity(accessToken) {\n\ttry {\n\t\treturn HTTP.get(\n\t\t\t'https://api.github.com/user', {\n\t\t\t\theaders: { 'User-Agent': userAgent }, // http://developer.github.com/v3/#user-agent-required\n\t\t\t\tparams: { access_token: accessToken }\n\t\t\t}).data;\n\t} catch (err) {\n\t\tthrow new GrantError(`Failed to fetch identity from Github. ${ err.message }`);\n\t}\n}\n\nfunction getEmails(accessToken) {\n\ttry {\n\t\treturn HTTP.get(\n\t\t\t'https://api.github.com/user/emails', {\n\t\t\t\theaders: { 'User-Agent': userAgent }, // http://developer.github.com/v3/#user-agent-required\n\t\t\t\tparams: { access_token: accessToken }\n\t\t\t}).data;\n\t} catch (err) {\n\t\treturn [];\n\t}\n}\n\nexport function getUser(accessToken) {\n\tconst identity = getIdentity(accessToken);\n\tconst emails = getEmails(accessToken);\n\tconst primaryEmail = (emails || []).find(email => email.primary === true);\n\n\treturn {\n\t\tid: identity.id,\n\t\temail: identity.email || (primaryEmail && primaryEmail.email) || '',\n\t\tusername: identity.login,\n\t\temails,\n\t\tname: identity.name,\n\t\tavatar: identity.avatar_url\n\t};\n}\n\n// Register GitHub OAuth\nProviders.register('github', { scope: ['user', 'user:email'] }, getUser);\n"]}