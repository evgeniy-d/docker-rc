{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/info.js","meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/server/importer.js","meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/server/adder.js"],"names":["module","export","HipChatEnterpriseImporterInfo","ImporterInfo","watch","require","v","constructor","text","href","HipChatEnterpriseImporter","Base","ProgressStep","Selection","SelectionChannel","SelectionUser","Readable","path","default","info","zlib","tarStream","extract","messages","Map","directMessages","prepare","dataURI","sentContentType","fileName","tempUsers","tempRooms","tempMessages","tempDirectMessages","promise","Promise","resolve","reject","on","Meteor","bindEnvironment","header","stream","next","name","indexOf","parse","chunk","logger","debug","file","JSON","base","updateProgress","PREPARING_USERS","u","push","id","User","email","username","mention_name","avatar","replace","timezone","isDeleted","is_deleted","PREPARING_CHANNELS","r","Room","creator","owner","created","Date","toLowerCase","isPrivate","privacy","isArchived","is_archived","topic","dirSplit","dir","split","roomIdentifier","msgs","m","PrivateUserMessage","type","senderId","sender","receiverId","receiver","message","ts","timestamp","set","roomMsgs","UserMessage","userId","TopicRoomMessage","warn","err","usersId","collection","insert","importRecord","_id","users","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","channel","entries","get","getBSONSize","getMaxBSONSize","getBSONSafeArraysFromAnArray","forEach","splitMsg","i","messagesId","directMsgUser","ERROR","selectionUsers","map","selectionChannels","selectionMessages","count","USER_SELECTION","s","Buffer","pipe","createGunzip","startImport","importSelection","started","now","user","user_id","do_import","update","$set","c","channel_id","startedByUserId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","Accounts","createUser","password","toUpperCase","call","joinDefaultChannelsSilenced","setName","deleted","addCountCompleted","IMPORTING_CHANNELS","existantRoom","Rooms","findOneByName","creatorId","roomInfo","rid","IMPORTING_MESSAGES","ch","messagesMap","hipChannel","getChannelFromRoomIdentifier","room","findOneById","fields","usernames","t","msgGroupData","msg","isNaN","getRocketUserFromUserId","sendMessage","Messages","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","directMsgRoom","directMessagesMap","hipUser","getUserFromDirectMessageIdentifier","sort","join","FINISHING","DONE","e","error","timeTook","log","getProgress","getSelection","directIdentifier","Importers","add"],"mappings":"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","file":"/packages/rocketchat_importer-hipchat-enterprise.js","sourcesContent":["import { ImporterInfo } from 'meteor/rocketchat:importer';\n\nexport class HipChatEnterpriseImporterInfo extends ImporterInfo {\n\tconstructor() {\n\t\tsuper('hipchatenterprise', 'HipChat Enterprise', 'application/gzip', [\n\t\t\t{\n\t\t\t\ttext: 'Importer_HipChatEnterprise_Information',\n\t\t\t\thref: 'https://rocket.chat/docs/administrator-guides/import/hipchat/enterprise/'\n\t\t\t}, {\n\t\t\t\ttext: 'Importer_HipChatEnterprise_BetaWarning',\n\t\t\t\thref: 'https://github.com/RocketChat/Rocket.Chat/issues/new'\n\t\t\t}\n\t\t]);\n\t}\n}\n","import {\n\tBase,\n\tProgressStep,\n\tSelection,\n\tSelectionChannel,\n\tSelectionUser\n} from 'meteor/rocketchat:importer';\nimport {Readable} from 'stream';\nimport path from 'path';\n\nexport class HipChatEnterpriseImporter extends Base {\n\tconstructor(info) {\n\t\tsuper(info);\n\n\t\tthis.Readable = Readable;\n\t\tthis.zlib = require('zlib');\n\t\tthis.tarStream = require('tar-stream');\n\t\tthis.extract = this.tarStream.extract();\n\t\tthis.path = path;\n\t\tthis.messages = new Map();\n\t\tthis.directMessages = new Map();\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\n\t\tconst tempUsers = [];\n\t\tconst tempRooms = [];\n\t\tconst tempMessages = new Map();\n\t\tconst tempDirectMessages = new Map();\n\t\tconst promise = new Promise((resolve, reject) => {\n\t\t\tthis.extract.on('entry', Meteor.bindEnvironment((header, stream, next) => {\n\t\t\t\tif (header.name.indexOf('.json') !== -1) {\n\t\t\t\t\tconst info = this.path.parse(header.name);\n\n\t\t\t\t\tstream.on('data', Meteor.bindEnvironment((chunk) => {\n\t\t\t\t\t\tthis.logger.debug(`Processing the file: ${ header.name }`);\n\t\t\t\t\t\tconst file = JSON.parse(chunk);\n\n\t\t\t\t\t\tif (info.base === 'users.json') {\n\t\t\t\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\t\t\t\tfor (const u of file) {\n\t\t\t\t\t\t\t\ttempUsers.push({\n\t\t\t\t\t\t\t\t\tid: u.User.id,\n\t\t\t\t\t\t\t\t\temail: u.User.email,\n\t\t\t\t\t\t\t\t\tname: u.User.name,\n\t\t\t\t\t\t\t\t\tusername: u.User.mention_name,\n\t\t\t\t\t\t\t\t\tavatar: u.User.avatar.replace(/\\n/g, ''),\n\t\t\t\t\t\t\t\t\ttimezone: u.User.timezone,\n\t\t\t\t\t\t\t\t\tisDeleted: u.User.is_deleted\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (info.base === 'rooms.json') {\n\t\t\t\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\t\t\t\tfor (const r of file) {\n\t\t\t\t\t\t\t\ttempRooms.push({\n\t\t\t\t\t\t\t\t\tid: r.Room.id,\n\t\t\t\t\t\t\t\t\tcreator: r.Room.owner,\n\t\t\t\t\t\t\t\t\tcreated: new Date(r.Room.created),\n\t\t\t\t\t\t\t\t\tname: r.Room.name.replace(/ /g, '_').toLowerCase(),\n\t\t\t\t\t\t\t\t\tisPrivate: r.Room.privacy === 'private',\n\t\t\t\t\t\t\t\t\tisArchived: r.Room.is_archived,\n\t\t\t\t\t\t\t\t\ttopic: r.Room.topic\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (info.base === 'history.json') {\n\t\t\t\t\t\t\tconst dirSplit = info.dir.split('/'); //['.', 'users', '1']\n\t\t\t\t\t\t\tconst roomIdentifier = `${ dirSplit[1] }/${ dirSplit[2] }`;\n\n\t\t\t\t\t\t\tif (dirSplit[1] === 'users') {\n\t\t\t\t\t\t\t\tconst msgs = [];\n\t\t\t\t\t\t\t\tfor (const m of file) {\n\t\t\t\t\t\t\t\t\tif (m.PrivateUserMessage) {\n\t\t\t\t\t\t\t\t\t\tmsgs.push({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ m.PrivateUserMessage.id }`,\n\t\t\t\t\t\t\t\t\t\t\tsenderId: m.PrivateUserMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\t\treceiverId: m.PrivateUserMessage.receiver.id,\n\t\t\t\t\t\t\t\t\t\t\ttext: m.PrivateUserMessage.message.indexOf('/me ') === -1 ? m.PrivateUserMessage.message : `${ m.PrivateUserMessage.message.replace(/\\/me /, '_') }_`,\n\t\t\t\t\t\t\t\t\t\t\tts: new Date(m.PrivateUserMessage.timestamp.split(' ')[0])\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttempDirectMessages.set(roomIdentifier, msgs);\n\t\t\t\t\t\t\t} else if (dirSplit[1] === 'rooms') {\n\t\t\t\t\t\t\t\tconst roomMsgs = [];\n\n\t\t\t\t\t\t\t\tfor (const m of file) {\n\t\t\t\t\t\t\t\t\tif (m.UserMessage) {\n\t\t\t\t\t\t\t\t\t\troomMsgs.push({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ dirSplit[2] }-${ m.UserMessage.id }`,\n\t\t\t\t\t\t\t\t\t\t\tuserId: m.UserMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\t\ttext: m.UserMessage.message.indexOf('/me ') === -1 ? m.UserMessage.message : `${ m.UserMessage.message.replace(/\\/me /, '_') }_`,\n\t\t\t\t\t\t\t\t\t\t\tts: new Date(m.UserMessage.timestamp.split(' ')[0])\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else if (m.TopicRoomMessage) {\n\t\t\t\t\t\t\t\t\t\troomMsgs.push({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'topic',\n\t\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ dirSplit[2] }-${ m.TopicRoomMessage.id }`,\n\t\t\t\t\t\t\t\t\t\t\tuserId: m.TopicRoomMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\t\tts: new Date(m.TopicRoomMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t\t\t\t\t\t\ttext: m.TopicRoomMessage.message\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis.logger.warn('HipChat Enterprise importer isn\\'t configured to handle this message:', m);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttempMessages.set(roomIdentifier, roomMsgs);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.logger.warn(`HipChat Enterprise importer isn't configured to handle \"${ dirSplit[1] }\" files.`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//What are these files!?\n\t\t\t\t\t\t\tthis.logger.warn(`HipChat Enterprise importer doesn't know what to do with the file \"${ header.name }\" :o`, info);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\n\t\t\t\t\tstream.on('end', () => next());\n\t\t\t\t\tstream.on('error', () => next());\n\t\t\t\t} else {\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tthis.extract.on('error', (err) => {\n\t\t\t\tthis.logger.warn('extract error:', err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tthis.extract.on('finish', Meteor.bindEnvironment(() => {\n\t\t\t\t// Insert the users record, eventually this might have to be split into several ones as well\n\t\t\t\t// if someone tries to import a several thousands users instance\n\t\t\t\tconst usersId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'users', 'users': tempUsers });\n\t\t\t\tthis.users = this.collection.findOne(usersId);\n\t\t\t\tsuper.updateRecord({ 'count.users': tempUsers.length });\n\t\t\t\tsuper.addCountToTotal(tempUsers.length);\n\n\t\t\t\t// Insert the channels records.\n\t\t\t\tconst channelsId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'channels', 'channels': tempRooms });\n\t\t\t\tthis.channels = this.collection.findOne(channelsId);\n\t\t\t\tsuper.updateRecord({ 'count.channels': tempRooms.length });\n\t\t\t\tsuper.addCountToTotal(tempRooms.length);\n\n\t\t\t\t// Save the messages records to the import record for `startImport` usage\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\tlet messagesCount = 0;\n\t\t\t\tfor (const [channel, msgs] of tempMessages.entries()) {\n\t\t\t\t\tif (!this.messages.get(channel)) {\n\t\t\t\t\t\tthis.messages.set(channel, new Map());\n\t\t\t\t\t}\n\n\t\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\t\tsuper.updateRecord({ 'messagesstatus': channel });\n\n\t\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\t\tBase.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }/${ i }`, 'messages': splitMsg });\n\t\t\t\t\t\t\tthis.messages.get(channel).set(`${ channel }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }`, 'messages': msgs });\n\t\t\t\t\t\tthis.messages.get(channel).set(channel, this.collection.findOne(messagesId));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const [directMsgUser, msgs] of tempDirectMessages.entries()) {\n\t\t\t\t\tthis.logger.debug(`Preparing the direct messages for: ${ directMsgUser }`);\n\t\t\t\t\tif (!this.directMessages.get(directMsgUser)) {\n\t\t\t\t\t\tthis.directMessages.set(directMsgUser, new Map());\n\t\t\t\t\t}\n\n\t\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\t\tsuper.updateRecord({ 'messagesstatus': directMsgUser });\n\n\t\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\t\tBase.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'directMessages', 'name': `${ directMsgUser }/${ i }`, 'messages': splitMsg });\n\t\t\t\t\t\t\tthis.directMessages.get(directMsgUser).set(`${ directMsgUser }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'directMessages', 'name': `${ directMsgUser }`, 'messages': msgs });\n\t\t\t\t\t\tthis.directMessages.get(directMsgUser).set(directMsgUser, this.collection.findOne(messagesId));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsuper.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t\t\t\tsuper.addCountToTotal(messagesCount);\n\n\t\t\t\t//Ensure we have some users, channels, and messages\n\t\t\t\tif (tempUsers.length === 0 || tempRooms.length === 0 || messagesCount === 0) {\n\t\t\t\t\tthis.logger.warn(`The loaded users count ${ tempUsers.length }, the loaded rooms ${ tempRooms.length }, and the loaded messages ${ messagesCount }`);\n\t\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selectionUsers = tempUsers.map((u) => new SelectionUser(u.id, u.username, u.email, u.isDeleted, false, true));\n\t\t\t\tconst selectionChannels = tempRooms.map((r) => new SelectionChannel(r.id, r.name, r.isArchived, true, r.isPrivate));\n\t\t\t\tconst selectionMessages = this.importRecord.count.messages;\n\n\t\t\t\tsuper.updateProgress(ProgressStep.USER_SELECTION);\n\n\t\t\t\tresolve(new Selection(this.name, selectionUsers, selectionChannels, selectionMessages));\n\t\t\t}));\n\n\t\t\t//Wish I could make this cleaner :(\n\t\t\tconst split = dataURI.split(',');\n\t\t\tconst s = new this.Readable;\n\t\t\ts.push(new Buffer(split[split.length - 1], 'base64'));\n\t\t\ts.push(null);\n\t\t\ts.pipe(this.zlib.createGunzip()).pipe(this.extract);\n\t\t});\n\n\t\treturn promise;\n\t}\n\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst started = Date.now();\n\n\t\t//Ensure we're only going to import the users that the user has selected\n\t\tfor (const user of importSelection.users) {\n\t\t\tfor (const u of this.users.users) {\n\t\t\t\tif (u.id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t//Ensure we're only importing the channels the user has selected.\n\t\tfor (const channel of importSelection.channels) {\n\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\tif (c.id === channel.channel_id) {\n\t\t\t\t\tc.do_import = channel.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_USERS);\n\n\t\t\ttry {\n\t\t\t\t//Import the users\n\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\tthis.logger.debug(`Starting the user import: ${ u.username } and are we importing them? ${ u.do_import }`);\n\t\t\t\t\tif (!u.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tlet existantUser = RocketChat.models.Users.findOneByEmailAddress(u.email);\n\n\t\t\t\t\t\t//If we couldn't find one by their email address, try to find an existing user by their username\n\t\t\t\t\t\tif (!existantUser) {\n\t\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByUsername(u.username);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\t//since we have an existing user, let's try a few things\n\t\t\t\t\t\t\tu.rocketId = existantUser._id;\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: u.rocketId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst userId = Accounts.createUser({ email: u.email, password: Date.now() + u.name + u.email.toUpperCase() });\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', u.username, {joinDefaultChannelsSilenced: true});\n\t\t\t\t\t\t\t\t//TODO: Use moment timezone to calc the time offset - Meteor.call 'userSetUtcOffset', user.tz_offset / 3600\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, u.name);\n\t\t\t\t\t\t\t\t//TODO: Think about using a custom field for the users \"title\" field\n\n\t\t\t\t\t\t\t\tif (u.avatar) {\n\t\t\t\t\t\t\t\t\tMeteor.call('setAvatarFromService', `data:image/png;base64,${ u.avatar }`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t//Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\t\tif (u.deleted) {\n\t\t\t\t\t\t\t\t\tMeteor.call('setUserActiveStatus', userId, false);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: userId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t\t\tu.rocketId = userId;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t\t\t//Import the channels\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\t\tif (!c.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(c.name);\n\t\t\t\t\t\t//If the room exists or the name of it is 'general', then we don't need to create it again\n\t\t\t\t\t\tif (existantRoom || c.name.toUpperCase() === 'GENERAL') {\n\t\t\t\t\t\t\tc.rocketId = c.name.toUpperCase() === 'GENERAL' ? 'GENERAL' : existantRoom._id;\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $addToSet: { importIds: c.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//Find the rocketchatId of the user who created this channel\n\t\t\t\t\t\t\tlet creatorId = startedByUserId;\n\t\t\t\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\t\t\t\tif (u.id === c.creator && u.do_import) {\n\t\t\t\t\t\t\t\t\tcreatorId = u.rocketId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Create the channel\n\t\t\t\t\t\t\tMeteor.runAsUser(creatorId, () => {\n\t\t\t\t\t\t\t\tconst roomInfo = Meteor.call(c.isPrivate ? 'createPrivateGroup' : 'createChannel', c.name, []);\n\t\t\t\t\t\t\t\tc.rocketId = roomInfo.rid;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $set: { ts: c.created, topic: c.topic }, $addToSet: { importIds: c.id } });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\t\t\t//Import the Messages\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tfor (const [ch, messagesMap] of this.messages.entries()) {\n\t\t\t\t\tconst hipChannel = this.getChannelFromRoomIdentifier(ch);\n\t\t\t\t\tif (!hipChannel.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(hipChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } });\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tfor (const [msgGroupData, msgs] of messagesMap.entries()) {\n\t\t\t\t\t\t\tsuper.updateRecord({ 'messagesstatus': `${ ch }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\t\tif (isNaN(msg.ts)) {\n\t\t\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ ch }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst creator = this.getRocketUserFromUserId(msg.userId);\n\t\t\t\t\t\t\t\tif (creator) {\n\t\t\t\t\t\t\t\t\tswitch (msg.type) {\n\t\t\t\t\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(creator, {\n\t\t\t\t\t\t\t\t\t\t\t\t_id: msg.id,\n\t\t\t\t\t\t\t\t\t\t\t\tts: msg.ts,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t_id: creator._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: creator.username\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}, room, true);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'topic':\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', room._id, msg.text, creator, { _id: msg.id, ts: msg.ts });\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t//Import the Direct Messages\n\t\t\t\tfor (const [directMsgRoom, directMessagesMap] of this.directMessages.entries()) {\n\t\t\t\t\tconst hipUser = this.getUserFromDirectMessageIdentifier(directMsgRoom);\n\t\t\t\t\tif (!hipUser.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Verify this direct message user's room is valid (confusing but idk how else to explain it)\n\t\t\t\t\tif (!this.getRocketUserFromUserId(hipUser.id)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const [msgGroupData, msgs] of directMessagesMap.entries()) {\n\t\t\t\t\t\tsuper.updateRecord({ 'messagesstatus': `${ directMsgRoom }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\tif (isNaN(msg.ts)) {\n\t\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ directMsgRoom }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//make sure the message sender is a valid user inside rocket.chat\n\t\t\t\t\t\t\tconst sender = this.getRocketUserFromUserId(msg.senderId);\n\t\t\t\t\t\t\tif (!sender) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//make sure the receiver of the message is a valid rocket.chat user\n\t\t\t\t\t\t\tconst receiver = this.getRocketUserFromUserId(msg.receiverId);\n\t\t\t\t\t\t\tif (!receiver) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet room = RocketChat.models.Rooms.findOneById([receiver._id, sender._id].sort().join(''));\n\t\t\t\t\t\t\tif (!room) {\n\t\t\t\t\t\t\t\tMeteor.runAsUser(sender._id, () => {\n\t\t\t\t\t\t\t\t\tconst roomInfo = Meteor.call('createDirectMessage', receiver.username);\n\t\t\t\t\t\t\t\t\troom = RocketChat.models.Rooms.findOneById(roomInfo.rid);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tMeteor.runAsUser(sender._id, () => {\n\t\t\t\t\t\t\t\tRocketChat.sendMessage(sender, {\n\t\t\t\t\t\t\t\t\t_id: msg.id,\n\t\t\t\t\t\t\t\t\tts: msg.ts,\n\t\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t_id: sender._id,\n\t\t\t\t\t\t\t\t\t\tusername: sender.username\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, room, true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsuper.updateProgress(ProgressStep.FINISHING);\n\t\t\t\tsuper.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`HipChat Enterprise Import took ${ timeTook } milliseconds.`);\n\t\t});\n\n\t\treturn super.getProgress();\n\t}\n\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map((u) => new SelectionUser(u.id, u.username, u.email, false, false, true));\n\t\tconst selectionChannels = this.channels.channels.map((c) => new SelectionChannel(c.id, c.name, false, true, c.isPrivate));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\n\tgetChannelFromRoomIdentifier(roomIdentifier) {\n\t\tfor (const ch of this.channels.channels) {\n\t\t\tif (`rooms/${ ch.id }` === roomIdentifier) {\n\t\t\t\treturn ch;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetUserFromDirectMessageIdentifier(directIdentifier) {\n\t\tfor (const u of this.users.users) {\n\t\t\tif (`users/${ u.id }` === directIdentifier) {\n\t\t\t\treturn u;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetRocketUserFromUserId(userId) {\n\t\tfor (const u of this.users.users) {\n\t\t\tif (u.id === userId) {\n\t\t\t\treturn RocketChat.models.Users.findOneById(u.rocketId, { fields: { username: 1 }});\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Importers } from 'meteor/rocketchat:importer';\nimport { HipChatEnterpriseImporterInfo } from '../info';\nimport { HipChatEnterpriseImporter } from './importer';\n\nImporters.add(new HipChatEnterpriseImporterInfo(), HipChatEnterpriseImporter);\n"]}