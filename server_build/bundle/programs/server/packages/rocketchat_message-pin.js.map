{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:message-pin/server/settings.js","meteor://ðŸ’»app/packages/rocketchat:message-pin/server/pinMessage.js","meteor://ðŸ’»app/packages/rocketchat:message-pin/server/publications/pinnedMessages.js","meteor://ðŸ’»app/packages/rocketchat:message-pin/server/startup/indexes.js"],"names":["Meteor","startup","RocketChat","settings","add","type","group","models","Permissions","upsert","$setOnInsert","roles","recursiveRemove","msg","deep","get","attachments","Array","isArray","map","nestedMsg","shouldAdd","attachment","some","message_link","methods","pinMessage","message","pinnedAt","userId","Error","method","action","subscription","Subscriptions","findOneByRoomIdAndUserId","rid","fields","_id","originalMessage","Messages","findOneById","cloneAndSaveAsHistoryById","me","Users","pinned","Date","now","pinnedBy","username","callbacks","run","setPinnedByIdAndUserId","forEach","push","unpinMessage","publish","limit","ready","publication","user","cursorHandle","findPinnedByRoom","sort","ts","observeChanges","added","record","changed","removed","onStop","stop","defer","tryEnsureIndex","sparse"],"mappings":"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","file":"/packages/rocketchat_message-pin.js","sourcesContent":["Meteor.startup(function() {\n\tRocketChat.settings.add('Message_AllowPinning', true, {\n\t\ttype: 'boolean',\n\t\tgroup: 'Message',\n\t\t'public': true\n\t});\n\treturn RocketChat.models.Permissions.upsert('pin-message', {\n\t\t$setOnInsert: {\n\t\t\troles: ['owner', 'moderator', 'admin']\n\t\t}\n\t});\n});\n","const recursiveRemove = (msg, deep = 1) => {\n\tif (!msg) {\n\t\treturn;\n\t}\n\n\tif (deep > RocketChat.settings.get('Message_QuoteChainLimit')) {\n\t\tdelete msg.attachments;\n\t\treturn msg;\n\t}\n\n\tmsg.attachments = Array.isArray(msg.attachments) ? msg.attachments.map(\n\t\tnestedMsg => recursiveRemove(nestedMsg, deep + 1)\n\t) : null;\n\n\treturn msg;\n};\n\nconst shouldAdd = (attachments, attachment) => !attachments.some(({message_link}) => message_link && message_link === attachment.message_link);\n\nMeteor.methods({\n\tpinMessage(message, pinnedAt) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'pinMessage'\n\t\t\t});\n\t\t}\n\n\t\tif (!RocketChat.settings.get('Message_AllowPinning')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning'\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(message.rid, Meteor.userId(), { fields: { _id: 1 } });\n\t\tif (!subscription) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet originalMessage = RocketChat.models.Messages.findOneById(message._id);\n\t\tif (originalMessage == null || originalMessage._id == null) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning'\n\t\t\t});\n\t\t}\n\n\t\t//If we keep history of edits, insert a new message to store history information\n\t\tif (RocketChat.settings.get('Message_KeepHistory')) {\n\t\t\tRocketChat.models.Messages.cloneAndSaveAsHistoryById(message._id);\n\t\t}\n\n\t\tconst me = RocketChat.models.Users.findOneById(userId);\n\n\t\toriginalMessage.pinned = true;\n\t\toriginalMessage.pinnedAt = pinnedAt || Date.now;\n\t\toriginalMessage.pinnedBy = {\n\t\t\t_id: userId,\n\t\t\tusername: me.username\n\t\t};\n\n\t\toriginalMessage = RocketChat.callbacks.run('beforeSaveMessage', originalMessage);\n\n\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\n\t\tconst attachments = [];\n\n\t\tif (Array.isArray(originalMessage.attachments)) {\n\t\t\toriginalMessage.attachments.forEach(attachment => {\n\t\t\t\tif (!attachment.message_link || shouldAdd(attachments, attachment)) {\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n/*\n\t\treturn RocketChat.models.Messages.createWithTypeRoomIdMessageAndUser(\n\t\t\t'message_pinned',\n\t\t\toriginalMessage.rid,\n\t\t\t'',\n\t\t\tme,\n\t\t\t{\n\t\t\t\tattachments: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: originalMessage.msg,\n\t\t\t\t\t\tauthor_name: originalMessage.u.username,\n\t\t\t\t\t\tauthor_icon: getAvatarUrlFromUsername(\n\t\t\t\t\t\t\toriginalMessage.u.username\n\t\t\t\t\t\t),\n\t\t\t\t\t\tts: originalMessage.ts,\n\t\t\t\t\t\tattachments: recursiveRemove(attachments)\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t);*/\n\t\treturn true; /*RocketChat.models.Messages.createWithTypeRoomIdMessageAndUser('message_pinned', originalMessage.rid, '', me, {\n\t\t\tattachments: [\n\t\t\t\t{\n\t\t\t\t\t'text': originalMessage.msg,\n\t\t\t\t\t'author_name': originalMessage.u.username,\n\t\t\t\t\t'author_icon': getAvatarUrlFromUsername(originalMessage.u.username),\n\t\t\t\t\t'ts': originalMessage.ts\n\t\t\t\t}\n\t\t\t]\n\t\t});*/\n\t},\n\tunpinMessage(message) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'unpinMessage'\n\t\t\t});\n\t\t}\n\n\t\tif (!RocketChat.settings.get('Message_AllowPinning')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning'\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(message.rid, Meteor.userId(), { fields: { _id: 1 } });\n\t\tif (!subscription) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet originalMessage = RocketChat.models.Messages.findOneById(message._id);\n\n\t\tif (originalMessage == null || originalMessage._id == null) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning'\n\t\t\t});\n\t\t}\n\n\t\t//If we keep history of edits, insert a new message to store history information\n\t\tif (RocketChat.settings.get('Message_KeepHistory')) {\n\t\t\tRocketChat.models.Messages.cloneAndSaveAsHistoryById(originalMessage._id);\n\t\t}\n\n\t\tconst me = RocketChat.models.Users.findOneById(Meteor.userId());\n\t\toriginalMessage.pinned = false;\n\t\toriginalMessage.pinnedBy = {\n\t\t\t_id: Meteor.userId(),\n\t\t\tusername: me.username\n\t\t};\n\t\toriginalMessage = RocketChat.callbacks.run('beforeSaveMessage', originalMessage);\n\n\t\treturn RocketChat.models.Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t}\n});\n","Meteor.publish('pinnedMessages', function(rid, limit = 50) {\n\tif (!this.userId) {\n\t\treturn this.ready();\n\t}\n\tconst publication = this;\n\n\tconst user = RocketChat.models.Users.findOneById(this.userId);\n\tif (!user) {\n\t\treturn this.ready();\n\t}\n\tconst cursorHandle = RocketChat.models.Messages.findPinnedByRoom(rid, { sort: { ts: -1 }, limit }).observeChanges({\n\t\tadded(_id, record) {\n\t\t\treturn publication.added('rocketchat_pinned_message', _id, record);\n\t\t},\n\t\tchanged(_id, record) {\n\t\t\treturn publication.changed('rocketchat_pinned_message', _id, record);\n\t\t},\n\t\tremoved(_id) {\n\t\t\treturn publication.removed('rocketchat_pinned_message', _id);\n\t\t}\n\t});\n\tthis.ready();\n\treturn this.onStop(function() {\n\t\treturn cursorHandle.stop();\n\t});\n});\n","Meteor.startup(function() {\n\treturn Meteor.defer(function() {\n\t\treturn RocketChat.models.Messages.tryEnsureIndex({\n\t\t\t'pinnedBy._id': 1\n\t\t}, {\n\t\t\tsparse: 1\n\t\t});\n\t});\n});\n"]}