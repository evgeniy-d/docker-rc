{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-slack/info.js","meteor://ðŸ’»app/packages/rocketchat:importer-slack/server/importer.js","meteor://ðŸ’»app/packages/rocketchat:importer-slack/server/adder.js"],"names":["module","export","SlackImporterInfo","ImporterInfo","watch","require","v","constructor","SlackImporter","Base","ProgressStep","Selection","SelectionChannel","SelectionUser","_","default","info","userTags","bots","prepare","dataURI","sentContentType","fileName","image","RocketChatFile","dataURIParse","zip","AdmZip","Buffer","zipEntries","getEntries","tempChannels","tempUsers","tempMessages","forEach","entry","entryName","indexOf","logger","debug","updateProgress","PREPARING_CHANNELS","JSON","parse","getData","toString","filter","channel","creator","PREPARING_USERS","user","is_bot","profile","bot_id","isDirectory","item","split","channelName","msgGroupData","error","warn","usersId","collection","insert","importRecord","_id","name","users","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","Object","keys","messagesObj","messages","date","msgs","getBSONSize","getMaxBSONSize","tmp","getBSONSafeArraysFromAnArray","i","splitMsg","messagesId","some","e","console","log","ERROR","getProgress","selectionUsers","map","id","email","deleted","selectionChannels","is_archived","selectionMessages","count","USER_SELECTION","startImport","importSelection","start","Date","now","key","k","u","user_id","do_import","update","$set","c","channel_id","startedByUserId","Meteor","userId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","push","slack","slackLong","rocket","username","Accounts","createUser","password","toUpperCase","joinDefaultChannelsSilenced","call","url","image_original","image_512","undefined","tz_offset","real_name","setName","addCountCompleted","IMPORTING_CHANNELS","existantRoom","Rooms","findOneByName","is_general","members","reduce","ret","member","getRocketUser","returned","rid","roomUpdate","ts","created","isEmpty","topic","value","purpose","description","missedTypes","ignoreTypes","IMPORTING_MESSAGES","slackChannel","getSlackChannelFromName","room","findOneById","fields","usernames","t","message","msgDataDefaults","replace","parseInt","reactions","reaction","rcUser","type","subtype","Messages","createUserJoinWithRoomIdAndUser","createUserLeaveWithRoomIdAndUser","msgObj","msg","convertSlackMessageToRocketChat","text","sendMessage","botUser","botUsername","bot","attachments","edited","editedAt","editedBy","icons","emoji","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","createRoomRenamedWithRoomIdRoomNameAndUser","author_subname","getAvatarUrlFromUsername","createWithTypeRoomIdMessageAndUser","file","url_private_download","details","message_id","size","mimetype","uploadFile","FINISHING","DONE","find","slackId","userReplace","Array","from","getSelection","Importers","add"],"mappings":"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","file":"/packages/rocketchat_importer-slack.js","sourcesContent":["import { ImporterInfo } from 'meteor/rocketchat:importer';\n\nexport class SlackImporterInfo extends ImporterInfo {\n\tconstructor() {\n\t\tsuper('slack', 'Slack', 'application/zip');\n\t}\n}\n","import {\n\tBase,\n\tProgressStep,\n\tSelection,\n\tSelectionChannel,\n\tSelectionUser\n} from 'meteor/rocketchat:importer';\n\nimport _ from 'underscore';\n\nexport class SlackImporter extends Base {\n\tconstructor(info) {\n\t\tsuper(info);\n\t\tthis.userTags = [];\n\t\tthis.bots = {};\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\n\t\tconst { image } = RocketChatFile.dataURIParse(dataURI);\n\t\tconst zip = new this.AdmZip(new Buffer(image, 'base64'));\n\t\tconst zipEntries = zip.getEntries();\n\n\t\tlet tempChannels = [];\n\t\tlet tempUsers = [];\n\t\tconst tempMessages = {};\n\n\t\tzipEntries.forEach(entry => {\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\treturn this.logger.debug(`Ignoring the file: ${ entry.entryName }`);\n\t\t\t}\n\n\t\t\tif (entry.entryName === 'channels.json') {\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\ttempChannels = JSON.parse(entry.getData().toString()).filter(channel => channel.creator != null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (entry.entryName === 'users.json') {\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\ttempUsers = JSON.parse(entry.getData().toString());\n\n\t\t\t\ttempUsers.forEach(user => {\n\t\t\t\t\tif (user.is_bot) {\n\t\t\t\t\t\tthis.bots[user.profile.bot_id] = user;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!entry.isDirectory && entry.entryName.indexOf('/') > -1) {\n\t\t\t\tconst item = entry.entryName.split('/');\n\t\t\t\tconst channelName = item[0];\n\t\t\t\tconst msgGroupData = item[1].split('.')[0];\n\t\t\t\ttempMessages[channelName] = tempMessages[channelName] || {};\n\n\t\t\t\ttry {\n\t\t\t\t\ttempMessages[channelName][msgGroupData] = JSON.parse(entry.getData().toString());\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logger.warn(`${ entry.entryName } is not a valid JSON file! Unable to import it.`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Insert the users record, eventually this might have to be split into several ones as well\n\t\t// if someone tries to import a several thousands users instance\n\t\tconst usersId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'users', 'users': tempUsers });\n\t\tthis.users = this.collection.findOne(usersId);\n\t\tthis.updateRecord({ 'count.users': tempUsers.length });\n\t\tthis.addCountToTotal(tempUsers.length);\n\n\t\t// Insert the channels records.\n\t\tconst channelsId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'channels', 'channels': tempChannels });\n\t\tthis.channels = this.collection.findOne(channelsId);\n\t\tthis.updateRecord({ 'count.channels': tempChannels.length });\n\t\tthis.addCountToTotal(tempChannels.length);\n\n\t\t// Insert the messages records\n\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\n\t\tlet messagesCount = 0;\n\t\tObject.keys(tempMessages).forEach(channel => {\n\t\t\tconst messagesObj = tempMessages[channel];\n\t\t\tthis.messages[channel] = this.messages[channel] || {};\n\n\t\t\tObject.keys(messagesObj).forEach(date => {\n\t\t\t\tconst msgs = messagesObj[date];\n\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\tthis.updateRecord({ 'messagesstatus': `${ channel }/${ date }` });\n\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\tconst tmp = Base.getBSONSafeArraysFromAnArray(msgs);\n\t\t\t\t\tObject.keys(tmp).forEach(i => {\n\t\t\t\t\t\tconst splitMsg = tmp[i];\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }/${ date }.${ i }`, 'messages': splitMsg });\n\t\t\t\t\t\tthis.messages[channel][`${ date }.${ i }`] = this.collection.findOne(messagesId);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }/${ date }`, 'messages': msgs });\n\t\t\t\t\tthis.messages[channel][date] = this.collection.findOne(messagesId);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t\tthis.addCountToTotal(messagesCount);\n\n\t\tif ([tempUsers.length, tempChannels.length, messagesCount].some(e => e === 0)) {\n\t\t\tthis.logger.warn(`The loaded users count ${ tempUsers.length }, the loaded channels ${ tempChannels.length }, and the loaded messages ${ messagesCount }`);\n\t\t\tconsole.log(`The loaded users count ${ tempUsers.length }, the loaded channels ${ tempChannels.length }, and the loaded messages ${ messagesCount }`);\n\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\treturn this.getProgress();\n\t\t}\n\n\t\tconst selectionUsers = tempUsers.map(user => new SelectionUser(user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot));\n\t\tconst selectionChannels = tempChannels.map(channel => new SelectionChannel(channel.id, channel.name, channel.is_archived, true, false));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\t\tsuper.updateProgress(ProgressStep.USER_SELECTION);\n\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst start = Date.now();\n\n\t\tObject.keys(importSelection.users).forEach(key => {\n\t\t\tconst user = importSelection.users[key];\n\t\t\tObject.keys(this.users.users).forEach(k => {\n\t\t\t\tconst u = this.users.users[k];\n\t\t\t\tif (u.id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\tObject.keys(importSelection.channels).forEach(key => {\n\t\t\tconst channel = importSelection.channels[key];\n\t\t\tObject.keys(this.channels.channels).forEach(k => {\n\t\t\t\tconst c = this.channels.channels[k];\n\t\t\t\tif (c.id === channel.channel_id) {\n\t\t\t\t\tc.do_import = channel.do_import;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\ttry {\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_USERS);\n\t\t\t\tthis.users.users.forEach(user => {\n\t\t\t\t\tif (!user.do_import) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantUser = RocketChat.models.Users.findOneByEmailAddress(user.profile.email) || RocketChat.models.Users.findOneByUsername(user.name);\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\tuser.rocketId = existantUser._id;\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: user.rocketId }, { $addToSet: { importIds: user.id } });\n\t\t\t\t\t\t\tthis.userTags.push({\n\t\t\t\t\t\t\t\tslack: `<@${ user.id }>`,\n\t\t\t\t\t\t\t\tslackLong: `<@${ user.id }|${ user.name }>`,\n\t\t\t\t\t\t\t\trocket: `@${ existantUser.username }`\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst userId = user.profile.email ? Accounts.createUser({ email: user.profile.email, password: Date.now() + user.name + user.profile.email.toUpperCase() }) : Accounts.createUser({ username: user.name, password: Date.now() + user.name, joinDefaultChannelsSilenced: true });\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', user.name, { joinDefaultChannelsSilenced: true });\n\n\t\t\t\t\t\t\t\tconst url = user.profile.image_original || user.profile.image_512;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tMeteor.call('setAvatarFromService', url, undefined, 'url');\n\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\tthis.logger.warn(`Failed to set ${ user.name }'s avatar from url ${ url }`);\n\t\t\t\t\t\t\t\t\tconsole.log(`Failed to set ${ user.name }'s avatar from url ${ url }`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600\n\t\t\t\t\t\t\t\tif (user.tz_offset) {\n\t\t\t\t\t\t\t\t\tMeteor.call('userSetUtcOffset', user.tz_offset / 3600);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: userId }, { $addToSet: { importIds: user.id } });\n\n\t\t\t\t\t\t\tif (user.profile.real_name) {\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, user.profile.real_name);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\tif (user.deleted) {\n\t\t\t\t\t\t\t\tMeteor.call('setUserActiveStatus', userId, false);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tuser.rocketId = userId;\n\t\t\t\t\t\t\tthis.userTags.push({\n\t\t\t\t\t\t\t\tslack: `<@${ user.id }>`,\n\t\t\t\t\t\t\t\tslackLong: `<@${ user.id }|${ user.name }>`,\n\t\t\t\t\t\t\t\trocket: `@${ user.name }`\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tthis.channels.channels.forEach(channel => {\n\t\t\t\t\tif (!channel.do_import) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser (startedByUserId, () => {\n\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(channel.name);\n\t\t\t\t\t\tif (existantRoom || channel.is_general) {\n\t\t\t\t\t\t\tif (channel.is_general && existantRoom && channel.name !== existantRoom.name) {\n\t\t\t\t\t\t\t\tMeteor.call('saveRoomSettings', 'GENERAL', 'roomName', channel.name);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tchannel.rocketId = channel.is_general ? 'GENERAL' : existantRoom._id;\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: channel.rocketId }, { $addToSet: { importIds: channel.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst users = channel.members\n\t\t\t\t\t\t\t\t.reduce((ret, member) => {\n\t\t\t\t\t\t\t\t\tif (member !== channel.creator) {\n\t\t\t\t\t\t\t\t\t\tconst user = this.getRocketUser(member);\n\t\t\t\t\t\t\t\t\t\tif (user && user.username) {\n\t\t\t\t\t\t\t\t\t\t\tret.push(user.username);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t\t\t}, []);\n\t\t\t\t\t\t\tlet userId = startedByUserId;\n\t\t\t\t\t\t\tthis.users.users.forEach(user => {\n\t\t\t\t\t\t\t\tif (user.id === channel.creator && user.do_import) {\n\t\t\t\t\t\t\t\t\tuserId = user.rocketId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tconst returned = Meteor.call('createChannel', channel.name, users);\n\t\t\t\t\t\t\t\tchannel.rocketId = returned.rid;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// @TODO implement model specific function\n\t\t\t\t\t\t\tconst roomUpdate = {\n\t\t\t\t\t\t\t\tts: new Date(channel.created * 1000)\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (!_.isEmpty(channel.topic && channel.topic.value)) {\n\t\t\t\t\t\t\t\troomUpdate.topic = channel.topic.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!_.isEmpty(channel.purpose && channel.purpose.value)) {\n\t\t\t\t\t\t\t\troomUpdate.description = channel.purpose.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: channel.rocketId }, { $set: roomUpdate, $addToSet: { importIds: channel.id } });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\t\t\tconst missedTypes = {};\n\t\t\t\tconst ignoreTypes = { 'bot_add': true, 'file_comment': true, 'file_mention': true };\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tObject.keys(this.messages).forEach(channel => {\n\t\t\t\t\tconst messagesObj = this.messages[channel];\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () =>{\n\t\t\t\t\t\tconst slackChannel = this.getSlackChannelFromName(channel);\n\t\t\t\t\t\tif (!slackChannel || !slackChannel.do_import) { return; }\n\t\t\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(slackChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } });\n\t\t\t\t\t\tObject.keys(messagesObj).forEach(date => {\n\t\t\t\t\t\t\tconst msgs = messagesObj[date];\n\t\t\t\t\t\t\tmsgs.messages.forEach(message => {\n\t\t\t\t\t\t\t\tthis.updateRecord({ 'messagesstatus': `${ channel }/${ date }.${ msgs.messages.length }` });\n\t\t\t\t\t\t\t\tconst msgDataDefaults ={\n\t\t\t\t\t\t\t\t\t_id: `slack-${ slackChannel.id }-${ message.ts.replace(/\\./g, '-') }`,\n\t\t\t\t\t\t\t\t\tts: new Date(parseInt(message.ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Process the reactions\n\t\t\t\t\t\t\t\tif (message.reactions && message.reactions.length > 0) {\n\t\t\t\t\t\t\t\t\tmsgDataDefaults.reactions = {};\n\n\t\t\t\t\t\t\t\t\tmessage.reactions.forEach(reaction => {\n\t\t\t\t\t\t\t\t\t\treaction.name = `:${ reaction.name }:`;\n\t\t\t\t\t\t\t\t\t\tmsgDataDefaults.reactions[reaction.name] = { usernames: [] };\n\n\t\t\t\t\t\t\t\t\t\treaction.users.forEach(u => {\n\t\t\t\t\t\t\t\t\t\t\tconst rcUser = this.getRocketUser(u);\n\t\t\t\t\t\t\t\t\t\t\tif (!rcUser) { return; }\n\n\t\t\t\t\t\t\t\t\t\t\tmsgDataDefaults.reactions[reaction.name].usernames.push(rcUser.username);\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\tif (msgDataDefaults.reactions[reaction.name].usernames.length === 0) {\n\t\t\t\t\t\t\t\t\t\t\tdelete msgDataDefaults.reactions[reaction.name];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (message.type === 'message') {\n\t\t\t\t\t\t\t\t\tif (message.subtype) {\n\t\t\t\t\t\t\t\t\t\tif (message.subtype === 'channel_join') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createUserJoinWithRoomIdAndUser(room._id, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_leave') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(room._id, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'me_message') {\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: `_${ this.convertSlackMessageToRocketChat(message.text) }_`\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(this.getRocketUser(message.user), msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'bot_message' || message.subtype === 'slackbot_response') {\n\t\t\t\t\t\t\t\t\t\t\tconst botUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 }});\n\t\t\t\t\t\t\t\t\t\t\tconst botUsername = this.bots[message.bot_id] ? this.bots[message.bot_id].name : message.username;\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: this.convertSlackMessageToRocketChat(message.text),\n\t\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\t\tbot: true,\n\t\t\t\t\t\t\t\t\t\t\t\tattachments: message.attachments,\n\t\t\t\t\t\t\t\t\t\t\t\tusername: botUsername || undefined\n\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t\tif (message.edited) {\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\tconst editedBy = this.getRocketUser(message.edited.user);\n\t\t\t\t\t\t\t\t\t\t\t\tif (editedBy) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedBy = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id: editedBy._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tusername: editedBy.username\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (message.icons) {\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.emoji = message.icons.emoji;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(botUser, msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_purpose') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_description', room._id, message.purpose, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_topic') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', room._id, message.topic, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_name') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomRenamedWithRoomIdRoomNameAndUser(room._id, message.name, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'pinned_item') {\n\t\t\t\t\t\t\t\t\t\t\tif (message.attachments) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'text': this.convertSlackMessageToRocketChat(message.attachments[0].text),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'author_name' : message.attachments[0].author_subname,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'author_icon' : getAvatarUrlFromUsername(message.attachments[0].author_subname)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createWithTypeRoomIdMessageAndUser('message_pinned', room._id, '', this.getRocketUser(message.user), msgObj);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t//TODO: make this better\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.debug('Pinned item with no attachment, needs work.');\n\t\t\t\t\t\t\t\t\t\t\t\t//RocketChat.models.Messages.createWithTypeRoomIdMessageAndUser 'message_pinned', room._id, '', @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'file_share') {\n\t\t\t\t\t\t\t\t\t\t\tif (message.file && message.file.url_private_download !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst details = {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage_id: `slack-${ message.ts.replace(/\\./g, '-') }`,\n\t\t\t\t\t\t\t\t\t\t\t\t\tname: message.file.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\tsize: message.file.size,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: message.file.mimetype,\n\t\t\t\t\t\t\t\t\t\t\t\t\trid: room._id\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\tthis.uploadFile(details, message.file.url_private_download, this.getRocketUser(message.user), room, new Date(parseInt(message.ts.split('.')[0]) * 1000));\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (!missedTypes[message.subtype] && !ignoreTypes[message.subtype]) {\n\t\t\t\t\t\t\t\t\t\t\tmissedTypes[message.subtype] = message;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconst user = this.getRocketUser(message.user);\n\t\t\t\t\t\t\t\t\t\tif (user) {\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: this.convertSlackMessageToRocketChat(message.text),\n\t\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t\tif (message.edited) {\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\tconst editedBy = this.getRocketUser(message.edited.user);\n\t\t\t\t\t\t\t\t\t\t\t\tif (editedBy) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedBy = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id: editedBy._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tusername: editedBy.username\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(this.getRocketUser(message.user), msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.warn(`Failed to import the message: ${ msgDataDefaults._id }`);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif (!_.isEmpty(missedTypes)) {\n\t\t\t\t\tconsole.log('Missed import types:', missedTypes);\n\t\t\t\t}\n\n\t\t\t\tsuper.updateProgress(ProgressStep.FINISHING);\n\n\t\t\t\tthis.channels.channels.forEach(channel => {\n\t\t\t\t\tif (channel.do_import && channel.is_archived) {\n\t\t\t\t\t\tMeteor.runAsUser(startedByUserId, function() {\n\t\t\t\t\t\t\tMeteor.call('archiveRoom', channel.rocketId);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsuper.updateProgress(ProgressStep.DONE);\n\n\t\t\t\tthis.logger.log(`Import took ${ Date.now() - start } milliseconds.`);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t}\n\t\t});\n\n\t\treturn this.getProgress();\n\t}\n\n\tgetSlackChannelFromName(channelName) {\n\t\treturn this.channels.channels.find(channel => channel.name === channelName);\n\t}\n\n\tgetRocketUser(slackId) {\n\t\tconst user = this.users.users.find(user => user.id === slackId);\n\n\t\tif (user) {\n\t\t\treturn RocketChat.models.Users.findOneById(user.rocketId, { fields: { username: 1, name: 1 }});\n\t\t}\n\t}\n\n\tconvertSlackMessageToRocketChat(message) {\n\t\tif (message) {\n\t\t\tmessage = message.replace(/<!everyone>/g, '@all');\n\t\t\tmessage = message.replace(/<!channel>/g, '@all');\n\t\t\tmessage = message.replace(/<!here>/g, '@here');\n\t\t\tmessage = message.replace(/&gt;/g, '>');\n\t\t\tmessage = message.replace(/&lt;/g, '<');\n\t\t\tmessage = message.replace(/&amp;/g, '&');\n\t\t\tmessage = message.replace(/:simple_smile:/g, ':smile:');\n\t\t\tmessage = message.replace(/:memo:/g, ':pencil:');\n\t\t\tmessage = message.replace(/:piggy:/g, ':pig:');\n\t\t\tmessage = message.replace(/:uk:/g, ':gb:');\n\t\t\tmessage = message.replace(/<(http[s]?:[^>]*)>/g, '$1');\n\n\t\t\tfor (const userReplace of Array.from(this.userTags)) {\n\t\t\t\tmessage = message.replace(userReplace.slack, userReplace.rocket);\n\t\t\t\tmessage = message.replace(userReplace.slackLong, userReplace.rocket);\n\t\t\t}\n\t\t} else {\n\t\t\tmessage = '';\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map(user => new SelectionUser(user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot));\n\t\tconst selectionChannels = this.channels.channels.map(channel => new SelectionChannel(channel.id, channel.name, channel.is_archived, true, false));\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, this.importRecord.count.messages);\n\t}\n}\n","import { Importers } from 'meteor/rocketchat:importer';\nimport { SlackImporterInfo } from '../info';\nimport { SlackImporter } from './importer';\n\nImporters.add(new SlackImporterInfo(), SlackImporter);\n"]}