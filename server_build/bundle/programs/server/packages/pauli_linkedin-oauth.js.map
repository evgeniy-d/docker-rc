{"version":3,"sources":["meteor://ðŸ’»app/packages/pauli:linkedin-oauth/linkedin-server.js"],"names":["LinkedIn","OAuth","registerService","query","response","getTokenResponse","accessToken","identity","getIdentity","id","Error","serviceData","expiresAt","Date","expiresIn","whiteListed","fields","_","pick","extraFields","replace","getExtraData","extend","options","profile","url","Meteor","http","get","params","oauth2_access_token","format","data","isJSON","str","JSON","parse","e","config","ServiceConfiguration","configurations","findOne","service","ConfigError","responseContent","post","grant_type","client_id","clientId","client_secret","openSecret","secret","code","redirect_uri","_redirectUri","content","err","message","parsedResponse","access_token","expires_in","retrieveCredential","credentialToken","credentialSecret"],"mappings":"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","file":"/packages/pauli_linkedin-oauth.js","sourcesContent":["LinkedIn = {};\n\nOAuth.registerService('linkedin', 2, null, function(query) {\n\n  var response = getTokenResponse(query);\n  var accessToken = response.accessToken;\n  var identity = getIdentity(accessToken);\n\n  var id = identity.id;\n  if (!id) {\n    throw new Error(\"LinkedIn did not provide an id\");\n  }\n  var serviceData = {\n    id: id,\n    accessToken: accessToken,\n    expiresAt: (+new Date) + (1000 * response.expiresIn)\n  };\n\n  var whiteListed = ['firstName', 'headline', 'lastName'];\n\n  // include all fields from linkedin\n  // https://developer.linkedin.com/documents/authentication\n  var fields = _.pick(identity, whiteListed);\n\n  // list of extra fields\n  // http://developer.linkedin.com/documents/profile-fields\n  var extraFields = 'email-address,location:(name),num-connections,picture-url,public-profile-url,skills,languages,three-current-positions,recommendations-received';\n\n  // remove the whitespaces which could break the request\n  extraFields = extraFields.replace(/\\s+/g, '');\n\n  fields = getExtraData(accessToken, extraFields, fields);\n\n  _.extend(serviceData, fields);\n\n  return {\n    serviceData: serviceData,\n    options: {\n      profile: fields\n    }\n  };\n});\n\nvar getExtraData = function(accessToken, extraFields, fields) {\n  var url = 'https://api.linkedin.com/v1/people/~:(' + extraFields + ')';\n  var response = Meteor.http.get(url, {\n    params: {\n      oauth2_access_token: accessToken,\n      format: 'json'\n    }\n  }).data;\n  return _.extend(fields, response);\n}\n\n// checks whether a string parses as JSON\nvar isJSON = function (str) {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\nvar getTokenResponse = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({service: 'linkedin'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError(\"Service not configured\");\n\n  var responseContent;\n  try {\n    //Request an access token\n    responseContent = Meteor.http.post(\n       \"https://api.linkedin.com/uas/oauth2/accessToken\", {\n         params: {\n           grant_type: 'authorization_code',\n           client_id: config.clientId,\n           client_secret: OAuth.openSecret(config.secret),\n           code: query.code,\n           redirect_uri: OAuth._redirectUri('linkedin', config)\n         }\n       }).content;\n  } catch (err) {\n    throw new Error(\"Failed to complete OAuth handshake with LinkedIn. \" + err.message);\n  }\n\n  // If 'responseContent' does not parse as JSON, it is an error.\n  if (!isJSON(responseContent)) {\n    throw new Error(\"Failed to complete OAuth handshake with LinkedIn. \" + responseContent);\n  }\n\n  // Success! Extract access token and expiration\n  var parsedResponse = JSON.parse(responseContent);\n  var accessToken = parsedResponse.access_token;\n  var expiresIn = parsedResponse.expires_in;\n\n  if (!accessToken) {\n    throw new Error(\"Failed to complete OAuth handshake with LinkedIn \" +\n      \"-- can't find access token in HTTP response. \" + responseContent);\n  }\n\n  return {\n    accessToken: accessToken,\n    expiresIn: expiresIn\n  };\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    return Meteor.http.get(\"https://www.linkedin.com/v1/people/~\", {\n      params: {oauth2_access_token: accessToken, format: 'json'}}).data;\n  } catch (err) {\n    throw new Error(\"Failed to fetch identity from LinkedIn. \" + err.message);\n  }\n};\n\nLinkedIn.retrieveCredential = function(credentialToken, credentialSecret) {\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n"]}